//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using NHibernate.Engine;
using NHibernate.Metadata;
using NHibernate.Persister.Entity;

namespace NHibernate.Action
{
	using System.Threading.Tasks;
	using System.Threading;
	public partial class BulkOperationCleanupAction: IExecutable
	{

		#region IExecutable Members

		public Task BeforeExecutionsAsync(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			try
			{
				BeforeExecutions();
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		public Task ExecuteAsync(CancellationToken cancellationToken)
		{
			if (cancellationToken.IsCancellationRequested)
			{
				return Task.FromCanceled<object>(cancellationToken);
			}
			try
			{
				Execute();
				return Task.CompletedTask;
			}
			catch (Exception ex)
			{
				return Task.FromException<object>(ex);
			}
		}

		private async Task EvictCollectionRegionsAsync(CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			if (affectedCollectionRoles != null && affectedCollectionRoles.Any())
			{
				await (session.Factory.EvictCollectionAsync(affectedCollectionRoles, cancellationToken)).ConfigureAwait(false);
			}
		}

		private async Task EvictEntityRegionsAsync(CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			if (affectedEntityNames != null && affectedEntityNames.Any())
			{
				await (session.Factory.EvictEntityAsync(affectedEntityNames, cancellationToken)).ConfigureAwait(false);
			}
		}

		#endregion

		public virtual async Task InitAsync(CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			await (EvictEntityRegionsAsync(cancellationToken)).ConfigureAwait(false);
			await (EvictCollectionRegionsAsync(cancellationToken)).ConfigureAwait(false);
		}
	}
}

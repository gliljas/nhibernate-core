//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 HqlSqlWalker.g 2014-12-31 16:02:14

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System;
using System.Text;
using NHibernate.Hql.Ast.ANTLR.Tree;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;



namespace  NHibernate.Hql.Ast.ANTLR 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class HqlSqlWalker : Antlr.Runtime.Tree.TreeParser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AGGREGATE", "ALIAS", "ALL", "AND", "ANY", "AS", "ASCENDING", "AVG", "BAND", "BETWEEN", "BNOT", "BOR", "BOTH", "BXOR", "CASE", "CASE2", "CLASS", "CLOSE", "CLOSE_BRACKET", "COLON", "COMMA", "CONCAT", "CONSTANT", "CONSTRUCTOR", "COUNT", "DELETE", "DESCENDING", "DISTINCT", "DIV", "DOT", "ELEMENTS", "ELSE", "EMPTY", "END", "EQ", "ESCAPE", "ESCqs", "EXISTS", "EXPONENT", "EXPR_LIST", "FALSE", "FETCH", "FILTER_ENTITY", "FLOAT_SUFFIX", "FROM", "FULL", "GE", "GROUP", "GT", "HAVING", "HEX_DIGIT", "IDENT", "ID_LETTER", "ID_START_LETTER", "IN", "INDEX_OP", "INDICES", "INNER", "INSERT", "INTO", "IN_LIST", "IS", "IS_NOT_NULL", "IS_NULL", "JAVA_CONSTANT", "JOIN", "LE", "LEADING", "LEFT", "LIKE", "LITERAL_by", "LT", "MAX", "MEMBER", "METHOD_CALL", "MIN", "MINUS", "NE", "NEW", "NOT", "NOT_BETWEEN", "NOT_IN", "NOT_LIKE", "NULL", "NUM_DECIMAL", "NUM_DOUBLE", "NUM_FLOAT", "NUM_INT", "NUM_LONG", "OBJECT", "OF", "ON", "OPEN", "OPEN_BRACKET", "OR", "ORDER", "ORDER_ELEMENT", "OUTER", "PARAM", "PLUS", "PROPERTIES", "QUERY", "QUOTED_String", "RANGE", "RIGHT", "ROW_STAR", "SELECT", "SELECT_FROM", "SET", "SKIP", "SOME", "SQL_NE", "STAR", "SUM", "TAKE", "THEN", "TRAILING", "TRUE", "UNARY_MINUS", "UNARY_PLUS", "UNION", "UPDATE", "VECTOR_EXPR", "VERSIONED", "WEIRD_IDENT", "WHEN", "WHERE", "WITH", "WS", "'ascending'", "'descending'", "ALIAS_REF", "BOGUS", "FILTERS", "FROM_FRAGMENT", "IMPLIED_FROM", "JOIN_FRAGMENT", "LEFT_OUTER", "METHOD_NAME", "NAMED_PARAM", "PROPERTY_REF", "RIGHT_OUTER", "SELECT_CLAUSE", "SELECT_COLUMNS", "SELECT_EXPR", "SQL_TOKEN", "THETA_JOINS"
	};
	public const int EOF=-1;
	public const int AGGREGATE=4;
	public const int ALIAS=5;
	public const int ALL=6;
	public const int AND=7;
	public const int ANY=8;
	public const int AS=9;
	public const int ASCENDING=10;
	public const int AVG=11;
	public const int BAND=12;
	public const int BETWEEN=13;
	public const int BNOT=14;
	public const int BOR=15;
	public const int BOTH=16;
	public const int BXOR=17;
	public const int CASE=18;
	public const int CASE2=19;
	public const int CLASS=20;
	public const int CLOSE=21;
	public const int CLOSE_BRACKET=22;
	public const int COLON=23;
	public const int COMMA=24;
	public const int CONCAT=25;
	public const int CONSTANT=26;
	public const int CONSTRUCTOR=27;
	public const int COUNT=28;
	public const int DELETE=29;
	public const int DESCENDING=30;
	public const int DISTINCT=31;
	public const int DIV=32;
	public const int DOT=33;
	public const int ELEMENTS=34;
	public const int ELSE=35;
	public const int EMPTY=36;
	public const int END=37;
	public const int EQ=38;
	public const int ESCAPE=39;
	public const int ESCqs=40;
	public const int EXISTS=41;
	public const int EXPONENT=42;
	public const int EXPR_LIST=43;
	public const int FALSE=44;
	public const int FETCH=45;
	public const int FILTER_ENTITY=46;
	public const int FLOAT_SUFFIX=47;
	public const int FROM=48;
	public const int FULL=49;
	public const int GE=50;
	public const int GROUP=51;
	public const int GT=52;
	public const int HAVING=53;
	public const int HEX_DIGIT=54;
	public const int IDENT=55;
	public const int ID_LETTER=56;
	public const int ID_START_LETTER=57;
	public const int IN=58;
	public const int INDEX_OP=59;
	public const int INDICES=60;
	public const int INNER=61;
	public const int INSERT=62;
	public const int INTO=63;
	public const int IN_LIST=64;
	public const int IS=65;
	public const int IS_NOT_NULL=66;
	public const int IS_NULL=67;
	public const int JAVA_CONSTANT=68;
	public const int JOIN=69;
	public const int LE=70;
	public const int LEADING=71;
	public const int LEFT=72;
	public const int LIKE=73;
	public const int LITERAL_by=74;
	public const int LT=75;
	public const int MAX=76;
	public const int MEMBER=77;
	public const int METHOD_CALL=78;
	public const int MIN=79;
	public const int MINUS=80;
	public const int NE=81;
	public const int NEW=82;
	public const int NOT=83;
	public const int NOT_BETWEEN=84;
	public const int NOT_IN=85;
	public const int NOT_LIKE=86;
	public const int NULL=87;
	public const int NUM_DECIMAL=88;
	public const int NUM_DOUBLE=89;
	public const int NUM_FLOAT=90;
	public const int NUM_INT=91;
	public const int NUM_LONG=92;
	public const int OBJECT=93;
	public const int OF=94;
	public const int ON=95;
	public const int OPEN=96;
	public const int OPEN_BRACKET=97;
	public const int OR=98;
	public const int ORDER=99;
	public const int ORDER_ELEMENT=100;
	public const int OUTER=101;
	public const int PARAM=102;
	public const int PLUS=103;
	public const int PROPERTIES=104;
	public const int QUERY=105;
	public const int QUOTED_String=106;
	public const int RANGE=107;
	public const int RIGHT=108;
	public const int ROW_STAR=109;
	public const int SELECT=110;
	public const int SELECT_FROM=111;
	public const int SET=112;
	public const int SKIP=113;
	public const int SOME=114;
	public const int SQL_NE=115;
	public const int STAR=116;
	public const int SUM=117;
	public const int TAKE=118;
	public const int THEN=119;
	public const int TRAILING=120;
	public const int TRUE=121;
	public const int UNARY_MINUS=122;
	public const int UNARY_PLUS=123;
	public const int UNION=124;
	public const int UPDATE=125;
	public const int VECTOR_EXPR=126;
	public const int VERSIONED=127;
	public const int WEIRD_IDENT=128;
	public const int WHEN=129;
	public const int WHERE=130;
	public const int WITH=131;
	public const int WS=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int ALIAS_REF=135;
	public const int BOGUS=136;
	public const int FILTERS=137;
	public const int FROM_FRAGMENT=138;
	public const int IMPLIED_FROM=139;
	public const int JOIN_FRAGMENT=140;
	public const int LEFT_OUTER=141;
	public const int METHOD_NAME=142;
	public const int NAMED_PARAM=143;
	public const int PROPERTY_REF=144;
	public const int RIGHT_OUTER=145;
	public const int SELECT_CLAUSE=146;
	public const int SELECT_COLUMNS=147;
	public const int SELECT_EXPR=148;
	public const int SQL_TOKEN=149;
	public const int THETA_JOINS=150;

	public HqlSqlWalker(ITreeNodeStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public HqlSqlWalker(ITreeNodeStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return HqlSqlWalker.tokenNames; } }
	public override string GrammarFileName { get { return "HqlSqlWalker.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// HqlSqlWalker.g:41:8: public statement : ( selectStatement | updateStatement | deleteStatement | insertStatement );
	[GrammarRule("statement")]
	public AstTreeRuleReturnScope<IASTNode, IASTNode> statement()
	{
		EnterRule_statement();
		EnterRule("statement", 1);
		TraceIn("statement", 1);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> selectStatement1 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> updateStatement2 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> deleteStatement3 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> insertStatement4 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(41, 1);
		try
		{
			// HqlSqlWalker.g:42:2: ( selectStatement | updateStatement | deleteStatement | insertStatement )
			int alt1=4;
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case QUERY:
			case UNION:
				{
				alt1 = 1;
				}
				break;
			case UPDATE:
				{
				alt1 = 2;
				}
				break;
			case DELETE:
				{
				alt1 = 3;
				}
				break;
			case INSERT:
				{
				alt1 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:42:4: selectStatement
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(42, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._selectStatement_in_statement170);
				selectStatement1=selectStatement();
				PopFollow();

				adaptor.AddChild(root_0, selectStatement1.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:42:22: updateStatement
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(42, 22);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._updateStatement_in_statement174);
				updateStatement2=updateStatement();
				PopFollow();

				adaptor.AddChild(root_0, updateStatement2.Tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:42:40: deleteStatement
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(42, 40);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._deleteStatement_in_statement178);
				deleteStatement3=deleteStatement();
				PopFollow();

				adaptor.AddChild(root_0, deleteStatement3.Tree);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:42:58: insertStatement
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(42, 58);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._insertStatement_in_statement182);
				insertStatement4=insertStatement();
				PopFollow();

				adaptor.AddChild(root_0, insertStatement4.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statement", 1);
			LeaveRule("statement", 1);
			LeaveRule_statement();
		}
		DebugLocation(43, 1);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return retval;

	}
	// $ANTLR end "statement"

	partial void EnterRule_selectStatement();
	partial void LeaveRule_selectStatement();
	// $ANTLR start "selectStatement"
	// HqlSqlWalker.g:45:1: selectStatement : query ;
	[GrammarRule("selectStatement")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> selectStatement()
	{
		EnterRule_selectStatement();
		EnterRule("selectStatement", 2);
		TraceIn("selectStatement", 2);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> query5 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "selectStatement");
		DebugLocation(45, 1);
		try
		{
			// HqlSqlWalker.g:46:2: ( query )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:46:4: query
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(46, 4);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._query_in_selectStatement193);
			query5=query();
			PopFollow();

			adaptor.AddChild(root_0, query5.Tree);


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("selectStatement", 2);
			LeaveRule("selectStatement", 2);
			LeaveRule_selectStatement();
		}
		DebugLocation(47, 1);
		} finally { DebugExitRule(GrammarFileName, "selectStatement"); }
		return retval;

	}
	// $ANTLR end "selectStatement"

	partial void EnterRule_updateStatement();
	partial void LeaveRule_updateStatement();
	// $ANTLR start "updateStatement"
	// HqlSqlWalker.g:52:1: updateStatement : ^(u= UPDATE (v= VERSIONED )? f= fromClause s= setClause (w= whereClause )? ) -> ^( $u $f $s ( $w)? ) ;
	[GrammarRule("updateStatement")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> updateStatement()
	{
		EnterRule_updateStatement();
		EnterRule("updateStatement", 3);
		TraceIn("updateStatement", 3);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode u = default(IASTNode);
		IASTNode v = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> f = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> s = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> w = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode u_tree = default(IASTNode);
		IASTNode v_tree = default(IASTNode);
		RewriteRuleNodeStream stream_UPDATE=new RewriteRuleNodeStream(adaptor,"token UPDATE");
		RewriteRuleNodeStream stream_VERSIONED=new RewriteRuleNodeStream(adaptor,"token VERSIONED");
		RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
		RewriteRuleSubtreeStream stream_setClause=new RewriteRuleSubtreeStream(adaptor,"rule setClause");
		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		try { DebugEnterRule(GrammarFileName, "updateStatement");
		DebugLocation(52, 1);
		try
		{
			// HqlSqlWalker.g:59:2: ( ^(u= UPDATE (v= VERSIONED )? f= fromClause s= setClause (w= whereClause )? ) -> ^( $u $f $s ( $w)? ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:59:4: ^(u= UPDATE (v= VERSIONED )? f= fromClause s= setClause (w= whereClause )? )
			{
			DebugLocation(59, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(59, 8);

			_last = (IASTNode)input.LT(1);
			u=(IASTNode)Match(input,UPDATE,Follow._UPDATE_in_updateStatement217); 
			 
			stream_UPDATE.Add(u);


			DebugLocation(59, 16);
			 BeforeStatement( "update", UPDATE ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(59, 57);
			// HqlSqlWalker.g:59:57: (v= VERSIONED )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if ((LA2_1==VERSIONED))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:59:58: v= VERSIONED
				{
				DebugLocation(59, 59);

				_last = (IASTNode)input.LT(1);
				v=(IASTNode)Match(input,VERSIONED,Follow._VERSIONED_in_updateStatement224); 
				 
				stream_VERSIONED.Add(v);


				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(59, 73);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._fromClause_in_updateStatement230);
			f=fromClause();
			PopFollow();

			stream_fromClause.Add(f.Tree);
			DebugLocation(59, 86);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._setClause_in_updateStatement234);
			s=setClause();
			PopFollow();

			stream_setClause.Add(s.Tree);
			DebugLocation(59, 97);
			// HqlSqlWalker.g:59:97: (w= whereClause )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_1 = input.LA(1);

			if ((LA3_1==WHERE))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:59:98: w= whereClause
				{
				DebugLocation(59, 99);
				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._whereClause_in_updateStatement239);
				w=whereClause();
				PopFollow();

				stream_whereClause.Add(w.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}



			{
			// AST REWRITE
			// elements: u, f, s, w
			// token labels: u
			// rule labels: f, s, w, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleNodeStream stream_u=new RewriteRuleNodeStream(adaptor,"token u",u);
			RewriteRuleSubtreeStream stream_f=new RewriteRuleSubtreeStream(adaptor,"rule f",f!=null?f.Tree:null);
			RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.Tree:null);
			RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 60:3: -> ^( $u $f $s ( $w)? )
			{
				DebugLocation(60, 6);
				// HqlSqlWalker.g:60:6: ^( $u $f $s ( $w)? )
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(60, 9);
				root_1 = (IASTNode)adaptor.BecomeRoot(stream_u.NextNode(), root_1);

				DebugLocation(60, 12);
				adaptor.AddChild(root_1, stream_f.NextTree());
				DebugLocation(60, 15);
				adaptor.AddChild(root_1, stream_s.NextTree());
				DebugLocation(60, 18);
				// HqlSqlWalker.g:60:18: ( $w)?
				if (stream_w.HasNext)
				{
					DebugLocation(60, 18);
					adaptor.AddChild(root_1, stream_w.NextTree());

				}
				stream_w.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					BeforeStatementCompletion( "update" );
					PrepareVersioned( retval.Tree, v );
					PostProcessUpdate( retval.Tree );
					AfterStatementCompletion( "update" );
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("updateStatement", 3);
			LeaveRule("updateStatement", 3);
			LeaveRule_updateStatement();
		}
		DebugLocation(61, 1);
		} finally { DebugExitRule(GrammarFileName, "updateStatement"); }
		return retval;

	}
	// $ANTLR end "updateStatement"

	partial void EnterRule_deleteStatement();
	partial void LeaveRule_deleteStatement();
	// $ANTLR start "deleteStatement"
	// HqlSqlWalker.g:63:1: deleteStatement : ^( DELETE fromClause ( whereClause )? ) ;
	[GrammarRule("deleteStatement")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> deleteStatement()
	{
		EnterRule_deleteStatement();
		EnterRule("deleteStatement", 4);
		TraceIn("deleteStatement", 4);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode DELETE6 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> fromClause7 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> whereClause8 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode DELETE6_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "deleteStatement");
		DebugLocation(63, 1);
		try
		{
			// HqlSqlWalker.g:69:2: ( ^( DELETE fromClause ( whereClause )? ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:69:4: ^( DELETE fromClause ( whereClause )? )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(69, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(69, 7);

			_last = (IASTNode)input.LT(1);
			DELETE6=(IASTNode)Match(input,DELETE,Follow._DELETE_in_deleteStatement282); 
			DELETE6_tree = (IASTNode)adaptor.DupNode(DELETE6);


			root_1 = (IASTNode)adaptor.BecomeRoot(DELETE6_tree, root_1);


			DebugLocation(69, 14);
			 BeforeStatement( "delete", DELETE ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(69, 55);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._fromClause_in_deleteStatement286);
			fromClause7=fromClause();
			PopFollow();

			adaptor.AddChild(root_1, fromClause7.Tree);

			DebugLocation(69, 66);
			// HqlSqlWalker.g:69:66: ( whereClause )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==WHERE))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:69:67: whereClause
				{
				DebugLocation(69, 67);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._whereClause_in_deleteStatement289);
				whereClause8=whereClause();
				PopFollow();

				adaptor.AddChild(root_1, whereClause8.Tree);


				}
				break;

			}
			} finally { DebugExitSubRule(4); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					BeforeStatementCompletion( "delete" );
					PostProcessDelete( retval.Tree );
					AfterStatementCompletion( "delete" );
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("deleteStatement", 4);
			LeaveRule("deleteStatement", 4);
			LeaveRule_deleteStatement();
		}
		DebugLocation(70, 1);
		} finally { DebugExitRule(GrammarFileName, "deleteStatement"); }
		return retval;

	}
	// $ANTLR end "deleteStatement"

	partial void EnterRule_insertStatement();
	partial void LeaveRule_insertStatement();
	// $ANTLR start "insertStatement"
	// HqlSqlWalker.g:72:1: insertStatement : ^( INSERT intoClause query ) ;
	[GrammarRule("insertStatement")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> insertStatement()
	{
		EnterRule_insertStatement();
		EnterRule("insertStatement", 5);
		TraceIn("insertStatement", 5);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode INSERT9 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> intoClause10 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> query11 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode INSERT9_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "insertStatement");
		DebugLocation(72, 1);
		try
		{
			// HqlSqlWalker.g:81:2: ( ^( INSERT intoClause query ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:81:4: ^( INSERT intoClause query )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(81, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(81, 7);

			_last = (IASTNode)input.LT(1);
			INSERT9=(IASTNode)Match(input,INSERT,Follow._INSERT_in_insertStatement319); 
			INSERT9_tree = (IASTNode)adaptor.DupNode(INSERT9);


			root_1 = (IASTNode)adaptor.BecomeRoot(INSERT9_tree, root_1);


			DebugLocation(81, 14);
			 BeforeStatement( "insert", INSERT ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(81, 55);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._intoClause_in_insertStatement323);
			intoClause10=intoClause();
			PopFollow();

			adaptor.AddChild(root_1, intoClause10.Tree);

			DebugLocation(81, 66);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._query_in_insertStatement325);
			query11=query();
			PopFollow();

			adaptor.AddChild(root_1, query11.Tree);


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					BeforeStatementCompletion( "insert" );
					PostProcessInsert( retval.Tree );
					AfterStatementCompletion( "insert" );
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("insertStatement", 5);
			LeaveRule("insertStatement", 5);
			LeaveRule_insertStatement();
		}
		DebugLocation(82, 1);
		} finally { DebugExitRule(GrammarFileName, "insertStatement"); }
		return retval;

	}
	// $ANTLR end "insertStatement"

	partial void EnterRule_intoClause();
	partial void LeaveRule_intoClause();
	// $ANTLR start "intoClause"
	// HqlSqlWalker.g:84:1: intoClause : ^( INTO (p= path ) ps= insertablePropertySpec ) ;
	[GrammarRule("intoClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> intoClause()
	{
		EnterRule_intoClause();
		EnterRule("intoClause", 6);
		TraceIn("intoClause", 6);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode INTO12 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> p = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> ps = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode INTO12_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "intoClause");
		DebugLocation(84, 1);
		try
		{
			// HqlSqlWalker.g:88:2: ( ^( INTO (p= path ) ps= insertablePropertySpec ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:88:4: ^( INTO (p= path ) ps= insertablePropertySpec )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(88, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(88, 7);

			_last = (IASTNode)input.LT(1);
			INTO12=(IASTNode)Match(input,INTO,Follow._INTO_in_intoClause349); 
			INTO12_tree = (IASTNode)adaptor.DupNode(INTO12);


			root_1 = (IASTNode)adaptor.BecomeRoot(INTO12_tree, root_1);


			DebugLocation(88, 12);
			 HandleClauseStart( INTO ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(88, 43);
			// HqlSqlWalker.g:88:43: (p= path )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:88:44: p= path
			{
			DebugLocation(88, 45);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._path_in_intoClause356);
			p=path();
			PopFollow();

			adaptor.AddChild(root_1, p.Tree);


			}

			DebugLocation(88, 54);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._insertablePropertySpec_in_intoClause361);
			ps=insertablePropertySpec();
			PopFollow();

			adaptor.AddChild(root_1, ps.Tree);


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					retval.Tree =  CreateIntoClause((p!=null?((HqlSqlWalker.path_return)p).p:default(String)), (ps!=null?((IASTNode)ps.Tree):default(IASTNode)));
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("intoClause", 6);
			LeaveRule("intoClause", 6);
			LeaveRule_intoClause();
			HandleClauseEnd( INTO );
		}
		DebugLocation(89, 1);
		} finally { DebugExitRule(GrammarFileName, "intoClause"); }
		return retval;

	}
	// $ANTLR end "intoClause"

	partial void EnterRule_insertablePropertySpec();
	partial void LeaveRule_insertablePropertySpec();
	// $ANTLR start "insertablePropertySpec"
	// HqlSqlWalker.g:92:1: insertablePropertySpec : ^( RANGE ( IDENT )+ ) ;
	[GrammarRule("insertablePropertySpec")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> insertablePropertySpec()
	{
		EnterRule_insertablePropertySpec();
		EnterRule("insertablePropertySpec", 7);
		TraceIn("insertablePropertySpec", 7);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode RANGE13 = default(IASTNode);
		IASTNode IDENT14 = default(IASTNode);

		IASTNode RANGE13_tree = default(IASTNode);
		IASTNode IDENT14_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "insertablePropertySpec");
		DebugLocation(92, 1);
		try
		{
			// HqlSqlWalker.g:93:2: ( ^( RANGE ( IDENT )+ ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:93:4: ^( RANGE ( IDENT )+ )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(93, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(93, 7);

			_last = (IASTNode)input.LT(1);
			RANGE13=(IASTNode)Match(input,RANGE,Follow._RANGE_in_insertablePropertySpec382); 
			RANGE13_tree = (IASTNode)adaptor.DupNode(RANGE13);


			root_1 = (IASTNode)adaptor.BecomeRoot(RANGE13_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(93, 13);
			// HqlSqlWalker.g:93:13: ( IDENT )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==IDENT))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:93:14: IDENT
					{
					DebugLocation(93, 14);

					_last = (IASTNode)input.LT(1);
					IDENT14=(IASTNode)Match(input,IDENT,Follow._IDENT_in_insertablePropertySpec385); 
					IDENT14_tree = (IASTNode)adaptor.DupNode(IDENT14);


					adaptor.AddChild(root_1, IDENT14_tree);


					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("insertablePropertySpec", 7);
			LeaveRule("insertablePropertySpec", 7);
			LeaveRule_insertablePropertySpec();
		}
		DebugLocation(94, 1);
		} finally { DebugExitRule(GrammarFileName, "insertablePropertySpec"); }
		return retval;

	}
	// $ANTLR end "insertablePropertySpec"

	partial void EnterRule_setClause();
	partial void LeaveRule_setClause();
	// $ANTLR start "setClause"
	// HqlSqlWalker.g:96:1: setClause : ^( SET ( assignment )* ) ;
	[GrammarRule("setClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> setClause()
	{
		EnterRule_setClause();
		EnterRule("setClause", 8);
		TraceIn("setClause", 8);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode SET15 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> assignment16 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode SET15_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "setClause");
		DebugLocation(96, 1);
		try
		{
			// HqlSqlWalker.g:97:2: ( ^( SET ( assignment )* ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:97:4: ^( SET ( assignment )* )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(97, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(97, 7);

			_last = (IASTNode)input.LT(1);
			SET15=(IASTNode)Match(input,SET,Follow._SET_in_setClause402); 
			SET15_tree = (IASTNode)adaptor.DupNode(SET15);


			root_1 = (IASTNode)adaptor.BecomeRoot(SET15_tree, root_1);


			DebugLocation(97, 11);
			 HandleClauseStart( SET ); 

			if (input.LA(1) == TokenTypes.Down) {
				Match(input, TokenTypes.Down, null); 
				DebugLocation(97, 41);
				// HqlSqlWalker.g:97:41: ( assignment )*
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_1 = input.LA(1);

					if ((LA6_1==EQ))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch ( alt6 )
					{
					case 1:
						DebugEnterAlt(1);
						// HqlSqlWalker.g:97:42: assignment
						{
						DebugLocation(97, 42);

						_last = (IASTNode)input.LT(1);
						PushFollow(Follow._assignment_in_setClause407);
						assignment16=assignment();
						PopFollow();

						adaptor.AddChild(root_1, assignment16.Tree);


						}
						break;

					default:
						goto loop6;
					}
				}

				loop6:
					;

				} finally { DebugExitSubRule(6); }


				Match(input, TokenTypes.Up, null); 
			}
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("setClause", 8);
			LeaveRule("setClause", 8);
			LeaveRule_setClause();
			HandleClauseEnd( SET );
		}
		DebugLocation(98, 1);
		} finally { DebugExitRule(GrammarFileName, "setClause"); }
		return retval;

	}
	// $ANTLR end "setClause"

	partial void EnterRule_assignment();
	partial void LeaveRule_assignment();
	// $ANTLR start "assignment"
	// HqlSqlWalker.g:101:1: assignment : ^( EQ (p= propertyRef ) ( newValue ) ) ;
	[GrammarRule("assignment")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> assignment()
	{
		EnterRule_assignment();
		EnterRule("assignment", 9);
		TraceIn("assignment", 9);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode EQ17 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> p = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> newValue18 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode EQ17_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "assignment");
		DebugLocation(101, 1);
		try
		{
			// HqlSqlWalker.g:107:2: ( ^( EQ (p= propertyRef ) ( newValue ) ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:107:4: ^( EQ (p= propertyRef ) ( newValue ) )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(107, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(107, 7);

			_last = (IASTNode)input.LT(1);
			EQ17=(IASTNode)Match(input,EQ,Follow._EQ_in_assignment439); 
			EQ17_tree = (IASTNode)adaptor.DupNode(EQ17);


			root_1 = (IASTNode)adaptor.BecomeRoot(EQ17_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(107, 10);
			// HqlSqlWalker.g:107:10: (p= propertyRef )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:107:11: p= propertyRef
			{
			DebugLocation(107, 12);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._propertyRef_in_assignment444);
			p=propertyRef();
			PopFollow();

			adaptor.AddChild(root_1, p.Tree);


			}

			DebugLocation(107, 26);
			 Resolve((p!=null?((IASTNode)p.Tree):default(IASTNode))); 
			DebugLocation(107, 48);
			// HqlSqlWalker.g:107:48: ( newValue )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:107:49: newValue
			{
			DebugLocation(107, 49);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._newValue_in_assignment450);
			newValue18=newValue();
			PopFollow();

			adaptor.AddChild(root_1, newValue18.Tree);


			}


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					EvaluateAssignment( retval.Tree );
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assignment", 9);
			LeaveRule("assignment", 9);
			LeaveRule_assignment();
		}
		DebugLocation(108, 1);
		} finally { DebugExitRule(GrammarFileName, "assignment"); }
		return retval;

	}
	// $ANTLR end "assignment"

	partial void EnterRule_newValue();
	partial void LeaveRule_newValue();
	// $ANTLR start "newValue"
	// HqlSqlWalker.g:111:1: newValue : ( expr | query );
	[GrammarRule("newValue")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> newValue()
	{
		EnterRule_newValue();
		EnterRule("newValue", 10);
		TraceIn("newValue", 10);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> expr19 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> query20 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "newValue");
		DebugLocation(111, 1);
		try
		{
			// HqlSqlWalker.g:112:2: ( expr | query )
			int alt7=2;
			try { DebugEnterDecision(7, false);
			int LA7_1 = input.LA(1);

			if ((LA7_1==AGGREGATE||LA7_1==BAND||(LA7_1>=BNOT && LA7_1<=BOR)||(LA7_1>=BXOR && LA7_1<=CASE2)||LA7_1==COLON||LA7_1==COUNT||(LA7_1>=DIV && LA7_1<=DOT)||LA7_1==FALSE||LA7_1==IDENT||LA7_1==INDEX_OP||LA7_1==JAVA_CONSTANT||LA7_1==METHOD_CALL||LA7_1==MINUS||(LA7_1>=NULL && LA7_1<=NUM_LONG)||(LA7_1>=PARAM && LA7_1<=PLUS)||LA7_1==QUOTED_String||LA7_1==STAR||(LA7_1>=TRUE && LA7_1<=UNARY_MINUS)||LA7_1==VECTOR_EXPR||LA7_1==WEIRD_IDENT))
			{
				alt7 = 1;
			}
			else if ((LA7_1==QUERY||LA7_1==UNION))
			{
				alt7 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:112:4: expr
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(112, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._expr_in_newValue466);
				expr19=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr19.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:112:11: query
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(112, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._query_in_newValue470);
				query20=query();
				PopFollow();

				adaptor.AddChild(root_0, query20.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("newValue", 10);
			LeaveRule("newValue", 10);
			LeaveRule_newValue();
		}
		DebugLocation(113, 1);
		} finally { DebugExitRule(GrammarFileName, "newValue"); }
		return retval;

	}
	// $ANTLR end "newValue"

	partial void EnterRule_query();
	partial void LeaveRule_query();
	// $ANTLR start "query"
	// HqlSqlWalker.g:115:1: query : ( unionedQuery | ^( UNION unionedQuery query ) );
	[GrammarRule("query")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> query()
	{
		EnterRule_query();
		EnterRule("query", 11);
		TraceIn("query", 11);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode UNION22 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> unionedQuery21 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> unionedQuery23 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> query24 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode UNION22_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "query");
		DebugLocation(115, 1);
		try
		{
			// HqlSqlWalker.g:116:2: ( unionedQuery | ^( UNION unionedQuery query ) )
			int alt8=2;
			try { DebugEnterDecision(8, false);
			int LA8_1 = input.LA(1);

			if ((LA8_1==QUERY))
			{
				alt8 = 1;
			}
			else if ((LA8_1==UNION))
			{
				alt8 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:116:4: unionedQuery
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(116, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._unionedQuery_in_query481);
				unionedQuery21=unionedQuery();
				PopFollow();

				adaptor.AddChild(root_0, unionedQuery21.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:117:4: ^( UNION unionedQuery query )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(117, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(117, 6);

				_last = (IASTNode)input.LT(1);
				UNION22=(IASTNode)Match(input,UNION,Follow._UNION_in_query488); 
				UNION22_tree = (IASTNode)adaptor.DupNode(UNION22);


				root_1 = (IASTNode)adaptor.BecomeRoot(UNION22_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(117, 12);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._unionedQuery_in_query490);
				unionedQuery23=unionedQuery();
				PopFollow();

				adaptor.AddChild(root_1, unionedQuery23.Tree);

				DebugLocation(117, 25);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._query_in_query492);
				query24=query();
				PopFollow();

				adaptor.AddChild(root_1, query24.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("query", 11);
			LeaveRule("query", 11);
			LeaveRule_query();
		}
		DebugLocation(118, 1);
		} finally { DebugExitRule(GrammarFileName, "query"); }
		return retval;

	}
	// $ANTLR end "query"

	partial void EnterRule_unionedQuery();
	partial void LeaveRule_unionedQuery();
	// $ANTLR start "unionedQuery"
	// HqlSqlWalker.g:122:1: unionedQuery : ^( QUERY ^( SELECT_FROM f= fromClause (s= selectClause )? ) (w= whereClause )? (g= groupClause )? (h= havingClause )? (o= orderClause )? (sk= skipClause )? (tk= takeClause )? ) -> ^( SELECT ( $s)? $f ( $w)? ( $g)? ( $h)? ( $o)? ( $sk)? ( $tk)? ) ;
	[GrammarRule("unionedQuery")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> unionedQuery()
	{
		EnterRule_unionedQuery();
		EnterRule("unionedQuery", 12);
		TraceIn("unionedQuery", 12);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode QUERY25 = default(IASTNode);
		IASTNode SELECT_FROM26 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> f = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> s = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> w = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> g = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> h = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> o = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> sk = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> tk = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode QUERY25_tree = default(IASTNode);
		IASTNode SELECT_FROM26_tree = default(IASTNode);
		RewriteRuleNodeStream stream_QUERY=new RewriteRuleNodeStream(adaptor,"token QUERY");
		RewriteRuleNodeStream stream_SELECT_FROM=new RewriteRuleNodeStream(adaptor,"token SELECT_FROM");
		RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
		RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		RewriteRuleSubtreeStream stream_groupClause=new RewriteRuleSubtreeStream(adaptor,"rule groupClause");
		RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
		RewriteRuleSubtreeStream stream_orderClause=new RewriteRuleSubtreeStream(adaptor,"rule orderClause");
		RewriteRuleSubtreeStream stream_skipClause=new RewriteRuleSubtreeStream(adaptor,"rule skipClause");
		RewriteRuleSubtreeStream stream_takeClause=new RewriteRuleSubtreeStream(adaptor,"rule takeClause");
		try { DebugEnterRule(GrammarFileName, "unionedQuery");
		DebugLocation(122, 1);
		try
		{
			// HqlSqlWalker.g:129:2: ( ^( QUERY ^( SELECT_FROM f= fromClause (s= selectClause )? ) (w= whereClause )? (g= groupClause )? (h= havingClause )? (o= orderClause )? (sk= skipClause )? (tk= takeClause )? ) -> ^( SELECT ( $s)? $f ( $w)? ( $g)? ( $h)? ( $o)? ( $sk)? ( $tk)? ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:129:4: ^( QUERY ^( SELECT_FROM f= fromClause (s= selectClause )? ) (w= whereClause )? (g= groupClause )? (h= havingClause )? (o= orderClause )? (sk= skipClause )? (tk= takeClause )? )
			{
			DebugLocation(129, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(129, 7);

			_last = (IASTNode)input.LT(1);
			QUERY25=(IASTNode)Match(input,QUERY,Follow._QUERY_in_unionedQuery515); 
			 
			stream_QUERY.Add(QUERY25);


			DebugLocation(129, 13);
			 BeforeStatement( "select", SELECT ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(131, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_2 = _last;
			IASTNode _first_2 = default(IASTNode);
			IASTNode root_2 = (IASTNode)adaptor.Nil();
			DebugLocation(131, 6);

			_last = (IASTNode)input.LT(1);
			SELECT_FROM26=(IASTNode)Match(input,SELECT_FROM,Follow._SELECT_FROM_in_unionedQuery527); 
			 
			stream_SELECT_FROM.Add(SELECT_FROM26);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(132, 6);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._fromClause_in_unionedQuery535);
			f=fromClause();
			PopFollow();

			stream_fromClause.Add(f.Tree);
			DebugLocation(133, 5);
			// HqlSqlWalker.g:133:5: (s= selectClause )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_1 = input.LA(1);

			if ((LA9_1==SELECT))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:133:6: s= selectClause
				{
				DebugLocation(133, 7);
				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._selectClause_in_unionedQuery544);
				s=selectClause();
				PopFollow();

				stream_selectClause.Add(s.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(9); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_1, root_2);
			_last = _save_last_2;
			}

			DebugLocation(135, 4);
			// HqlSqlWalker.g:135:4: (w= whereClause )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1==WHERE))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:135:5: w= whereClause
				{
				DebugLocation(135, 6);
				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._whereClause_in_unionedQuery559);
				w=whereClause();
				PopFollow();

				stream_whereClause.Add(w.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(136, 4);
			// HqlSqlWalker.g:136:4: (g= groupClause )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_1 = input.LA(1);

			if ((LA11_1==GROUP))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:136:5: g= groupClause
				{
				DebugLocation(136, 6);
				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._groupClause_in_unionedQuery569);
				g=groupClause();
				PopFollow();

				stream_groupClause.Add(g.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(137, 4);
			// HqlSqlWalker.g:137:4: (h= havingClause )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==HAVING))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:137:5: h= havingClause
				{
				DebugLocation(137, 6);
				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._havingClause_in_unionedQuery579);
				h=havingClause();
				PopFollow();

				stream_havingClause.Add(h.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(138, 4);
			// HqlSqlWalker.g:138:4: (o= orderClause )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==ORDER))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:138:5: o= orderClause
				{
				DebugLocation(138, 6);
				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._orderClause_in_unionedQuery589);
				o=orderClause();
				PopFollow();

				stream_orderClause.Add(o.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(139, 4);
			// HqlSqlWalker.g:139:4: (sk= skipClause )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_1 = input.LA(1);

			if ((LA14_1==SKIP))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:139:5: sk= skipClause
				{
				DebugLocation(139, 7);
				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._skipClause_in_unionedQuery599);
				sk=skipClause();
				PopFollow();

				stream_skipClause.Add(sk.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(140, 4);
			// HqlSqlWalker.g:140:4: (tk= takeClause )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==TAKE))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:140:5: tk= takeClause
				{
				DebugLocation(140, 7);
				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._takeClause_in_unionedQuery609);
				tk=takeClause();
				PopFollow();

				stream_takeClause.Add(tk.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}



			{
			// AST REWRITE
			// elements: s, f, w, g, h, o, sk, tk
			// token labels: 
			// rule labels: s, f, w, g, h, o, sk, tk, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.Tree:null);
			RewriteRuleSubtreeStream stream_f=new RewriteRuleSubtreeStream(adaptor,"rule f",f!=null?f.Tree:null);
			RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.Tree:null);
			RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.Tree:null);
			RewriteRuleSubtreeStream stream_h=new RewriteRuleSubtreeStream(adaptor,"rule h",h!=null?h.Tree:null);
			RewriteRuleSubtreeStream stream_o=new RewriteRuleSubtreeStream(adaptor,"rule o",o!=null?o.Tree:null);
			RewriteRuleSubtreeStream stream_sk=new RewriteRuleSubtreeStream(adaptor,"rule sk",sk!=null?sk.Tree:null);
			RewriteRuleSubtreeStream stream_tk=new RewriteRuleSubtreeStream(adaptor,"rule tk",tk!=null?tk.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 142:2: -> ^( SELECT ( $s)? $f ( $w)? ( $g)? ( $h)? ( $o)? ( $sk)? ( $tk)? )
			{
				DebugLocation(142, 5);
				// HqlSqlWalker.g:142:5: ^( SELECT ( $s)? $f ( $w)? ( $g)? ( $h)? ( $o)? ( $sk)? ( $tk)? )
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(142, 7);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(SELECT, "SELECT"), root_1);

				DebugLocation(142, 15);
				// HqlSqlWalker.g:142:15: ( $s)?
				if (stream_s.HasNext)
				{
					DebugLocation(142, 15);
					adaptor.AddChild(root_1, stream_s.NextTree());

				}
				stream_s.Reset();
				DebugLocation(142, 19);
				adaptor.AddChild(root_1, stream_f.NextTree());
				DebugLocation(142, 22);
				// HqlSqlWalker.g:142:22: ( $w)?
				if (stream_w.HasNext)
				{
					DebugLocation(142, 22);
					adaptor.AddChild(root_1, stream_w.NextTree());

				}
				stream_w.Reset();
				DebugLocation(142, 26);
				// HqlSqlWalker.g:142:26: ( $g)?
				if (stream_g.HasNext)
				{
					DebugLocation(142, 26);
					adaptor.AddChild(root_1, stream_g.NextTree());

				}
				stream_g.Reset();
				DebugLocation(142, 30);
				// HqlSqlWalker.g:142:30: ( $h)?
				if (stream_h.HasNext)
				{
					DebugLocation(142, 30);
					adaptor.AddChild(root_1, stream_h.NextTree());

				}
				stream_h.Reset();
				DebugLocation(142, 34);
				// HqlSqlWalker.g:142:34: ( $o)?
				if (stream_o.HasNext)
				{
					DebugLocation(142, 34);
					adaptor.AddChild(root_1, stream_o.NextTree());

				}
				stream_o.Reset();
				DebugLocation(142, 38);
				// HqlSqlWalker.g:142:38: ( $sk)?
				if (stream_sk.HasNext)
				{
					DebugLocation(142, 38);
					adaptor.AddChild(root_1, stream_sk.NextTree());

				}
				stream_sk.Reset();
				DebugLocation(142, 43);
				// HqlSqlWalker.g:142:43: ( $tk)?
				if (stream_tk.HasNext)
				{
					DebugLocation(142, 43);
					adaptor.AddChild(root_1, stream_tk.NextTree());

				}
				stream_tk.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					// Antlr note: #x_in refers to the input AST, #x refers to the output AST
					BeforeStatementCompletion( "select" );
					ProcessQuery( (s!=null?((IASTNode)s.Tree):default(IASTNode)), retval.Tree );
					AfterStatementCompletion( "select" );
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unionedQuery", 12);
			LeaveRule("unionedQuery", 12);
			LeaveRule_unionedQuery();
		}
		DebugLocation(143, 1);
		} finally { DebugExitRule(GrammarFileName, "unionedQuery"); }
		return retval;

	}
	// $ANTLR end "unionedQuery"

	partial void EnterRule_orderClause();
	partial void LeaveRule_orderClause();
	// $ANTLR start "orderClause"
	// HqlSqlWalker.g:145:1: orderClause : ^( ORDER ( orderExprs | query ( ASCENDING | DESCENDING )? ) ) ;
	[GrammarRule("orderClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> orderClause()
	{
		EnterRule_orderClause();
		EnterRule("orderClause", 13);
		TraceIn("orderClause", 13);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode ORDER27 = default(IASTNode);
		IASTNode set30 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> orderExprs28 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> query29 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode ORDER27_tree = default(IASTNode);
		IASTNode set30_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "orderClause");
		DebugLocation(145, 1);
		try
		{
			// HqlSqlWalker.g:146:2: ( ^( ORDER ( orderExprs | query ( ASCENDING | DESCENDING )? ) ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:146:4: ^( ORDER ( orderExprs | query ( ASCENDING | DESCENDING )? ) )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(146, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(146, 6);

			_last = (IASTNode)input.LT(1);
			ORDER27=(IASTNode)Match(input,ORDER,Follow._ORDER_in_orderClause666); 
			ORDER27_tree = (IASTNode)adaptor.DupNode(ORDER27);


			root_1 = (IASTNode)adaptor.BecomeRoot(ORDER27_tree, root_1);


			DebugLocation(146, 12);
			 HandleClauseStart( ORDER ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(146, 44);
			// HqlSqlWalker.g:146:44: ( orderExprs | query ( ASCENDING | DESCENDING )? )
			int alt17=2;
			try { DebugEnterSubRule(17);
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==AGGREGATE||LA17_1==BAND||(LA17_1>=BNOT && LA17_1<=BOR)||(LA17_1>=BXOR && LA17_1<=CASE2)||LA17_1==COLON||LA17_1==COUNT||(LA17_1>=DIV && LA17_1<=DOT)||LA17_1==FALSE||LA17_1==IDENT||LA17_1==INDEX_OP||LA17_1==JAVA_CONSTANT||LA17_1==METHOD_CALL||LA17_1==MINUS||(LA17_1>=NULL && LA17_1<=NUM_LONG)||(LA17_1>=PARAM && LA17_1<=PLUS)||LA17_1==QUOTED_String||LA17_1==STAR||(LA17_1>=TRUE && LA17_1<=UNARY_MINUS)||LA17_1==VECTOR_EXPR||LA17_1==WEIRD_IDENT))
			{
				alt17 = 1;
			}
			else if ((LA17_1==QUERY||LA17_1==UNION))
			{
				alt17 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:146:45: orderExprs
				{
				DebugLocation(146, 45);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._orderExprs_in_orderClause671);
				orderExprs28=orderExprs();
				PopFollow();

				adaptor.AddChild(root_1, orderExprs28.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:146:58: query ( ASCENDING | DESCENDING )?
				{
				DebugLocation(146, 58);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._query_in_orderClause675);
				query29=query();
				PopFollow();

				adaptor.AddChild(root_1, query29.Tree);

				DebugLocation(146, 64);
				// HqlSqlWalker.g:146:64: ( ASCENDING | DESCENDING )?
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1==ASCENDING||LA16_1==DESCENDING))
				{
					alt16 = 1;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:
					{
					DebugLocation(146, 64);

					_last = (IASTNode)input.LT(1);
					set30=(IASTNode)input.LT(1);
					if (input.LA(1)==ASCENDING||input.LA(1)==DESCENDING)
					{
						input.Consume();
						set30_tree = (IASTNode)adaptor.DupNode(set30);


						adaptor.AddChild(root_1, set30_tree);

						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}



					}
					break;

				}
				} finally { DebugExitSubRule(16); }


				}
				break;

			}
			} finally { DebugExitSubRule(17); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("orderClause", 13);
			LeaveRule("orderClause", 13);
			LeaveRule_orderClause();
			HandleClauseEnd( ORDER );
		}
		DebugLocation(147, 1);
		} finally { DebugExitRule(GrammarFileName, "orderClause"); }
		return retval;

	}
	// $ANTLR end "orderClause"

	partial void EnterRule_orderExprs();
	partial void LeaveRule_orderExprs();
	// $ANTLR start "orderExprs"
	// HqlSqlWalker.g:150:1: orderExprs : expr ( ASCENDING | DESCENDING )? ( orderExprs )? ;
	[GrammarRule("orderExprs")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> orderExprs()
	{
		EnterRule_orderExprs();
		EnterRule("orderExprs", 14);
		TraceIn("orderExprs", 14);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode set32 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr31 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> orderExprs33 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode set32_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "orderExprs");
		DebugLocation(150, 1);
		try
		{
			// HqlSqlWalker.g:151:2: ( expr ( ASCENDING | DESCENDING )? ( orderExprs )? )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:151:4: expr ( ASCENDING | DESCENDING )? ( orderExprs )?
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(151, 4);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._expr_in_orderExprs703);
			expr31=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr31.Tree);

			DebugLocation(151, 9);
			// HqlSqlWalker.g:151:9: ( ASCENDING | DESCENDING )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_1 = input.LA(1);

			if ((LA18_1==ASCENDING||LA18_1==DESCENDING))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:
				{
				DebugLocation(151, 9);

				_last = (IASTNode)input.LT(1);
				set32=(IASTNode)input.LT(1);
				if (input.LA(1)==ASCENDING||input.LA(1)==DESCENDING)
				{
					input.Consume();
					set32_tree = (IASTNode)adaptor.DupNode(set32);


					adaptor.AddChild(root_0, set32_tree);

					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}



				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(151, 37);
			// HqlSqlWalker.g:151:37: ( orderExprs )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_1 = input.LA(1);

			if ((LA19_1==AGGREGATE||LA19_1==BAND||(LA19_1>=BNOT && LA19_1<=BOR)||(LA19_1>=BXOR && LA19_1<=CASE2)||LA19_1==COLON||LA19_1==COUNT||(LA19_1>=DIV && LA19_1<=DOT)||LA19_1==FALSE||LA19_1==IDENT||LA19_1==INDEX_OP||LA19_1==JAVA_CONSTANT||LA19_1==METHOD_CALL||LA19_1==MINUS||(LA19_1>=NULL && LA19_1<=NUM_LONG)||(LA19_1>=PARAM && LA19_1<=PLUS)||LA19_1==QUOTED_String||LA19_1==STAR||(LA19_1>=TRUE && LA19_1<=UNARY_MINUS)||LA19_1==VECTOR_EXPR||LA19_1==WEIRD_IDENT))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:151:38: orderExprs
				{
				DebugLocation(151, 38);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._orderExprs_in_orderExprs717);
				orderExprs33=orderExprs();
				PopFollow();

				adaptor.AddChild(root_0, orderExprs33.Tree);


				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("orderExprs", 14);
			LeaveRule("orderExprs", 14);
			LeaveRule_orderExprs();
		}
		DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "orderExprs"); }
		return retval;

	}
	// $ANTLR end "orderExprs"

	partial void EnterRule_skipClause();
	partial void LeaveRule_skipClause();
	// $ANTLR start "skipClause"
	// HqlSqlWalker.g:154:1: skipClause : ^( SKIP ( NUM_INT | parameter ) ) ;
	[GrammarRule("skipClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> skipClause()
	{
		EnterRule_skipClause();
		EnterRule("skipClause", 15);
		TraceIn("skipClause", 15);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode SKIP34 = default(IASTNode);
		IASTNode NUM_INT35 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> parameter36 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode SKIP34_tree = default(IASTNode);
		IASTNode NUM_INT35_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "skipClause");
		DebugLocation(154, 1);
		try
		{
			// HqlSqlWalker.g:155:2: ( ^( SKIP ( NUM_INT | parameter ) ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:155:4: ^( SKIP ( NUM_INT | parameter ) )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(155, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(155, 6);

			_last = (IASTNode)input.LT(1);
			SKIP34=(IASTNode)Match(input,SKIP,Follow._SKIP_in_skipClause731); 
			SKIP34_tree = (IASTNode)adaptor.DupNode(SKIP34);


			root_1 = (IASTNode)adaptor.BecomeRoot(SKIP34_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(155, 11);
			// HqlSqlWalker.g:155:11: ( NUM_INT | parameter )
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_1 = input.LA(1);

			if ((LA20_1==NUM_INT))
			{
				alt20 = 1;
			}
			else if ((LA20_1==COLON||LA20_1==PARAM))
			{
				alt20 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:155:12: NUM_INT
				{
				DebugLocation(155, 12);

				_last = (IASTNode)input.LT(1);
				NUM_INT35=(IASTNode)Match(input,NUM_INT,Follow._NUM_INT_in_skipClause734); 
				NUM_INT35_tree = (IASTNode)adaptor.DupNode(NUM_INT35);


				adaptor.AddChild(root_1, NUM_INT35_tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:155:22: parameter
				{
				DebugLocation(155, 22);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._parameter_in_skipClause738);
				parameter36=parameter();
				PopFollow();

				adaptor.AddChild(root_1, parameter36.Tree);


				}
				break;

			}
			} finally { DebugExitSubRule(20); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("skipClause", 15);
			LeaveRule("skipClause", 15);
			LeaveRule_skipClause();
		}
		DebugLocation(156, 1);
		} finally { DebugExitRule(GrammarFileName, "skipClause"); }
		return retval;

	}
	// $ANTLR end "skipClause"

	partial void EnterRule_takeClause();
	partial void LeaveRule_takeClause();
	// $ANTLR start "takeClause"
	// HqlSqlWalker.g:158:1: takeClause : ^( TAKE ( NUM_INT | parameter ) ) ;
	[GrammarRule("takeClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> takeClause()
	{
		EnterRule_takeClause();
		EnterRule("takeClause", 16);
		TraceIn("takeClause", 16);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode TAKE37 = default(IASTNode);
		IASTNode NUM_INT38 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> parameter39 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode TAKE37_tree = default(IASTNode);
		IASTNode NUM_INT38_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "takeClause");
		DebugLocation(158, 1);
		try
		{
			// HqlSqlWalker.g:159:2: ( ^( TAKE ( NUM_INT | parameter ) ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:159:4: ^( TAKE ( NUM_INT | parameter ) )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(159, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(159, 6);

			_last = (IASTNode)input.LT(1);
			TAKE37=(IASTNode)Match(input,TAKE,Follow._TAKE_in_takeClause752); 
			TAKE37_tree = (IASTNode)adaptor.DupNode(TAKE37);


			root_1 = (IASTNode)adaptor.BecomeRoot(TAKE37_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(159, 11);
			// HqlSqlWalker.g:159:11: ( NUM_INT | parameter )
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_1 = input.LA(1);

			if ((LA21_1==NUM_INT))
			{
				alt21 = 1;
			}
			else if ((LA21_1==COLON||LA21_1==PARAM))
			{
				alt21 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:159:12: NUM_INT
				{
				DebugLocation(159, 12);

				_last = (IASTNode)input.LT(1);
				NUM_INT38=(IASTNode)Match(input,NUM_INT,Follow._NUM_INT_in_takeClause755); 
				NUM_INT38_tree = (IASTNode)adaptor.DupNode(NUM_INT38);


				adaptor.AddChild(root_1, NUM_INT38_tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:159:22: parameter
				{
				DebugLocation(159, 22);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._parameter_in_takeClause759);
				parameter39=parameter();
				PopFollow();

				adaptor.AddChild(root_1, parameter39.Tree);


				}
				break;

			}
			} finally { DebugExitSubRule(21); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("takeClause", 16);
			LeaveRule("takeClause", 16);
			LeaveRule_takeClause();
		}
		DebugLocation(160, 1);
		} finally { DebugExitRule(GrammarFileName, "takeClause"); }
		return retval;

	}
	// $ANTLR end "takeClause"

	partial void EnterRule_groupClause();
	partial void LeaveRule_groupClause();
	// $ANTLR start "groupClause"
	// HqlSqlWalker.g:162:1: groupClause : ^( GROUP ( expr )+ ) ;
	[GrammarRule("groupClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> groupClause()
	{
		EnterRule_groupClause();
		EnterRule("groupClause", 17);
		TraceIn("groupClause", 17);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode GROUP40 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr41 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode GROUP40_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "groupClause");
		DebugLocation(162, 1);
		try
		{
			// HqlSqlWalker.g:163:2: ( ^( GROUP ( expr )+ ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:163:4: ^( GROUP ( expr )+ )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(163, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(163, 6);

			_last = (IASTNode)input.LT(1);
			GROUP40=(IASTNode)Match(input,GROUP,Follow._GROUP_in_groupClause773); 
			GROUP40_tree = (IASTNode)adaptor.DupNode(GROUP40);


			root_1 = (IASTNode)adaptor.BecomeRoot(GROUP40_tree, root_1);


			DebugLocation(163, 12);
			 HandleClauseStart( GROUP ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(163, 44);
			// HqlSqlWalker.g:163:44: ( expr )+
			int cnt22=0;
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_1 = input.LA(1);

				if ((LA22_1==AGGREGATE||LA22_1==BAND||(LA22_1>=BNOT && LA22_1<=BOR)||(LA22_1>=BXOR && LA22_1<=CASE2)||LA22_1==COLON||LA22_1==COUNT||(LA22_1>=DIV && LA22_1<=DOT)||LA22_1==FALSE||LA22_1==IDENT||LA22_1==INDEX_OP||LA22_1==JAVA_CONSTANT||LA22_1==METHOD_CALL||LA22_1==MINUS||(LA22_1>=NULL && LA22_1<=NUM_LONG)||(LA22_1>=PARAM && LA22_1<=PLUS)||LA22_1==QUOTED_String||LA22_1==STAR||(LA22_1>=TRUE && LA22_1<=UNARY_MINUS)||LA22_1==VECTOR_EXPR||LA22_1==WEIRD_IDENT))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:163:45: expr
					{
					DebugLocation(163, 45);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._expr_in_groupClause778);
					expr41=expr();
					PopFollow();

					adaptor.AddChild(root_1, expr41.Tree);


					}
					break;

				default:
					if (cnt22 >= 1)
						goto loop22;

					EarlyExitException eee22 = new EarlyExitException( 22, input );
					DebugRecognitionException(eee22);
					throw eee22;
				}
				cnt22++;
			}
			loop22:
				;

			} finally { DebugExitSubRule(22); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("groupClause", 17);
			LeaveRule("groupClause", 17);
			LeaveRule_groupClause();
			HandleClauseEnd( GROUP );
		}
		DebugLocation(164, 1);
		} finally { DebugExitRule(GrammarFileName, "groupClause"); }
		return retval;

	}
	// $ANTLR end "groupClause"

	partial void EnterRule_havingClause();
	partial void LeaveRule_havingClause();
	// $ANTLR start "havingClause"
	// HqlSqlWalker.g:167:1: havingClause : ^( HAVING logicalExpr ) ;
	[GrammarRule("havingClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> havingClause()
	{
		EnterRule_havingClause();
		EnterRule("havingClause", 18);
		TraceIn("havingClause", 18);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode HAVING42 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> logicalExpr43 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode HAVING42_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "havingClause");
		DebugLocation(167, 1);
		try
		{
			// HqlSqlWalker.g:168:2: ( ^( HAVING logicalExpr ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:168:4: ^( HAVING logicalExpr )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(168, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(168, 6);

			_last = (IASTNode)input.LT(1);
			HAVING42=(IASTNode)Match(input,HAVING,Follow._HAVING_in_havingClause799); 
			HAVING42_tree = (IASTNode)adaptor.DupNode(HAVING42);


			root_1 = (IASTNode)adaptor.BecomeRoot(HAVING42_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(168, 13);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._logicalExpr_in_havingClause801);
			logicalExpr43=logicalExpr();
			PopFollow();

			adaptor.AddChild(root_1, logicalExpr43.Tree);


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("havingClause", 18);
			LeaveRule("havingClause", 18);
			LeaveRule_havingClause();
		}
		DebugLocation(169, 1);
		} finally { DebugExitRule(GrammarFileName, "havingClause"); }
		return retval;

	}
	// $ANTLR end "havingClause"

	partial void EnterRule_selectClause();
	partial void LeaveRule_selectClause();
	// $ANTLR start "selectClause"
	// HqlSqlWalker.g:171:1: selectClause : ^( SELECT (d= DISTINCT )? x= selectExprList ) -> ^( SELECT_CLAUSE[\"{select clause}\"] ( $d)? $x) ;
	[GrammarRule("selectClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> selectClause()
	{
		EnterRule_selectClause();
		EnterRule("selectClause", 19);
		TraceIn("selectClause", 19);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode d = default(IASTNode);
		IASTNode SELECT44 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> x = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode d_tree = default(IASTNode);
		IASTNode SELECT44_tree = default(IASTNode);
		RewriteRuleNodeStream stream_SELECT=new RewriteRuleNodeStream(adaptor,"token SELECT");
		RewriteRuleNodeStream stream_DISTINCT=new RewriteRuleNodeStream(adaptor,"token DISTINCT");
		RewriteRuleSubtreeStream stream_selectExprList=new RewriteRuleSubtreeStream(adaptor,"rule selectExprList");
		try { DebugEnterRule(GrammarFileName, "selectClause");
		DebugLocation(171, 1);
		try
		{
			// HqlSqlWalker.g:172:2: ( ^( SELECT (d= DISTINCT )? x= selectExprList ) -> ^( SELECT_CLAUSE[\"{select clause}\"] ( $d)? $x) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:172:4: ^( SELECT (d= DISTINCT )? x= selectExprList )
			{
			DebugLocation(172, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(172, 6);

			_last = (IASTNode)input.LT(1);
			SELECT44=(IASTNode)Match(input,SELECT,Follow._SELECT_in_selectClause815); 
			 
			stream_SELECT.Add(SELECT44);


			DebugLocation(172, 13);
			 HandleClauseStart( SELECT ); BeforeSelectClause(); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(172, 68);
			// HqlSqlWalker.g:172:68: (d= DISTINCT )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==DISTINCT))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:172:69: d= DISTINCT
				{
				DebugLocation(172, 70);

				_last = (IASTNode)input.LT(1);
				d=(IASTNode)Match(input,DISTINCT,Follow._DISTINCT_in_selectClause822); 
				 
				stream_DISTINCT.Add(d);


				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(172, 83);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._selectExprList_in_selectClause828);
			x=selectExprList();
			PopFollow();

			stream_selectExprList.Add(x.Tree);

			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}



			{
			// AST REWRITE
			// elements: d, x
			// token labels: d
			// rule labels: x, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleNodeStream stream_d=new RewriteRuleNodeStream(adaptor,"token d",d);
			RewriteRuleSubtreeStream stream_x=new RewriteRuleSubtreeStream(adaptor,"rule x",x!=null?x.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 173:2: -> ^( SELECT_CLAUSE[\"{select clause}\"] ( $d)? $x)
			{
				DebugLocation(173, 5);
				// HqlSqlWalker.g:173:5: ^( SELECT_CLAUSE[\"{select clause}\"] ( $d)? $x)
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(173, 7);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(SELECT_CLAUSE, "{select clause}"), root_1);

				DebugLocation(173, 41);
				// HqlSqlWalker.g:173:41: ( $d)?
				if (stream_d.HasNext)
				{
					DebugLocation(173, 41);
					adaptor.AddChild(root_1, stream_d.NextNode());

				}
				stream_d.Reset();
				DebugLocation(173, 45);
				adaptor.AddChild(root_1, stream_x.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("selectClause", 19);
			LeaveRule("selectClause", 19);
			LeaveRule_selectClause();
			HandleClauseEnd( SELECT );
		}
		DebugLocation(174, 1);
		} finally { DebugExitRule(GrammarFileName, "selectClause"); }
		return retval;

	}
	// $ANTLR end "selectClause"

	partial void EnterRule_selectExprList();
	partial void LeaveRule_selectExprList();
	// $ANTLR start "selectExprList"
	// HqlSqlWalker.g:177:1: selectExprList : ( selectExpr | aliasedSelectExpr )+ ;
	[GrammarRule("selectExprList")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> selectExprList()
	{
		EnterRule_selectExprList();
		EnterRule("selectExprList", 20);
		TraceIn("selectExprList", 20);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> selectExpr45 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> aliasedSelectExpr46 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);


				bool oldInSelect = _inSelect;
				_inSelect = true;
			
		try { DebugEnterRule(GrammarFileName, "selectExprList");
		DebugLocation(177, 1);
		try
		{
			// HqlSqlWalker.g:181:2: ( ( selectExpr | aliasedSelectExpr )+ )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:181:4: ( selectExpr | aliasedSelectExpr )+
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(181, 4);
			// HqlSqlWalker.g:181:4: ( selectExpr | aliasedSelectExpr )+
			int cnt24=0;
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=3;
				try { DebugEnterDecision(24, false);
				int LA24_1 = input.LA(1);

				if ((LA24_1==AGGREGATE||LA24_1==ALL||LA24_1==BAND||(LA24_1>=BNOT && LA24_1<=BOR)||(LA24_1>=BXOR && LA24_1<=CASE2)||LA24_1==COLON||(LA24_1>=CONSTRUCTOR && LA24_1<=COUNT)||(LA24_1>=DIV && LA24_1<=ELEMENTS)||LA24_1==IDENT||LA24_1==INDICES||LA24_1==METHOD_CALL||LA24_1==MINUS||(LA24_1>=NUM_DECIMAL && LA24_1<=OBJECT)||(LA24_1>=PARAM && LA24_1<=PLUS)||(LA24_1>=QUERY && LA24_1<=QUOTED_String)||LA24_1==STAR||LA24_1==UNARY_MINUS||LA24_1==UNION||LA24_1==WEIRD_IDENT))
				{
					alt24 = 1;
				}
				else if ((LA24_1==AS))
				{
					alt24 = 2;
				}


				} finally { DebugExitDecision(24); }
				switch (alt24)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:181:6: selectExpr
					{
					DebugLocation(181, 6);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._selectExpr_in_selectExprList868);
					selectExpr45=selectExpr();
					PopFollow();

					adaptor.AddChild(root_0, selectExpr45.Tree);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// HqlSqlWalker.g:181:19: aliasedSelectExpr
					{
					DebugLocation(181, 19);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._aliasedSelectExpr_in_selectExprList872);
					aliasedSelectExpr46=aliasedSelectExpr();
					PopFollow();

					adaptor.AddChild(root_0, aliasedSelectExpr46.Tree);


					}
					break;

				default:
					if (cnt24 >= 1)
						goto loop24;

					EarlyExitException eee24 = new EarlyExitException( 24, input );
					DebugRecognitionException(eee24);
					throw eee24;
				}
				cnt24++;
			}
			loop24:
				;

			} finally { DebugExitSubRule(24); }

			DebugLocation(181, 40);

					_inSelect = oldInSelect;
				

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("selectExprList", 20);
			LeaveRule("selectExprList", 20);
			LeaveRule_selectExprList();
		}
		DebugLocation(184, 1);
		} finally { DebugExitRule(GrammarFileName, "selectExprList"); }
		return retval;

	}
	// $ANTLR end "selectExprList"

	partial void EnterRule_aliasedSelectExpr();
	partial void LeaveRule_aliasedSelectExpr();
	// $ANTLR start "aliasedSelectExpr"
	// HqlSqlWalker.g:186:1: aliasedSelectExpr : ^( AS se= selectExpr i= identifier ) ;
	[GrammarRule("aliasedSelectExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> aliasedSelectExpr()
	{
		EnterRule_aliasedSelectExpr();
		EnterRule("aliasedSelectExpr", 21);
		TraceIn("aliasedSelectExpr", 21);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode AS47 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> se = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> i = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode AS47_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "aliasedSelectExpr");
		DebugLocation(186, 1);
		try
		{
			// HqlSqlWalker.g:191:2: ( ^( AS se= selectExpr i= identifier ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:191:4: ^( AS se= selectExpr i= identifier )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(191, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(191, 6);

			_last = (IASTNode)input.LT(1);
			AS47=(IASTNode)Match(input,AS,Follow._AS_in_aliasedSelectExpr896); 
			AS47_tree = (IASTNode)adaptor.DupNode(AS47);


			root_1 = (IASTNode)adaptor.BecomeRoot(AS47_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(191, 11);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._selectExpr_in_aliasedSelectExpr900);
			se=selectExpr();
			PopFollow();

			adaptor.AddChild(root_1, se.Tree);

			DebugLocation(191, 24);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._identifier_in_aliasedSelectExpr904);
			i=identifier();
			PopFollow();

			adaptor.AddChild(root_1, i.Tree);


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


				    SetAlias((se!=null?((IASTNode)se.Tree):default(IASTNode)),(i!=null?((IASTNode)i.Tree):default(IASTNode)));
				    retval.Tree =  (se!=null?((IASTNode)se.Tree):default(IASTNode));
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("aliasedSelectExpr", 21);
			LeaveRule("aliasedSelectExpr", 21);
			LeaveRule_aliasedSelectExpr();
		}
		DebugLocation(192, 1);
		} finally { DebugExitRule(GrammarFileName, "aliasedSelectExpr"); }
		return retval;

	}
	// $ANTLR end "aliasedSelectExpr"

	partial void EnterRule_selectExpr();
	partial void LeaveRule_selectExpr();
	// $ANTLR start "selectExpr"
	// HqlSqlWalker.g:194:1: selectExpr : (p= propertyRef | ^( ALL ar2= aliasRef ) | ^( OBJECT ar3= aliasRef ) |con= constructor | functionCall | parameter | count | collectionFunction | literal | arithmeticExpr | query );
	[GrammarRule("selectExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> selectExpr()
	{
		EnterRule_selectExpr();
		EnterRule("selectExpr", 22);
		TraceIn("selectExpr", 22);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode ALL48 = default(IASTNode);
		IASTNode OBJECT49 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> p = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> ar2 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> ar3 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> con = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> functionCall50 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> parameter51 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> count52 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunction53 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> literal54 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> arithmeticExpr55 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> query56 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode ALL48_tree = default(IASTNode);
		IASTNode OBJECT49_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "selectExpr");
		DebugLocation(194, 1);
		try
		{
			// HqlSqlWalker.g:195:2: (p= propertyRef | ^( ALL ar2= aliasRef ) | ^( OBJECT ar3= aliasRef ) |con= constructor | functionCall | parameter | count | collectionFunction | literal | arithmeticExpr | query )
			int alt25=11;
			try { DebugEnterDecision(25, false);
			switch (input.LA(1))
			{
			case DOT:
			case IDENT:
			case WEIRD_IDENT:
				{
				alt25 = 1;
				}
				break;
			case ALL:
				{
				alt25 = 2;
				}
				break;
			case OBJECT:
				{
				alt25 = 3;
				}
				break;
			case CONSTRUCTOR:
				{
				alt25 = 4;
				}
				break;
			case AGGREGATE:
			case METHOD_CALL:
				{
				alt25 = 5;
				}
				break;
			case COLON:
			case PARAM:
				{
				alt25 = 6;
				}
				break;
			case COUNT:
				{
				alt25 = 7;
				}
				break;
			case ELEMENTS:
			case INDICES:
				{
				alt25 = 8;
				}
				break;
			case NUM_DECIMAL:
			case NUM_DOUBLE:
			case NUM_FLOAT:
			case NUM_INT:
			case NUM_LONG:
			case QUOTED_String:
				{
				alt25 = 9;
				}
				break;
			case BAND:
			case BNOT:
			case BOR:
			case BXOR:
			case CASE:
			case CASE2:
			case DIV:
			case MINUS:
			case PLUS:
			case STAR:
			case UNARY_MINUS:
				{
				alt25 = 10;
				}
				break;
			case QUERY:
			case UNION:
				{
				alt25 = 11;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 25, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:195:4: p= propertyRef
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(195, 5);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._propertyRef_in_selectExpr919);
				p=propertyRef();
				PopFollow();

				adaptor.AddChild(root_0, p.Tree);

				DebugLocation(195, 22);
				 ResolveSelectExpression((p!=null?((IASTNode)p.Tree):default(IASTNode))); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:196:4: ^( ALL ar2= aliasRef )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(196, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(196, 6);

				_last = (IASTNode)input.LT(1);
				ALL48=(IASTNode)Match(input,ALL,Follow._ALL_in_selectExpr931); 
				ALL48_tree = (IASTNode)adaptor.DupNode(ALL48);


				root_1 = (IASTNode)adaptor.BecomeRoot(ALL48_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(196, 13);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._aliasRef_in_selectExpr935);
				ar2=aliasRef();
				PopFollow();

				adaptor.AddChild(root_1, ar2.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(196, 27);
				 ResolveSelectExpression((ar2!=null?((IASTNode)ar2.Tree):default(IASTNode))); retval.Tree =  (ar2!=null?((IASTNode)ar2.Tree):default(IASTNode)); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:197:4: ^( OBJECT ar3= aliasRef )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(197, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(197, 6);

				_last = (IASTNode)input.LT(1);
				OBJECT49=(IASTNode)Match(input,OBJECT,Follow._OBJECT_in_selectExpr947); 
				OBJECT49_tree = (IASTNode)adaptor.DupNode(OBJECT49);


				root_1 = (IASTNode)adaptor.BecomeRoot(OBJECT49_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(197, 16);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._aliasRef_in_selectExpr951);
				ar3=aliasRef();
				PopFollow();

				adaptor.AddChild(root_1, ar3.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(197, 28);
				 ResolveSelectExpression((ar3!=null?((IASTNode)ar3.Tree):default(IASTNode))); retval.Tree =  (ar3!=null?((IASTNode)ar3.Tree):default(IASTNode)); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:198:4: con= constructor
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(198, 7);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._constructor_in_selectExpr962);
				con=constructor();
				PopFollow();

				adaptor.AddChild(root_0, con.Tree);

				DebugLocation(198, 24);
				 ProcessConstructor((con!=null?((IASTNode)con.Tree):default(IASTNode))); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// HqlSqlWalker.g:199:4: functionCall
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(199, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._functionCall_in_selectExpr973);
				functionCall50=functionCall();
				PopFollow();

				adaptor.AddChild(root_0, functionCall50.Tree);


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// HqlSqlWalker.g:200:4: parameter
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(200, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._parameter_in_selectExpr978);
				parameter51=parameter();
				PopFollow();

				adaptor.AddChild(root_0, parameter51.Tree);


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// HqlSqlWalker.g:201:4: count
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(201, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._count_in_selectExpr983);
				count52=count();
				PopFollow();

				adaptor.AddChild(root_0, count52.Tree);


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// HqlSqlWalker.g:202:4: collectionFunction
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(202, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._collectionFunction_in_selectExpr988);
				collectionFunction53=collectionFunction();
				PopFollow();

				adaptor.AddChild(root_0, collectionFunction53.Tree);


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// HqlSqlWalker.g:203:4: literal
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(203, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._literal_in_selectExpr996);
				literal54=literal();
				PopFollow();

				adaptor.AddChild(root_0, literal54.Tree);


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// HqlSqlWalker.g:204:4: arithmeticExpr
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(204, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._arithmeticExpr_in_selectExpr1001);
				arithmeticExpr55=arithmeticExpr();
				PopFollow();

				adaptor.AddChild(root_0, arithmeticExpr55.Tree);


				}
				break;
			case 11:
				DebugEnterAlt(11);
				// HqlSqlWalker.g:205:4: query
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(205, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._query_in_selectExpr1006);
				query56=query();
				PopFollow();

				adaptor.AddChild(root_0, query56.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("selectExpr", 22);
			LeaveRule("selectExpr", 22);
			LeaveRule_selectExpr();
		}
		DebugLocation(206, 1);
		} finally { DebugExitRule(GrammarFileName, "selectExpr"); }
		return retval;

	}
	// $ANTLR end "selectExpr"

	partial void EnterRule_count();
	partial void LeaveRule_count();
	// $ANTLR start "count"
	// HqlSqlWalker.g:208:1: count : ^( COUNT ( DISTINCT | ALL )? ( aggregateExpr | ROW_STAR ) ) ;
	[GrammarRule("count")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> count()
	{
		EnterRule_count();
		EnterRule("count", 23);
		TraceIn("count", 23);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode COUNT57 = default(IASTNode);
		IASTNode set58 = default(IASTNode);
		IASTNode ROW_STAR60 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> aggregateExpr59 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode COUNT57_tree = default(IASTNode);
		IASTNode set58_tree = default(IASTNode);
		IASTNode ROW_STAR60_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "count");
		DebugLocation(208, 1);
		try
		{
			// HqlSqlWalker.g:209:2: ( ^( COUNT ( DISTINCT | ALL )? ( aggregateExpr | ROW_STAR ) ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:209:4: ^( COUNT ( DISTINCT | ALL )? ( aggregateExpr | ROW_STAR ) )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(209, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(209, 6);

			_last = (IASTNode)input.LT(1);
			COUNT57=(IASTNode)Match(input,COUNT,Follow._COUNT_in_count1018); 
			COUNT57_tree = (IASTNode)adaptor.DupNode(COUNT57);


			root_1 = (IASTNode)adaptor.BecomeRoot(COUNT57_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(209, 12);
			// HqlSqlWalker.g:209:12: ( DISTINCT | ALL )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_1 = input.LA(1);

			if ((LA26_1==ALL||LA26_1==DISTINCT))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:
				{
				DebugLocation(209, 12);

				_last = (IASTNode)input.LT(1);
				set58=(IASTNode)input.LT(1);
				if (input.LA(1)==ALL||input.LA(1)==DISTINCT)
				{
					input.Consume();
					set58_tree = (IASTNode)adaptor.DupNode(set58);


					adaptor.AddChild(root_1, set58_tree);

					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}



				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(209, 32);
			// HqlSqlWalker.g:209:32: ( aggregateExpr | ROW_STAR )
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_1 = input.LA(1);

			if ((LA27_1==AGGREGATE||LA27_1==BAND||(LA27_1>=BNOT && LA27_1<=BOR)||(LA27_1>=BXOR && LA27_1<=CASE2)||LA27_1==COLON||LA27_1==COUNT||(LA27_1>=DIV && LA27_1<=ELEMENTS)||LA27_1==FALSE||LA27_1==IDENT||(LA27_1>=INDEX_OP && LA27_1<=INDICES)||LA27_1==JAVA_CONSTANT||LA27_1==METHOD_CALL||LA27_1==MINUS||(LA27_1>=NULL && LA27_1<=NUM_LONG)||(LA27_1>=PARAM && LA27_1<=PLUS)||LA27_1==QUOTED_String||LA27_1==STAR||(LA27_1>=TRUE && LA27_1<=UNARY_MINUS)||LA27_1==VECTOR_EXPR||LA27_1==WEIRD_IDENT))
			{
				alt27 = 1;
			}
			else if ((LA27_1==ROW_STAR))
			{
				alt27 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 27, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:209:34: aggregateExpr
				{
				DebugLocation(209, 34);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._aggregateExpr_in_count1033);
				aggregateExpr59=aggregateExpr();
				PopFollow();

				adaptor.AddChild(root_1, aggregateExpr59.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:209:50: ROW_STAR
				{
				DebugLocation(209, 50);

				_last = (IASTNode)input.LT(1);
				ROW_STAR60=(IASTNode)Match(input,ROW_STAR,Follow._ROW_STAR_in_count1037); 
				ROW_STAR60_tree = (IASTNode)adaptor.DupNode(ROW_STAR60);


				adaptor.AddChild(root_1, ROW_STAR60_tree);


				}
				break;

			}
			} finally { DebugExitSubRule(27); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("count", 23);
			LeaveRule("count", 23);
			LeaveRule_count();
		}
		DebugLocation(210, 1);
		} finally { DebugExitRule(GrammarFileName, "count"); }
		return retval;

	}
	// $ANTLR end "count"

	partial void EnterRule_constructor();
	partial void LeaveRule_constructor();
	// $ANTLR start "constructor"
	// HqlSqlWalker.g:212:1: constructor : ^( CONSTRUCTOR path ( selectExpr | aliasedSelectExpr )* ) ;
	[GrammarRule("constructor")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> constructor()
	{
		EnterRule_constructor();
		EnterRule("constructor", 24);
		TraceIn("constructor", 24);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode CONSTRUCTOR61 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> path62 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> selectExpr63 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> aliasedSelectExpr64 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode CONSTRUCTOR61_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "constructor");
		DebugLocation(212, 1);
		try
		{
			// HqlSqlWalker.g:213:2: ( ^( CONSTRUCTOR path ( selectExpr | aliasedSelectExpr )* ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:213:4: ^( CONSTRUCTOR path ( selectExpr | aliasedSelectExpr )* )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(213, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(213, 6);

			_last = (IASTNode)input.LT(1);
			CONSTRUCTOR61=(IASTNode)Match(input,CONSTRUCTOR,Follow._CONSTRUCTOR_in_constructor1053); 
			CONSTRUCTOR61_tree = (IASTNode)adaptor.DupNode(CONSTRUCTOR61);


			root_1 = (IASTNode)adaptor.BecomeRoot(CONSTRUCTOR61_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(213, 18);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._path_in_constructor1055);
			path62=path();
			PopFollow();

			adaptor.AddChild(root_1, path62.Tree);

			DebugLocation(213, 23);
			// HqlSqlWalker.g:213:23: ( selectExpr | aliasedSelectExpr )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=3;
				try { DebugEnterDecision(28, false);
				int LA28_1 = input.LA(1);

				if ((LA28_1==AGGREGATE||LA28_1==ALL||LA28_1==BAND||(LA28_1>=BNOT && LA28_1<=BOR)||(LA28_1>=BXOR && LA28_1<=CASE2)||LA28_1==COLON||(LA28_1>=CONSTRUCTOR && LA28_1<=COUNT)||(LA28_1>=DIV && LA28_1<=ELEMENTS)||LA28_1==IDENT||LA28_1==INDICES||LA28_1==METHOD_CALL||LA28_1==MINUS||(LA28_1>=NUM_DECIMAL && LA28_1<=OBJECT)||(LA28_1>=PARAM && LA28_1<=PLUS)||(LA28_1>=QUERY && LA28_1<=QUOTED_String)||LA28_1==STAR||LA28_1==UNARY_MINUS||LA28_1==UNION||LA28_1==WEIRD_IDENT))
				{
					alt28 = 1;
				}
				else if ((LA28_1==AS))
				{
					alt28 = 2;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:213:25: selectExpr
					{
					DebugLocation(213, 25);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._selectExpr_in_constructor1059);
					selectExpr63=selectExpr();
					PopFollow();

					adaptor.AddChild(root_1, selectExpr63.Tree);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// HqlSqlWalker.g:213:38: aliasedSelectExpr
					{
					DebugLocation(213, 38);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._aliasedSelectExpr_in_constructor1063);
					aliasedSelectExpr64=aliasedSelectExpr();
					PopFollow();

					adaptor.AddChild(root_1, aliasedSelectExpr64.Tree);


					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("constructor", 24);
			LeaveRule("constructor", 24);
			LeaveRule_constructor();
		}
		DebugLocation(214, 1);
		} finally { DebugExitRule(GrammarFileName, "constructor"); }
		return retval;

	}
	// $ANTLR end "constructor"

	partial void EnterRule_aggregateExpr();
	partial void LeaveRule_aggregateExpr();
	// $ANTLR start "aggregateExpr"
	// HqlSqlWalker.g:216:1: aggregateExpr : ( expr | collectionFunction );
	[GrammarRule("aggregateExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> aggregateExpr()
	{
		EnterRule_aggregateExpr();
		EnterRule("aggregateExpr", 25);
		TraceIn("aggregateExpr", 25);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> expr65 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunction66 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "aggregateExpr");
		DebugLocation(216, 1);
		try
		{
			// HqlSqlWalker.g:217:2: ( expr | collectionFunction )
			int alt29=2;
			try { DebugEnterDecision(29, false);
			int LA29_1 = input.LA(1);

			if ((LA29_1==AGGREGATE||LA29_1==BAND||(LA29_1>=BNOT && LA29_1<=BOR)||(LA29_1>=BXOR && LA29_1<=CASE2)||LA29_1==COLON||LA29_1==COUNT||(LA29_1>=DIV && LA29_1<=DOT)||LA29_1==FALSE||LA29_1==IDENT||LA29_1==INDEX_OP||LA29_1==JAVA_CONSTANT||LA29_1==METHOD_CALL||LA29_1==MINUS||(LA29_1>=NULL && LA29_1<=NUM_LONG)||(LA29_1>=PARAM && LA29_1<=PLUS)||LA29_1==QUOTED_String||LA29_1==STAR||(LA29_1>=TRUE && LA29_1<=UNARY_MINUS)||LA29_1==VECTOR_EXPR||LA29_1==WEIRD_IDENT))
			{
				alt29 = 1;
			}
			else if ((LA29_1==ELEMENTS||LA29_1==INDICES))
			{
				alt29 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 29, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:217:4: expr
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(217, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._expr_in_aggregateExpr1079);
				expr65=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr65.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:218:4: collectionFunction
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(218, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._collectionFunction_in_aggregateExpr1085);
				collectionFunction66=collectionFunction();
				PopFollow();

				adaptor.AddChild(root_0, collectionFunction66.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("aggregateExpr", 25);
			LeaveRule("aggregateExpr", 25);
			LeaveRule_aggregateExpr();
		}
		DebugLocation(219, 1);
		} finally { DebugExitRule(GrammarFileName, "aggregateExpr"); }
		return retval;

	}
	// $ANTLR end "aggregateExpr"

	partial void EnterRule_fromClause();
	partial void LeaveRule_fromClause();
	// $ANTLR start "fromClause"
	// HqlSqlWalker.g:222:1: fromClause : ^(f= FROM fromElementList ) ;
	[GrammarRule("fromClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> fromClause()
	{
		EnterRule_fromClause();
		EnterRule("fromClause", 26);
		TraceIn("fromClause", 26);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode f = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> fromElementList67 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode f_tree = default(IASTNode);

				// NOTE: This references the INPUT AST! (see http://www.antlr.org/doc/trees.html#Action Translation)
				// the ouput AST (#fromClause) has not been built yet.
				PrepareFromClauseInputTree((IASTNode) input.LT(1), input);
			
		try { DebugEnterRule(GrammarFileName, "fromClause");
		DebugLocation(222, 1);
		try
		{
			// HqlSqlWalker.g:228:2: ( ^(f= FROM fromElementList ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:228:4: ^(f= FROM fromElementList )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(228, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(228, 7);

			_last = (IASTNode)input.LT(1);
			f=(IASTNode)Match(input,FROM,Follow._FROM_in_fromClause1105); 
			f_tree = (IASTNode)adaptor.DupNode(f);


			root_1 = (IASTNode)adaptor.BecomeRoot(f_tree, root_1);


			DebugLocation(228, 13);
			 PushFromClause(f_tree); HandleClauseStart( FROM ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(228, 69);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._fromElementList_in_fromClause1109);
			fromElementList67=fromElementList();
			PopFollow();

			adaptor.AddChild(root_1, fromElementList67.Tree);


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("fromClause", 26);
			LeaveRule("fromClause", 26);
			LeaveRule_fromClause();
			HandleClauseEnd( FROM );
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "fromClause"); }
		return retval;

	}
	// $ANTLR end "fromClause"

	partial void EnterRule_fromElementList();
	partial void LeaveRule_fromElementList();
	// $ANTLR start "fromElementList"
	// HqlSqlWalker.g:232:1: fromElementList : ( fromElement )+ ;
	[GrammarRule("fromElementList")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> fromElementList()
	{
		EnterRule_fromElementList();
		EnterRule("fromElementList", 27);
		TraceIn("fromElementList", 27);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> fromElement68 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);


				bool oldInFrom = _inFrom;
				_inFrom = true;
				
		try { DebugEnterRule(GrammarFileName, "fromElementList");
		DebugLocation(232, 1);
		try
		{
			// HqlSqlWalker.g:236:2: ( ( fromElement )+ )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:236:4: ( fromElement )+
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(236, 4);
			// HqlSqlWalker.g:236:4: ( fromElement )+
			int cnt30=0;
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_1 = input.LA(1);

				if ((LA30_1==FILTER_ENTITY||LA30_1==JOIN||LA30_1==RANGE))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch (alt30)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:236:5: fromElement
					{
					DebugLocation(236, 5);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._fromElement_in_fromElementList1132);
					fromElement68=fromElement();
					PopFollow();

					adaptor.AddChild(root_0, fromElement68.Tree);


					}
					break;

				default:
					if (cnt30 >= 1)
						goto loop30;

					EarlyExitException eee30 = new EarlyExitException( 30, input );
					DebugRecognitionException(eee30);
					throw eee30;
				}
				cnt30++;
			}
			loop30:
				;

			} finally { DebugExitSubRule(30); }

			DebugLocation(236, 19);

					_inFrom = oldInFrom;
					

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("fromElementList", 27);
			LeaveRule("fromElementList", 27);
			LeaveRule_fromElementList();
		}
		DebugLocation(239, 1);
		} finally { DebugExitRule(GrammarFileName, "fromElementList"); }
		return retval;

	}
	// $ANTLR end "fromElementList"

	partial void EnterRule_fromElement();
	partial void LeaveRule_fromElement();
	// $ANTLR start "fromElement"
	// HqlSqlWalker.g:241:1: fromElement : ( ^( RANGE p= path (a= ALIAS )? (pf= FETCH )? ) -> {fromElement != null}? ^() ->|je= joinElement ->|fe= FILTER_ENTITY a3= ALIAS -> ^() );
	[GrammarRule("fromElement")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> fromElement()
	{
		EnterRule_fromElement();
		EnterRule("fromElement", 28);
		TraceIn("fromElement", 28);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode a = default(IASTNode);
		IASTNode pf = default(IASTNode);
		IASTNode fe = default(IASTNode);
		IASTNode a3 = default(IASTNode);
		IASTNode RANGE69 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> p = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> je = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode a_tree = default(IASTNode);
		IASTNode pf_tree = default(IASTNode);
		IASTNode fe_tree = default(IASTNode);
		IASTNode a3_tree = default(IASTNode);
		IASTNode RANGE69_tree = default(IASTNode);
		RewriteRuleNodeStream stream_RANGE=new RewriteRuleNodeStream(adaptor,"token RANGE");
		RewriteRuleNodeStream stream_ALIAS=new RewriteRuleNodeStream(adaptor,"token ALIAS");
		RewriteRuleNodeStream stream_FETCH=new RewriteRuleNodeStream(adaptor,"token FETCH");
		RewriteRuleNodeStream stream_FILTER_ENTITY=new RewriteRuleNodeStream(adaptor,"token FILTER_ENTITY");
		RewriteRuleSubtreeStream stream_path=new RewriteRuleSubtreeStream(adaptor,"rule path");
		RewriteRuleSubtreeStream stream_joinElement=new RewriteRuleSubtreeStream(adaptor,"rule joinElement");

		   IASTNode fromElement = null;

		try { DebugEnterRule(GrammarFileName, "fromElement");
		DebugLocation(241, 1);
		try
		{
			// HqlSqlWalker.g:246:2: ( ^( RANGE p= path (a= ALIAS )? (pf= FETCH )? ) -> {fromElement != null}? ^() ->|je= joinElement ->|fe= FILTER_ENTITY a3= ALIAS -> ^() )
			int alt33=3;
			try { DebugEnterDecision(33, false);
			switch (input.LA(1))
			{
			case RANGE:
				{
				alt33 = 1;
				}
				break;
			case JOIN:
				{
				alt33 = 2;
				}
				break;
			case FILTER_ENTITY:
				{
				alt33 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 33, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:246:4: ^( RANGE p= path (a= ALIAS )? (pf= FETCH )? )
				{
				DebugLocation(246, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(246, 6);

				_last = (IASTNode)input.LT(1);
				RANGE69=(IASTNode)Match(input,RANGE,Follow._RANGE_in_fromElement1157); 
				 
				stream_RANGE.Add(RANGE69);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(246, 13);
				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._path_in_fromElement1161);
				p=path();
				PopFollow();

				stream_path.Add(p.Tree);
				DebugLocation(246, 19);
				// HqlSqlWalker.g:246:19: (a= ALIAS )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				int LA31_1 = input.LA(1);

				if ((LA31_1==ALIAS))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:246:20: a= ALIAS
					{
					DebugLocation(246, 21);

					_last = (IASTNode)input.LT(1);
					a=(IASTNode)Match(input,ALIAS,Follow._ALIAS_in_fromElement1166); 
					 
					stream_ALIAS.Add(a);


					}
					break;

				}
				} finally { DebugExitSubRule(31); }

				DebugLocation(246, 30);
				// HqlSqlWalker.g:246:30: (pf= FETCH )?
				int alt32=2;
				try { DebugEnterSubRule(32);
				try { DebugEnterDecision(32, false);
				int LA32_1 = input.LA(1);

				if ((LA32_1==FETCH))
				{
					alt32 = 1;
				}
				} finally { DebugExitDecision(32); }
				switch (alt32)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:246:31: pf= FETCH
					{
					DebugLocation(246, 33);

					_last = (IASTNode)input.LT(1);
					pf=(IASTNode)Match(input,FETCH,Follow._FETCH_in_fromElement1173); 
					 
					stream_FETCH.Add(pf);


					}
					break;

				}
				} finally { DebugExitSubRule(32); }


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(246, 44);
				 fromElement = CreateFromElement((p!=null?((HqlSqlWalker.path_return)p).p:default(String)), (p!=null?((IASTNode)p.Tree):default(IASTNode)), a, pf); 


				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 247:3: -> {fromElement != null}? ^()
				if (fromElement != null)
				{
					DebugLocation(247, 29);
					// HqlSqlWalker.g:247:29: ^()
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(247, 31);
					root_1 = (IASTNode)adaptor.BecomeRoot(fromElement, root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 248:3: ->
				{
					DebugLocation(249, 2);
					root_0 = null;
				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:249:4: je= joinElement
				{
				DebugLocation(249, 6);
				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._joinElement_in_fromElement1200);
				je=joinElement();
				PopFollow();

				stream_joinElement.Add(je.Tree);


				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 250:3: ->
				{
					DebugLocation(252, 2);
					root_0 = null;
				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:252:4: fe= FILTER_ENTITY a3= ALIAS
				{
				DebugLocation(252, 6);

				_last = (IASTNode)input.LT(1);
				fe=(IASTNode)Match(input,FILTER_ENTITY,Follow._FILTER_ENTITY_in_fromElement1215); 
				 
				stream_FILTER_ENTITY.Add(fe);

				DebugLocation(252, 23);

				_last = (IASTNode)input.LT(1);
				a3=(IASTNode)Match(input,ALIAS,Follow._ALIAS_in_fromElement1219); 
				 
				stream_ALIAS.Add(a3);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 253:3: -> ^()
				{
					DebugLocation(253, 6);
					// HqlSqlWalker.g:253:6: ^()
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(253, 8);
					root_1 = (IASTNode)adaptor.BecomeRoot(CreateFromFilterElement(fe,a3), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("fromElement", 28);
			LeaveRule("fromElement", 28);
			LeaveRule_fromElement();
		}
		DebugLocation(254, 1);
		} finally { DebugExitRule(GrammarFileName, "fromElement"); }
		return retval;

	}
	// $ANTLR end "fromElement"

	partial void EnterRule_joinElement();
	partial void LeaveRule_joinElement();
	// $ANTLR start "joinElement"
	// HqlSqlWalker.g:256:1: joinElement : ^( JOIN (j= joinType )? (f= FETCH )? pRef= propertyRef (a= ALIAS )? (pf= FETCH )? ( ^( (with= WITH ) ( . )* ) )? ) ;
	[GrammarRule("joinElement")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> joinElement()
	{
		EnterRule_joinElement();
		EnterRule("joinElement", 29);
		TraceIn("joinElement", 29);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode f = default(IASTNode);
		IASTNode a = default(IASTNode);
		IASTNode pf = default(IASTNode);
		IASTNode with = default(IASTNode);
		IASTNode JOIN70 = default(IASTNode);
		IASTNode wildcard71 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> j = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> pRef = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode f_tree = default(IASTNode);
		IASTNode a_tree = default(IASTNode);
		IASTNode pf_tree = default(IASTNode);
		IASTNode with_tree = default(IASTNode);
		IASTNode JOIN70_tree = default(IASTNode);
		IASTNode wildcard71_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "joinElement");
		DebugLocation(256, 1);
		try
		{
			// HqlSqlWalker.g:260:2: ( ^( JOIN (j= joinType )? (f= FETCH )? pRef= propertyRef (a= ALIAS )? (pf= FETCH )? ( ^( (with= WITH ) ( . )* ) )? ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:260:4: ^( JOIN (j= joinType )? (f= FETCH )? pRef= propertyRef (a= ALIAS )? (pf= FETCH )? ( ^( (with= WITH ) ( . )* ) )? )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(260, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(260, 6);

			_last = (IASTNode)input.LT(1);
			JOIN70=(IASTNode)Match(input,JOIN,Follow._JOIN_in_joinElement1248); 
			JOIN70_tree = (IASTNode)adaptor.DupNode(JOIN70);


			root_1 = (IASTNode)adaptor.BecomeRoot(JOIN70_tree, root_1);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(260, 11);
			// HqlSqlWalker.g:260:11: (j= joinType )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			int LA34_1 = input.LA(1);

			if ((LA34_1==FULL||LA34_1==INNER||LA34_1==LEFT||LA34_1==RIGHT))
			{
				alt34 = 1;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:260:12: j= joinType
				{
				DebugLocation(260, 13);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._joinType_in_joinElement1253);
				j=joinType();
				PopFollow();

				adaptor.AddChild(root_1, j.Tree);

				DebugLocation(260, 23);
				 SetImpliedJoinType((j!=null?((HqlSqlWalker.joinType_return)j).j:default(int))); 

				}
				break;

			}
			} finally { DebugExitSubRule(34); }

			DebugLocation(260, 56);
			// HqlSqlWalker.g:260:56: (f= FETCH )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_1 = input.LA(1);

			if ((LA35_1==FETCH))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:260:57: f= FETCH
				{
				DebugLocation(260, 58);

				_last = (IASTNode)input.LT(1);
				f=(IASTNode)Match(input,FETCH,Follow._FETCH_in_joinElement1263); 
				f_tree = (IASTNode)adaptor.DupNode(f);


				adaptor.AddChild(root_1, f_tree);


				}
				break;

			}
			} finally { DebugExitSubRule(35); }

			DebugLocation(260, 71);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._propertyRef_in_joinElement1269);
			pRef=propertyRef();
			PopFollow();

			adaptor.AddChild(root_1, pRef.Tree);

			DebugLocation(260, 84);
			// HqlSqlWalker.g:260:84: (a= ALIAS )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_1 = input.LA(1);

			if ((LA36_1==ALIAS))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:260:85: a= ALIAS
				{
				DebugLocation(260, 86);

				_last = (IASTNode)input.LT(1);
				a=(IASTNode)Match(input,ALIAS,Follow._ALIAS_in_joinElement1274); 
				a_tree = (IASTNode)adaptor.DupNode(a);


				adaptor.AddChild(root_1, a_tree);


				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(260, 95);
			// HqlSqlWalker.g:260:95: (pf= FETCH )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_1 = input.LA(1);

			if ((LA37_1==FETCH))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:260:96: pf= FETCH
				{
				DebugLocation(260, 98);

				_last = (IASTNode)input.LT(1);
				pf=(IASTNode)Match(input,FETCH,Follow._FETCH_in_joinElement1281); 
				pf_tree = (IASTNode)adaptor.DupNode(pf);


				adaptor.AddChild(root_1, pf_tree);


				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(260, 107);
			// HqlSqlWalker.g:260:107: ( ^( (with= WITH ) ( . )* ) )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_1 = input.LA(1);

			if ((LA39_1==WITH))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:260:108: ^( (with= WITH ) ( . )* )
				{
				DebugLocation(260, 108);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_2 = _last;
				IASTNode _first_2 = default(IASTNode);
				IASTNode root_2 = (IASTNode)adaptor.Nil();
				DebugLocation(260, 110);
				// HqlSqlWalker.g:260:110: (with= WITH )
				DebugEnterAlt(1);
				// HqlSqlWalker.g:260:111: with= WITH
				{
				DebugLocation(260, 115);

				_last = (IASTNode)input.LT(1);
				with=(IASTNode)Match(input,WITH,Follow._WITH_in_joinElement1290); 
				with_tree = (IASTNode)adaptor.DupNode(with);


				adaptor.AddChild(root_2, with_tree);


				}


				if (input.LA(1) == TokenTypes.Down) {
					Match(input, TokenTypes.Down, null); 
					DebugLocation(260, 122);
					// HqlSqlWalker.g:260:122: ( . )*
					try { DebugEnterSubRule(38);
					while (true)
					{
						int alt38=2;
						try { DebugEnterDecision(38, false);
						int LA38_1 = input.LA(1);

						if (((LA38_1>=AGGREGATE && LA38_1<=THETA_JOINS)))
						{
							alt38 = 1;
						}
						else if ((LA38_1==UP))
						{
							alt38 = 2;
						}


						} finally { DebugExitDecision(38); }
						switch ( alt38 )
						{
						case 1:
							DebugEnterAlt(1);
							// HqlSqlWalker.g:260:122: .
							{
							DebugLocation(260, 122);

							_last = (IASTNode)input.LT(1);
							wildcard71=(IASTNode)input.LT(1);

							MatchAny(input); 
							wildcard71_tree = (IASTNode)adaptor.DupTree(wildcard71);
							adaptor.AddChild(root_2, wildcard71_tree);


							}
							break;

						default:
							goto loop38;
						}
					}

					loop38:
						;

					} finally { DebugExitSubRule(38); }


					Match(input, TokenTypes.Up, null); 
				}
				adaptor.AddChild(root_1, root_2);
				_last = _save_last_2;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(39); }


			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}

			DebugLocation(261, 2);

					CreateFromJoinElement((pRef!=null?((IASTNode)pRef.Tree):default(IASTNode)),a,(j!=null?((HqlSqlWalker.joinType_return)j).j:default(int)),f, pf, with);
					SetImpliedJoinType(INNER);	// Reset the implied join type.
				

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("joinElement", 29);
			LeaveRule("joinElement", 29);
			LeaveRule_joinElement();
		}
		DebugLocation(265, 1);
		} finally { DebugExitRule(GrammarFileName, "joinElement"); }
		return retval;

	}
	// $ANTLR end "joinElement"

	private sealed partial class joinType_return : AstTreeRuleReturnScope<IASTNode, IASTNode>
	{
		public int j;
		public joinType_return(HqlSqlWalker grammar) {OnCreated(grammar);}
		partial void OnCreated(HqlSqlWalker grammar);
	}

	partial void EnterRule_joinType();
	partial void LeaveRule_joinType();
	// $ANTLR start "joinType"
	// HqlSqlWalker.g:269:1: joinType returns [int j] : ( ( (left= LEFT |right= RIGHT ) (outer= OUTER )? ) | FULL | INNER );
	[GrammarRule("joinType")]
	private HqlSqlWalker.joinType_return joinType()
	{
		EnterRule_joinType();
		EnterRule("joinType", 30);
		TraceIn("joinType", 30);
		HqlSqlWalker.joinType_return retval = new HqlSqlWalker.joinType_return(this);
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode left = default(IASTNode);
		IASTNode right = default(IASTNode);
		IASTNode outer = default(IASTNode);
		IASTNode FULL72 = default(IASTNode);
		IASTNode INNER73 = default(IASTNode);

		IASTNode left_tree = default(IASTNode);
		IASTNode right_tree = default(IASTNode);
		IASTNode outer_tree = default(IASTNode);
		IASTNode FULL72_tree = default(IASTNode);
		IASTNode INNER73_tree = default(IASTNode);

		   retval.j = INNER;

		try { DebugEnterRule(GrammarFileName, "joinType");
		DebugLocation(269, 1);
		try
		{
			// HqlSqlWalker.g:273:2: ( ( (left= LEFT |right= RIGHT ) (outer= OUTER )? ) | FULL | INNER )
			int alt42=3;
			try { DebugEnterDecision(42, false);
			switch (input.LA(1))
			{
			case LEFT:
			case RIGHT:
				{
				alt42 = 1;
				}
				break;
			case FULL:
				{
				alt42 = 2;
				}
				break;
			case INNER:
				{
				alt42 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 42, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:273:4: ( (left= LEFT |right= RIGHT ) (outer= OUTER )? )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(273, 4);
				// HqlSqlWalker.g:273:4: ( (left= LEFT |right= RIGHT ) (outer= OUTER )? )
				DebugEnterAlt(1);
				// HqlSqlWalker.g:273:6: (left= LEFT |right= RIGHT ) (outer= OUTER )?
				{
				DebugLocation(273, 6);
				// HqlSqlWalker.g:273:6: (left= LEFT |right= RIGHT )
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, false);
				int LA40_1 = input.LA(1);

				if ((LA40_1==LEFT))
				{
					alt40 = 1;
				}
				else if ((LA40_1==RIGHT))
				{
					alt40 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 40, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:273:7: left= LEFT
					{
					DebugLocation(273, 11);

					_last = (IASTNode)input.LT(1);
					left=(IASTNode)Match(input,LEFT,Follow._LEFT_in_joinType1331); 
					left_tree = (IASTNode)adaptor.DupNode(left);


					adaptor.AddChild(root_0, left_tree);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// HqlSqlWalker.g:273:19: right= RIGHT
					{
					DebugLocation(273, 24);

					_last = (IASTNode)input.LT(1);
					right=(IASTNode)Match(input,RIGHT,Follow._RIGHT_in_joinType1337); 
					right_tree = (IASTNode)adaptor.DupNode(right);


					adaptor.AddChild(root_0, right_tree);


					}
					break;

				}
				} finally { DebugExitSubRule(40); }

				DebugLocation(273, 32);
				// HqlSqlWalker.g:273:32: (outer= OUTER )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, false);
				int LA41_1 = input.LA(1);

				if ((LA41_1==OUTER))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:273:33: outer= OUTER
					{
					DebugLocation(273, 38);

					_last = (IASTNode)input.LT(1);
					outer=(IASTNode)Match(input,OUTER,Follow._OUTER_in_joinType1343); 
					outer_tree = (IASTNode)adaptor.DupNode(outer);


					adaptor.AddChild(root_0, outer_tree);


					}
					break;

				}
				} finally { DebugExitSubRule(41); }

				DebugLocation(274, 2);

						if (left != null)       retval.j = LEFT_OUTER;
						else if (right != null) retval.j = RIGHT_OUTER;
						else if (outer != null) retval.j = RIGHT_OUTER;
					

				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:279:4: FULL
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(279, 4);

				_last = (IASTNode)input.LT(1);
				FULL72=(IASTNode)Match(input,FULL,Follow._FULL_in_joinType1357); 
				FULL72_tree = (IASTNode)adaptor.DupNode(FULL72);


				adaptor.AddChild(root_0, FULL72_tree);

				DebugLocation(279, 9);

						retval.j = FULL;
					

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:282:4: INNER
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(282, 4);

				_last = (IASTNode)input.LT(1);
				INNER73=(IASTNode)Match(input,INNER,Follow._INNER_in_joinType1364); 
				INNER73_tree = (IASTNode)adaptor.DupNode(INNER73);


				adaptor.AddChild(root_0, INNER73_tree);

				DebugLocation(282, 10);

						retval.j = INNER;
					

				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("joinType", 30);
			LeaveRule("joinType", 30);
			LeaveRule_joinType();
		}
		DebugLocation(285, 1);
		} finally { DebugExitRule(GrammarFileName, "joinType"); }
		return retval;

	}
	// $ANTLR end "joinType"

	private sealed partial class path_return : AstTreeRuleReturnScope<IASTNode, IASTNode>
	{
		public String p;
		public path_return(HqlSqlWalker grammar) {OnCreated(grammar);}
		partial void OnCreated(HqlSqlWalker grammar);
	}

	partial void EnterRule_path();
	partial void LeaveRule_path();
	// $ANTLR start "path"
	// HqlSqlWalker.g:289:1: path returns [String p] : (a= identifier | ^( DOT x= path y= identifier ) );
	[GrammarRule("path")]
	private HqlSqlWalker.path_return path()
	{
		EnterRule_path();
		EnterRule("path", 31);
		TraceIn("path", 31);
		HqlSqlWalker.path_return retval = new HqlSqlWalker.path_return(this);
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode DOT74 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> a = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> x = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> y = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode DOT74_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "path");
		DebugLocation(289, 1);
		try
		{
			// HqlSqlWalker.g:290:2: (a= identifier | ^( DOT x= path y= identifier ) )
			int alt43=2;
			try { DebugEnterDecision(43, false);
			int LA43_1 = input.LA(1);

			if ((LA43_1==IDENT||LA43_1==WEIRD_IDENT))
			{
				alt43 = 1;
			}
			else if ((LA43_1==DOT))
			{
				alt43 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 43, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:290:4: a= identifier
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(290, 5);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._identifier_in_path1386);
				a=identifier();
				PopFollow();

				adaptor.AddChild(root_0, a.Tree);

				DebugLocation(290, 17);
				 retval.p = (a!=null?((IASTNode)a.Start):default(IASTNode)).ToString();

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:291:4: ^( DOT x= path y= identifier )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(291, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(291, 6);

				_last = (IASTNode)input.LT(1);
				DOT74=(IASTNode)Match(input,DOT,Follow._DOT_in_path1394); 
				DOT74_tree = (IASTNode)adaptor.DupNode(DOT74);


				root_1 = (IASTNode)adaptor.BecomeRoot(DOT74_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(291, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._path_in_path1398);
				x=path();
				PopFollow();

				adaptor.AddChild(root_1, x.Tree);

				DebugLocation(291, 18);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._identifier_in_path1402);
				y=identifier();
				PopFollow();

				adaptor.AddChild(root_1, y.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(291, 31);

							StringBuilder buf = new StringBuilder();
							buf.Append((x!=null?((HqlSqlWalker.path_return)x).p:default(String))).Append('.').Append((y!=null?((IASTNode)y.Start):default(IASTNode)).ToString());
							retval.p = buf.ToString();
						

				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("path", 31);
			LeaveRule("path", 31);
			LeaveRule_path();
		}
		DebugLocation(296, 1);
		} finally { DebugExitRule(GrammarFileName, "path"); }
		return retval;

	}
	// $ANTLR end "path"

	partial void EnterRule_pathAsIdent();
	partial void LeaveRule_pathAsIdent();
	// $ANTLR start "pathAsIdent"
	// HqlSqlWalker.g:299:1: pathAsIdent : path -> ^( IDENT[$path.p] ) ;
	[GrammarRule("pathAsIdent")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> pathAsIdent()
	{
		EnterRule_pathAsIdent();
		EnterRule("pathAsIdent", 32);
		TraceIn("pathAsIdent", 32);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> path75 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		RewriteRuleSubtreeStream stream_path=new RewriteRuleSubtreeStream(adaptor,"rule path");
		try { DebugEnterRule(GrammarFileName, "pathAsIdent");
		DebugLocation(299, 4);
		try
		{
			// HqlSqlWalker.g:300:5: ( path -> ^( IDENT[$path.p] ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:300:7: path
			{
			DebugLocation(300, 7);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._path_in_pathAsIdent1421);
			path75=path();
			PopFollow();

			stream_path.Add(path75.Tree);


			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 301:5: -> ^( IDENT[$path.p] )
			{
				DebugLocation(301, 8);
				// HqlSqlWalker.g:301:8: ^( IDENT[$path.p] )
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(301, 10);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(IDENT, (path75!=null?((HqlSqlWalker.path_return)path75).p:default(String))), root_1);

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("pathAsIdent", 32);
			LeaveRule("pathAsIdent", 32);
			LeaveRule_pathAsIdent();
		}
		DebugLocation(302, 4);
		} finally { DebugExitRule(GrammarFileName, "pathAsIdent"); }
		return retval;

	}
	// $ANTLR end "pathAsIdent"

	partial void EnterRule_withClause();
	partial void LeaveRule_withClause();
	// $ANTLR start "withClause"
	// HqlSqlWalker.g:304:1: withClause : ^(w= WITH b= logicalExpr ) -> ^( $w $b) ;
	[GrammarRule("withClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> withClause()
	{
		EnterRule_withClause();
		EnterRule("withClause", 33);
		TraceIn("withClause", 33);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode w = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> b = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode w_tree = default(IASTNode);
		RewriteRuleNodeStream stream_WITH=new RewriteRuleNodeStream(adaptor,"token WITH");
		RewriteRuleSubtreeStream stream_logicalExpr=new RewriteRuleSubtreeStream(adaptor,"rule logicalExpr");
		try { DebugEnterRule(GrammarFileName, "withClause");
		DebugLocation(304, 1);
		try
		{
			// HqlSqlWalker.g:311:2: ( ^(w= WITH b= logicalExpr ) -> ^( $w $b) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:311:4: ^(w= WITH b= logicalExpr )
			{
			DebugLocation(311, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(311, 7);

			_last = (IASTNode)input.LT(1);
			w=(IASTNode)Match(input,WITH,Follow._WITH_in_withClause1462); 
			 
			stream_WITH.Add(w);


			DebugLocation(311, 13);
			 HandleClauseStart( WITH ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(311, 45);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._logicalExpr_in_withClause1468);
			b=logicalExpr();
			PopFollow();

			stream_logicalExpr.Add(b.Tree);

			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}



			{
			// AST REWRITE
			// elements: w, b
			// token labels: w
			// rule labels: b, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleNodeStream stream_w=new RewriteRuleNodeStream(adaptor,"token w",w);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 312:2: -> ^( $w $b)
			{
				DebugLocation(312, 5);
				// HqlSqlWalker.g:312:5: ^( $w $b)
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(312, 8);
				root_1 = (IASTNode)adaptor.BecomeRoot(stream_w.NextNode(), root_1);

				DebugLocation(312, 11);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("withClause", 33);
			LeaveRule("withClause", 33);
			LeaveRule_withClause();
			HandleClauseEnd( WITH );
		}
		DebugLocation(313, 1);
		} finally { DebugExitRule(GrammarFileName, "withClause"); }
		return retval;

	}
	// $ANTLR end "withClause"

	partial void EnterRule_whereClause();
	partial void LeaveRule_whereClause();
	// $ANTLR start "whereClause"
	// HqlSqlWalker.g:316:1: whereClause : ^(w= WHERE b= logicalExpr ) -> ^( $w $b) ;
	[GrammarRule("whereClause")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> whereClause()
	{
		EnterRule_whereClause();
		EnterRule("whereClause", 34);
		TraceIn("whereClause", 34);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode w = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> b = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode w_tree = default(IASTNode);
		RewriteRuleNodeStream stream_WHERE=new RewriteRuleNodeStream(adaptor,"token WHERE");
		RewriteRuleSubtreeStream stream_logicalExpr=new RewriteRuleSubtreeStream(adaptor,"rule logicalExpr");
		try { DebugEnterRule(GrammarFileName, "whereClause");
		DebugLocation(316, 1);
		try
		{
			// HqlSqlWalker.g:317:2: ( ^(w= WHERE b= logicalExpr ) -> ^( $w $b) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:317:4: ^(w= WHERE b= logicalExpr )
			{
			DebugLocation(317, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(317, 7);

			_last = (IASTNode)input.LT(1);
			w=(IASTNode)Match(input,WHERE,Follow._WHERE_in_whereClause1501); 
			 
			stream_WHERE.Add(w);


			DebugLocation(317, 14);
			 HandleClauseStart( WHERE ); 

			Match(input, TokenTypes.Down, null); 
			DebugLocation(317, 47);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._logicalExpr_in_whereClause1507);
			b=logicalExpr();
			PopFollow();

			stream_logicalExpr.Add(b.Tree);

			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}



			{
			// AST REWRITE
			// elements: w, b
			// token labels: w
			// rule labels: b, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleNodeStream stream_w=new RewriteRuleNodeStream(adaptor,"token w",w);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 318:2: -> ^( $w $b)
			{
				DebugLocation(318, 5);
				// HqlSqlWalker.g:318:5: ^( $w $b)
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(318, 8);
				root_1 = (IASTNode)adaptor.BecomeRoot(stream_w.NextNode(), root_1);

				DebugLocation(318, 11);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("whereClause", 34);
			LeaveRule("whereClause", 34);
			LeaveRule_whereClause();
			HandleClauseEnd( WHERE );
		}
		DebugLocation(319, 1);
		} finally { DebugExitRule(GrammarFileName, "whereClause"); }
		return retval;

	}
	// $ANTLR end "whereClause"

	partial void EnterRule_logicalExpr();
	partial void LeaveRule_logicalExpr();
	// $ANTLR start "logicalExpr"
	// HqlSqlWalker.g:322:1: logicalExpr : ( ^( AND logicalExpr logicalExpr ) | ^( OR logicalExpr logicalExpr ) | ^( NOT logicalExpr ) | comparisonExpr | functionCall | logicalPath );
	[GrammarRule("logicalExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> logicalExpr()
	{
		EnterRule_logicalExpr();
		EnterRule("logicalExpr", 35);
		TraceIn("logicalExpr", 35);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode AND76 = default(IASTNode);
		IASTNode OR79 = default(IASTNode);
		IASTNode NOT82 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> logicalExpr77 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> logicalExpr78 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> logicalExpr80 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> logicalExpr81 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> logicalExpr83 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> comparisonExpr84 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> functionCall85 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> logicalPath86 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode AND76_tree = default(IASTNode);
		IASTNode OR79_tree = default(IASTNode);
		IASTNode NOT82_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "logicalExpr");
		DebugLocation(322, 1);
		try
		{
			// HqlSqlWalker.g:323:2: ( ^( AND logicalExpr logicalExpr ) | ^( OR logicalExpr logicalExpr ) | ^( NOT logicalExpr ) | comparisonExpr | functionCall | logicalPath )
			int alt44=6;
			try { DebugEnterDecision(44, false);
			switch (input.LA(1))
			{
			case AND:
				{
				alt44 = 1;
				}
				break;
			case OR:
				{
				alt44 = 2;
				}
				break;
			case NOT:
				{
				alt44 = 3;
				}
				break;
			case BETWEEN:
			case EQ:
			case EXISTS:
			case GE:
			case GT:
			case IN:
			case IS_NOT_NULL:
			case IS_NULL:
			case LE:
			case LIKE:
			case LT:
			case NE:
			case NOT_BETWEEN:
			case NOT_IN:
			case NOT_LIKE:
				{
				alt44 = 4;
				}
				break;
			case AGGREGATE:
			case METHOD_CALL:
				{
				alt44 = 5;
				}
				break;
			case DOT:
			case IDENT:
			case INDEX_OP:
			case WEIRD_IDENT:
				{
				alt44 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 44, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:323:4: ^( AND logicalExpr logicalExpr )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(323, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(323, 6);

				_last = (IASTNode)input.LT(1);
				AND76=(IASTNode)Match(input,AND,Follow._AND_in_logicalExpr1538); 
				AND76_tree = (IASTNode)adaptor.DupNode(AND76);


				root_1 = (IASTNode)adaptor.BecomeRoot(AND76_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(323, 10);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._logicalExpr_in_logicalExpr1540);
				logicalExpr77=logicalExpr();
				PopFollow();

				adaptor.AddChild(root_1, logicalExpr77.Tree);

				DebugLocation(323, 22);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._logicalExpr_in_logicalExpr1542);
				logicalExpr78=logicalExpr();
				PopFollow();

				adaptor.AddChild(root_1, logicalExpr78.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:324:4: ^( OR logicalExpr logicalExpr )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(324, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(324, 6);

				_last = (IASTNode)input.LT(1);
				OR79=(IASTNode)Match(input,OR,Follow._OR_in_logicalExpr1549); 
				OR79_tree = (IASTNode)adaptor.DupNode(OR79);


				root_1 = (IASTNode)adaptor.BecomeRoot(OR79_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(324, 9);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._logicalExpr_in_logicalExpr1551);
				logicalExpr80=logicalExpr();
				PopFollow();

				adaptor.AddChild(root_1, logicalExpr80.Tree);

				DebugLocation(324, 21);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._logicalExpr_in_logicalExpr1553);
				logicalExpr81=logicalExpr();
				PopFollow();

				adaptor.AddChild(root_1, logicalExpr81.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:325:4: ^( NOT logicalExpr )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(325, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(325, 6);

				_last = (IASTNode)input.LT(1);
				NOT82=(IASTNode)Match(input,NOT,Follow._NOT_in_logicalExpr1560); 
				NOT82_tree = (IASTNode)adaptor.DupNode(NOT82);


				root_1 = (IASTNode)adaptor.BecomeRoot(NOT82_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(325, 10);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._logicalExpr_in_logicalExpr1562);
				logicalExpr83=logicalExpr();
				PopFollow();

				adaptor.AddChild(root_1, logicalExpr83.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:326:4: comparisonExpr
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(326, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._comparisonExpr_in_logicalExpr1568);
				comparisonExpr84=comparisonExpr();
				PopFollow();

				adaptor.AddChild(root_0, comparisonExpr84.Tree);


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// HqlSqlWalker.g:327:4: functionCall
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(327, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._functionCall_in_logicalExpr1573);
				functionCall85=functionCall();
				PopFollow();

				adaptor.AddChild(root_0, functionCall85.Tree);


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// HqlSqlWalker.g:328:4: logicalPath
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(328, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._logicalPath_in_logicalExpr1578);
				logicalPath86=logicalPath();
				PopFollow();

				adaptor.AddChild(root_0, logicalPath86.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalExpr", 35);
			LeaveRule("logicalExpr", 35);
			LeaveRule_logicalExpr();
		}
		DebugLocation(329, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalExpr"); }
		return retval;

	}
	// $ANTLR end "logicalExpr"

	partial void EnterRule_logicalPath();
	partial void LeaveRule_logicalPath();
	// $ANTLR start "logicalPath"
	// HqlSqlWalker.g:331:1: logicalPath : p= addrExpr[ true ] -> ^( EQ $p TRUE ) ;
	[GrammarRule("logicalPath")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> logicalPath()
	{
		EnterRule_logicalPath();
		EnterRule("logicalPath", 36);
		TraceIn("logicalPath", 36);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> p = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		RewriteRuleSubtreeStream stream_addrExpr=new RewriteRuleSubtreeStream(adaptor,"rule addrExpr");
		try { DebugEnterRule(GrammarFileName, "logicalPath");
		DebugLocation(331, 1);
		try
		{
			// HqlSqlWalker.g:335:2: (p= addrExpr[ true ] -> ^( EQ $p TRUE ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:335:4: p= addrExpr[ true ]
			{
			DebugLocation(335, 5);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._addrExpr_in_logicalPath1597);
			p=addrExpr(true);
			PopFollow();

			stream_addrExpr.Add(p.Tree);
			DebugLocation(335, 24);
			Resolve((p!=null?((IASTNode)p.Tree):default(IASTNode)));


			{
			// AST REWRITE
			// elements: p
			// token labels: 
			// rule labels: p, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"rule p",p!=null?p.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 335:45: -> ^( EQ $p TRUE )
			{
				DebugLocation(335, 48);
				// HqlSqlWalker.g:335:48: ^( EQ $p TRUE )
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(335, 50);
				root_1 = (IASTNode)adaptor.BecomeRoot((IASTNode)adaptor.Create(EQ, "EQ"), root_1);

				DebugLocation(335, 54);
				adaptor.AddChild(root_1, stream_p.NextTree());
				DebugLocation(335, 56);
				adaptor.AddChild(root_1, (IASTNode)adaptor.Create(TRUE, "TRUE"));

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


				    PrepareLogicOperator( retval.Tree );
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalPath", 36);
			LeaveRule("logicalPath", 36);
			LeaveRule_logicalPath();
		}
		DebugLocation(336, 1);
		} finally { DebugExitRule(GrammarFileName, "logicalPath"); }
		return retval;

	}
	// $ANTLR end "logicalPath"

	partial void EnterRule_comparisonExpr();
	partial void LeaveRule_comparisonExpr();
	// $ANTLR start "comparisonExpr"
	// HqlSqlWalker.g:339:1: comparisonExpr : ( ^( EQ exprOrSubquery exprOrSubquery ) | ^( NE exprOrSubquery exprOrSubquery ) | ^( LT exprOrSubquery exprOrSubquery ) | ^( GT exprOrSubquery exprOrSubquery ) | ^( LE exprOrSubquery exprOrSubquery ) | ^( GE exprOrSubquery exprOrSubquery ) | ^( LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? ) | ^( NOT_LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? ) | ^( BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery ) | ^( NOT_BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery ) | ^( IN exprOrSubquery inRhs ) | ^( NOT_IN exprOrSubquery inRhs ) | ^( IS_NULL exprOrSubquery ) | ^( IS_NOT_NULL exprOrSubquery ) | ^( EXISTS ( expr | collectionFunctionOrSubselect ) ) ) ;
	[GrammarRule("comparisonExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> comparisonExpr()
	{
		EnterRule_comparisonExpr();
		EnterRule("comparisonExpr", 37);
		TraceIn("comparisonExpr", 37);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode EQ87 = default(IASTNode);
		IASTNode NE90 = default(IASTNode);
		IASTNode LT93 = default(IASTNode);
		IASTNode GT96 = default(IASTNode);
		IASTNode LE99 = default(IASTNode);
		IASTNode GE102 = default(IASTNode);
		IASTNode LIKE105 = default(IASTNode);
		IASTNode ESCAPE108 = default(IASTNode);
		IASTNode NOT_LIKE110 = default(IASTNode);
		IASTNode ESCAPE113 = default(IASTNode);
		IASTNode BETWEEN115 = default(IASTNode);
		IASTNode NOT_BETWEEN119 = default(IASTNode);
		IASTNode IN123 = default(IASTNode);
		IASTNode NOT_IN126 = default(IASTNode);
		IASTNode IS_NULL129 = default(IASTNode);
		IASTNode IS_NOT_NULL131 = default(IASTNode);
		IASTNode EXISTS133 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery88 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery89 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery91 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery92 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery94 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery95 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery97 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery98 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery100 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery101 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery103 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery104 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery106 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr107 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr109 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery111 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr112 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr114 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery116 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery117 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery118 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery120 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery121 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery122 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery124 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> inRhs125 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery127 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> inRhs128 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery130 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery132 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr134 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunctionOrSubselect135 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode EQ87_tree = default(IASTNode);
		IASTNode NE90_tree = default(IASTNode);
		IASTNode LT93_tree = default(IASTNode);
		IASTNode GT96_tree = default(IASTNode);
		IASTNode LE99_tree = default(IASTNode);
		IASTNode GE102_tree = default(IASTNode);
		IASTNode LIKE105_tree = default(IASTNode);
		IASTNode ESCAPE108_tree = default(IASTNode);
		IASTNode NOT_LIKE110_tree = default(IASTNode);
		IASTNode ESCAPE113_tree = default(IASTNode);
		IASTNode BETWEEN115_tree = default(IASTNode);
		IASTNode NOT_BETWEEN119_tree = default(IASTNode);
		IASTNode IN123_tree = default(IASTNode);
		IASTNode NOT_IN126_tree = default(IASTNode);
		IASTNode IS_NULL129_tree = default(IASTNode);
		IASTNode IS_NOT_NULL131_tree = default(IASTNode);
		IASTNode EXISTS133_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "comparisonExpr");
		DebugLocation(339, 1);
		try
		{
			// HqlSqlWalker.g:343:2: ( ( ^( EQ exprOrSubquery exprOrSubquery ) | ^( NE exprOrSubquery exprOrSubquery ) | ^( LT exprOrSubquery exprOrSubquery ) | ^( GT exprOrSubquery exprOrSubquery ) | ^( LE exprOrSubquery exprOrSubquery ) | ^( GE exprOrSubquery exprOrSubquery ) | ^( LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? ) | ^( NOT_LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? ) | ^( BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery ) | ^( NOT_BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery ) | ^( IN exprOrSubquery inRhs ) | ^( NOT_IN exprOrSubquery inRhs ) | ^( IS_NULL exprOrSubquery ) | ^( IS_NOT_NULL exprOrSubquery ) | ^( EXISTS ( expr | collectionFunctionOrSubselect ) ) ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:344:2: ( ^( EQ exprOrSubquery exprOrSubquery ) | ^( NE exprOrSubquery exprOrSubquery ) | ^( LT exprOrSubquery exprOrSubquery ) | ^( GT exprOrSubquery exprOrSubquery ) | ^( LE exprOrSubquery exprOrSubquery ) | ^( GE exprOrSubquery exprOrSubquery ) | ^( LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? ) | ^( NOT_LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? ) | ^( BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery ) | ^( NOT_BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery ) | ^( IN exprOrSubquery inRhs ) | ^( NOT_IN exprOrSubquery inRhs ) | ^( IS_NULL exprOrSubquery ) | ^( IS_NOT_NULL exprOrSubquery ) | ^( EXISTS ( expr | collectionFunctionOrSubselect ) ) )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(344, 2);
			// HqlSqlWalker.g:344:2: ( ^( EQ exprOrSubquery exprOrSubquery ) | ^( NE exprOrSubquery exprOrSubquery ) | ^( LT exprOrSubquery exprOrSubquery ) | ^( GT exprOrSubquery exprOrSubquery ) | ^( LE exprOrSubquery exprOrSubquery ) | ^( GE exprOrSubquery exprOrSubquery ) | ^( LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? ) | ^( NOT_LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? ) | ^( BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery ) | ^( NOT_BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery ) | ^( IN exprOrSubquery inRhs ) | ^( NOT_IN exprOrSubquery inRhs ) | ^( IS_NULL exprOrSubquery ) | ^( IS_NOT_NULL exprOrSubquery ) | ^( EXISTS ( expr | collectionFunctionOrSubselect ) ) )
			int alt48=15;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, false);
			switch (input.LA(1))
			{
			case EQ:
				{
				alt48 = 1;
				}
				break;
			case NE:
				{
				alt48 = 2;
				}
				break;
			case LT:
				{
				alt48 = 3;
				}
				break;
			case GT:
				{
				alt48 = 4;
				}
				break;
			case LE:
				{
				alt48 = 5;
				}
				break;
			case GE:
				{
				alt48 = 6;
				}
				break;
			case LIKE:
				{
				alt48 = 7;
				}
				break;
			case NOT_LIKE:
				{
				alt48 = 8;
				}
				break;
			case BETWEEN:
				{
				alt48 = 9;
				}
				break;
			case NOT_BETWEEN:
				{
				alt48 = 10;
				}
				break;
			case IN:
				{
				alt48 = 11;
				}
				break;
			case NOT_IN:
				{
				alt48 = 12;
				}
				break;
			case IS_NULL:
				{
				alt48 = 13;
				}
				break;
			case IS_NOT_NULL:
				{
				alt48 = 14;
				}
				break;
			case EXISTS:
				{
				alt48 = 15;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 48, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:344:4: ^( EQ exprOrSubquery exprOrSubquery )
				{
				DebugLocation(344, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(344, 6);

				_last = (IASTNode)input.LT(1);
				EQ87=(IASTNode)Match(input,EQ,Follow._EQ_in_comparisonExpr1635); 
				EQ87_tree = (IASTNode)adaptor.DupNode(EQ87);


				root_1 = (IASTNode)adaptor.BecomeRoot(EQ87_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(344, 9);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1637);
				exprOrSubquery88=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery88.Tree);

				DebugLocation(344, 24);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1639);
				exprOrSubquery89=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery89.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:345:4: ^( NE exprOrSubquery exprOrSubquery )
				{
				DebugLocation(345, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(345, 6);

				_last = (IASTNode)input.LT(1);
				NE90=(IASTNode)Match(input,NE,Follow._NE_in_comparisonExpr1646); 
				NE90_tree = (IASTNode)adaptor.DupNode(NE90);


				root_1 = (IASTNode)adaptor.BecomeRoot(NE90_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(345, 9);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1648);
				exprOrSubquery91=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery91.Tree);

				DebugLocation(345, 24);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1650);
				exprOrSubquery92=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery92.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:346:4: ^( LT exprOrSubquery exprOrSubquery )
				{
				DebugLocation(346, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(346, 6);

				_last = (IASTNode)input.LT(1);
				LT93=(IASTNode)Match(input,LT,Follow._LT_in_comparisonExpr1657); 
				LT93_tree = (IASTNode)adaptor.DupNode(LT93);


				root_1 = (IASTNode)adaptor.BecomeRoot(LT93_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(346, 9);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1659);
				exprOrSubquery94=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery94.Tree);

				DebugLocation(346, 24);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1661);
				exprOrSubquery95=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery95.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:347:4: ^( GT exprOrSubquery exprOrSubquery )
				{
				DebugLocation(347, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(347, 6);

				_last = (IASTNode)input.LT(1);
				GT96=(IASTNode)Match(input,GT,Follow._GT_in_comparisonExpr1668); 
				GT96_tree = (IASTNode)adaptor.DupNode(GT96);


				root_1 = (IASTNode)adaptor.BecomeRoot(GT96_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(347, 9);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1670);
				exprOrSubquery97=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery97.Tree);

				DebugLocation(347, 24);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1672);
				exprOrSubquery98=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery98.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// HqlSqlWalker.g:348:4: ^( LE exprOrSubquery exprOrSubquery )
				{
				DebugLocation(348, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(348, 6);

				_last = (IASTNode)input.LT(1);
				LE99=(IASTNode)Match(input,LE,Follow._LE_in_comparisonExpr1679); 
				LE99_tree = (IASTNode)adaptor.DupNode(LE99);


				root_1 = (IASTNode)adaptor.BecomeRoot(LE99_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(348, 9);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1681);
				exprOrSubquery100=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery100.Tree);

				DebugLocation(348, 24);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1683);
				exprOrSubquery101=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery101.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// HqlSqlWalker.g:349:4: ^( GE exprOrSubquery exprOrSubquery )
				{
				DebugLocation(349, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(349, 6);

				_last = (IASTNode)input.LT(1);
				GE102=(IASTNode)Match(input,GE,Follow._GE_in_comparisonExpr1690); 
				GE102_tree = (IASTNode)adaptor.DupNode(GE102);


				root_1 = (IASTNode)adaptor.BecomeRoot(GE102_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(349, 9);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1692);
				exprOrSubquery103=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery103.Tree);

				DebugLocation(349, 24);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1694);
				exprOrSubquery104=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery104.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// HqlSqlWalker.g:350:4: ^( LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? )
				{
				DebugLocation(350, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(350, 6);

				_last = (IASTNode)input.LT(1);
				LIKE105=(IASTNode)Match(input,LIKE,Follow._LIKE_in_comparisonExpr1701); 
				LIKE105_tree = (IASTNode)adaptor.DupNode(LIKE105);


				root_1 = (IASTNode)adaptor.BecomeRoot(LIKE105_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(350, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1703);
				exprOrSubquery106=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery106.Tree);

				DebugLocation(350, 26);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._expr_in_comparisonExpr1705);
				expr107=expr();
				PopFollow();

				adaptor.AddChild(root_1, expr107.Tree);

				DebugLocation(350, 31);
				// HqlSqlWalker.g:350:31: ( ^( ESCAPE expr ) )?
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, false);
				int LA45_1 = input.LA(1);

				if ((LA45_1==ESCAPE))
				{
					alt45 = 1;
				}
				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:350:33: ^( ESCAPE expr )
					{
					DebugLocation(350, 33);

					_last = (IASTNode)input.LT(1);
					{
					IASTNode _save_last_2 = _last;
					IASTNode _first_2 = default(IASTNode);
					IASTNode root_2 = (IASTNode)adaptor.Nil();
					DebugLocation(350, 35);

					_last = (IASTNode)input.LT(1);
					ESCAPE108=(IASTNode)Match(input,ESCAPE,Follow._ESCAPE_in_comparisonExpr1710); 
					ESCAPE108_tree = (IASTNode)adaptor.DupNode(ESCAPE108);


					root_2 = (IASTNode)adaptor.BecomeRoot(ESCAPE108_tree, root_2);


					Match(input, TokenTypes.Down, null); 
					DebugLocation(350, 42);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._expr_in_comparisonExpr1712);
					expr109=expr();
					PopFollow();

					adaptor.AddChild(root_2, expr109.Tree);


					Match(input, TokenTypes.Up, null); 
					adaptor.AddChild(root_1, root_2);
					_last = _save_last_2;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(45); }


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// HqlSqlWalker.g:351:4: ^( NOT_LIKE exprOrSubquery expr ( ^( ESCAPE expr ) )? )
				{
				DebugLocation(351, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(351, 6);

				_last = (IASTNode)input.LT(1);
				NOT_LIKE110=(IASTNode)Match(input,NOT_LIKE,Follow._NOT_LIKE_in_comparisonExpr1724); 
				NOT_LIKE110_tree = (IASTNode)adaptor.DupNode(NOT_LIKE110);


				root_1 = (IASTNode)adaptor.BecomeRoot(NOT_LIKE110_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(351, 15);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1726);
				exprOrSubquery111=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery111.Tree);

				DebugLocation(351, 30);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._expr_in_comparisonExpr1728);
				expr112=expr();
				PopFollow();

				adaptor.AddChild(root_1, expr112.Tree);

				DebugLocation(351, 35);
				// HqlSqlWalker.g:351:35: ( ^( ESCAPE expr ) )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, false);
				int LA46_1 = input.LA(1);

				if ((LA46_1==ESCAPE))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:351:37: ^( ESCAPE expr )
					{
					DebugLocation(351, 37);

					_last = (IASTNode)input.LT(1);
					{
					IASTNode _save_last_2 = _last;
					IASTNode _first_2 = default(IASTNode);
					IASTNode root_2 = (IASTNode)adaptor.Nil();
					DebugLocation(351, 39);

					_last = (IASTNode)input.LT(1);
					ESCAPE113=(IASTNode)Match(input,ESCAPE,Follow._ESCAPE_in_comparisonExpr1733); 
					ESCAPE113_tree = (IASTNode)adaptor.DupNode(ESCAPE113);


					root_2 = (IASTNode)adaptor.BecomeRoot(ESCAPE113_tree, root_2);


					Match(input, TokenTypes.Down, null); 
					DebugLocation(351, 46);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._expr_in_comparisonExpr1735);
					expr114=expr();
					PopFollow();

					adaptor.AddChild(root_2, expr114.Tree);


					Match(input, TokenTypes.Up, null); 
					adaptor.AddChild(root_1, root_2);
					_last = _save_last_2;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(46); }


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// HqlSqlWalker.g:352:4: ^( BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery )
				{
				DebugLocation(352, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(352, 6);

				_last = (IASTNode)input.LT(1);
				BETWEEN115=(IASTNode)Match(input,BETWEEN,Follow._BETWEEN_in_comparisonExpr1747); 
				BETWEEN115_tree = (IASTNode)adaptor.DupNode(BETWEEN115);


				root_1 = (IASTNode)adaptor.BecomeRoot(BETWEEN115_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(352, 14);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1749);
				exprOrSubquery116=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery116.Tree);

				DebugLocation(352, 29);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1751);
				exprOrSubquery117=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery117.Tree);

				DebugLocation(352, 44);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1753);
				exprOrSubquery118=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery118.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// HqlSqlWalker.g:353:4: ^( NOT_BETWEEN exprOrSubquery exprOrSubquery exprOrSubquery )
				{
				DebugLocation(353, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(353, 6);

				_last = (IASTNode)input.LT(1);
				NOT_BETWEEN119=(IASTNode)Match(input,NOT_BETWEEN,Follow._NOT_BETWEEN_in_comparisonExpr1760); 
				NOT_BETWEEN119_tree = (IASTNode)adaptor.DupNode(NOT_BETWEEN119);


				root_1 = (IASTNode)adaptor.BecomeRoot(NOT_BETWEEN119_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(353, 18);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1762);
				exprOrSubquery120=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery120.Tree);

				DebugLocation(353, 33);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1764);
				exprOrSubquery121=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery121.Tree);

				DebugLocation(353, 48);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1766);
				exprOrSubquery122=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery122.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 11:
				DebugEnterAlt(11);
				// HqlSqlWalker.g:354:4: ^( IN exprOrSubquery inRhs )
				{
				DebugLocation(354, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(354, 6);

				_last = (IASTNode)input.LT(1);
				IN123=(IASTNode)Match(input,IN,Follow._IN_in_comparisonExpr1773); 
				IN123_tree = (IASTNode)adaptor.DupNode(IN123);


				root_1 = (IASTNode)adaptor.BecomeRoot(IN123_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(354, 9);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1775);
				exprOrSubquery124=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery124.Tree);

				DebugLocation(354, 24);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._inRhs_in_comparisonExpr1777);
				inRhs125=inRhs();
				PopFollow();

				adaptor.AddChild(root_1, inRhs125.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 12:
				DebugEnterAlt(12);
				// HqlSqlWalker.g:355:4: ^( NOT_IN exprOrSubquery inRhs )
				{
				DebugLocation(355, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(355, 6);

				_last = (IASTNode)input.LT(1);
				NOT_IN126=(IASTNode)Match(input,NOT_IN,Follow._NOT_IN_in_comparisonExpr1785); 
				NOT_IN126_tree = (IASTNode)adaptor.DupNode(NOT_IN126);


				root_1 = (IASTNode)adaptor.BecomeRoot(NOT_IN126_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(355, 13);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1787);
				exprOrSubquery127=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery127.Tree);

				DebugLocation(355, 28);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._inRhs_in_comparisonExpr1789);
				inRhs128=inRhs();
				PopFollow();

				adaptor.AddChild(root_1, inRhs128.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 13:
				DebugEnterAlt(13);
				// HqlSqlWalker.g:356:4: ^( IS_NULL exprOrSubquery )
				{
				DebugLocation(356, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(356, 6);

				_last = (IASTNode)input.LT(1);
				IS_NULL129=(IASTNode)Match(input,IS_NULL,Follow._IS_NULL_in_comparisonExpr1797); 
				IS_NULL129_tree = (IASTNode)adaptor.DupNode(IS_NULL129);


				root_1 = (IASTNode)adaptor.BecomeRoot(IS_NULL129_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(356, 14);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1799);
				exprOrSubquery130=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery130.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 14:
				DebugEnterAlt(14);
				// HqlSqlWalker.g:357:4: ^( IS_NOT_NULL exprOrSubquery )
				{
				DebugLocation(357, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(357, 6);

				_last = (IASTNode)input.LT(1);
				IS_NOT_NULL131=(IASTNode)Match(input,IS_NOT_NULL,Follow._IS_NOT_NULL_in_comparisonExpr1806); 
				IS_NOT_NULL131_tree = (IASTNode)adaptor.DupNode(IS_NOT_NULL131);


				root_1 = (IASTNode)adaptor.BecomeRoot(IS_NOT_NULL131_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(357, 18);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_comparisonExpr1808);
				exprOrSubquery132=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery132.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 15:
				DebugEnterAlt(15);
				// HqlSqlWalker.g:360:4: ^( EXISTS ( expr | collectionFunctionOrSubselect ) )
				{
				DebugLocation(360, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(360, 6);

				_last = (IASTNode)input.LT(1);
				EXISTS133=(IASTNode)Match(input,EXISTS,Follow._EXISTS_in_comparisonExpr1817); 
				EXISTS133_tree = (IASTNode)adaptor.DupNode(EXISTS133);


				root_1 = (IASTNode)adaptor.BecomeRoot(EXISTS133_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(360, 13);
				// HqlSqlWalker.g:360:13: ( expr | collectionFunctionOrSubselect )
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				int LA47_1 = input.LA(1);

				if ((LA47_1==AGGREGATE||LA47_1==BAND||(LA47_1>=BNOT && LA47_1<=BOR)||(LA47_1>=BXOR && LA47_1<=CASE2)||LA47_1==COLON||LA47_1==COUNT||(LA47_1>=DIV && LA47_1<=DOT)||LA47_1==FALSE||LA47_1==IDENT||LA47_1==INDEX_OP||LA47_1==JAVA_CONSTANT||LA47_1==METHOD_CALL||LA47_1==MINUS||(LA47_1>=NULL && LA47_1<=NUM_LONG)||(LA47_1>=PARAM && LA47_1<=PLUS)||LA47_1==QUOTED_String||LA47_1==STAR||(LA47_1>=TRUE && LA47_1<=UNARY_MINUS)||LA47_1==VECTOR_EXPR||LA47_1==WEIRD_IDENT))
				{
					alt47 = 1;
				}
				else if ((LA47_1==ELEMENTS||LA47_1==INDICES||LA47_1==QUERY||LA47_1==UNION))
				{
					alt47 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 47, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:360:15: expr
					{
					DebugLocation(360, 15);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._expr_in_comparisonExpr1821);
					expr134=expr();
					PopFollow();

					adaptor.AddChild(root_1, expr134.Tree);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// HqlSqlWalker.g:360:22: collectionFunctionOrSubselect
					{
					DebugLocation(360, 22);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._collectionFunctionOrSubselect_in_comparisonExpr1825);
					collectionFunctionOrSubselect135=collectionFunctionOrSubselect();
					PopFollow();

					adaptor.AddChild(root_1, collectionFunctionOrSubselect135.Tree);


					}
					break;

				}
				} finally { DebugExitSubRule(47); }


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(48); }


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


				    PrepareLogicOperator( retval.Tree );
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("comparisonExpr", 37);
			LeaveRule("comparisonExpr", 37);
			LeaveRule_comparisonExpr();
		}
		DebugLocation(362, 1);
		} finally { DebugExitRule(GrammarFileName, "comparisonExpr"); }
		return retval;

	}
	// $ANTLR end "comparisonExpr"

	partial void EnterRule_inRhs();
	partial void LeaveRule_inRhs();
	// $ANTLR start "inRhs"
	// HqlSqlWalker.g:364:1: inRhs : ^( IN_LIST ( collectionFunctionOrSubselect | ( expr )* ) ) ;
	[GrammarRule("inRhs")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> inRhs()
	{
		EnterRule_inRhs();
		EnterRule("inRhs", 38);
		TraceIn("inRhs", 38);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode IN_LIST136 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunctionOrSubselect137 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr138 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode IN_LIST136_tree = default(IASTNode);
			int UP = 99999;		// TODO - added this to get compile working.  It's bogus & should be removed
			
		try { DebugEnterRule(GrammarFileName, "inRhs");
		DebugLocation(364, 1);
		try
		{
			// HqlSqlWalker.g:366:2: ( ^( IN_LIST ( collectionFunctionOrSubselect | ( expr )* ) ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:366:4: ^( IN_LIST ( collectionFunctionOrSubselect | ( expr )* ) )
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(366, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(366, 6);

			_last = (IASTNode)input.LT(1);
			IN_LIST136=(IASTNode)Match(input,IN_LIST,Follow._IN_LIST_in_inRhs1849); 
			IN_LIST136_tree = (IASTNode)adaptor.DupNode(IN_LIST136);


			root_1 = (IASTNode)adaptor.BecomeRoot(IN_LIST136_tree, root_1);


			if (input.LA(1) == TokenTypes.Down) {
				Match(input, TokenTypes.Down, null); 
				DebugLocation(366, 14);
				// HqlSqlWalker.g:366:14: ( collectionFunctionOrSubselect | ( expr )* )
				int alt50=2;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				int LA50_1 = input.LA(1);

				if ((LA50_1==ELEMENTS||LA50_1==INDICES||LA50_1==QUERY||LA50_1==UNION))
				{
					alt50 = 1;
				}
				else if (((LA50_1>=UP && LA50_1<=AGGREGATE)||LA50_1==BAND||(LA50_1>=BNOT && LA50_1<=BOR)||(LA50_1>=BXOR && LA50_1<=CASE2)||LA50_1==COLON||LA50_1==COUNT||(LA50_1>=DIV && LA50_1<=DOT)||LA50_1==FALSE||LA50_1==IDENT||LA50_1==INDEX_OP||LA50_1==JAVA_CONSTANT||LA50_1==METHOD_CALL||LA50_1==MINUS||(LA50_1>=NULL && LA50_1<=NUM_LONG)||(LA50_1>=PARAM && LA50_1<=PLUS)||LA50_1==QUOTED_String||LA50_1==STAR||(LA50_1>=TRUE && LA50_1<=UNARY_MINUS)||LA50_1==VECTOR_EXPR||LA50_1==WEIRD_IDENT))
				{
					alt50 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 50, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:366:16: collectionFunctionOrSubselect
					{
					DebugLocation(366, 16);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._collectionFunctionOrSubselect_in_inRhs1853);
					collectionFunctionOrSubselect137=collectionFunctionOrSubselect();
					PopFollow();

					adaptor.AddChild(root_1, collectionFunctionOrSubselect137.Tree);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// HqlSqlWalker.g:366:48: ( expr )*
					{
					DebugLocation(366, 48);
					// HqlSqlWalker.g:366:48: ( expr )*
					try { DebugEnterSubRule(49);
					while (true)
					{
						int alt49=2;
						try { DebugEnterDecision(49, false);
						int LA49_1 = input.LA(1);

						if ((LA49_1==AGGREGATE||LA49_1==BAND||(LA49_1>=BNOT && LA49_1<=BOR)||(LA49_1>=BXOR && LA49_1<=CASE2)||LA49_1==COLON||LA49_1==COUNT||(LA49_1>=DIV && LA49_1<=DOT)||LA49_1==FALSE||LA49_1==IDENT||LA49_1==INDEX_OP||LA49_1==JAVA_CONSTANT||LA49_1==METHOD_CALL||LA49_1==MINUS||(LA49_1>=NULL && LA49_1<=NUM_LONG)||(LA49_1>=PARAM && LA49_1<=PLUS)||LA49_1==QUOTED_String||LA49_1==STAR||(LA49_1>=TRUE && LA49_1<=UNARY_MINUS)||LA49_1==VECTOR_EXPR||LA49_1==WEIRD_IDENT))
						{
							alt49 = 1;
						}


						} finally { DebugExitDecision(49); }
						switch ( alt49 )
						{
						case 1:
							DebugEnterAlt(1);
							// HqlSqlWalker.g:366:48: expr
							{
							DebugLocation(366, 48);

							_last = (IASTNode)input.LT(1);
							PushFollow(Follow._expr_in_inRhs1857);
							expr138=expr();
							PopFollow();

							adaptor.AddChild(root_1, expr138.Tree);


							}
							break;

						default:
							goto loop49;
						}
					}

					loop49:
						;

					} finally { DebugExitSubRule(49); }


					}
					break;

				}
				} finally { DebugExitSubRule(50); }


				Match(input, TokenTypes.Up, null); 
			}
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("inRhs", 38);
			LeaveRule("inRhs", 38);
			LeaveRule_inRhs();
		}
		DebugLocation(367, 1);
		} finally { DebugExitRule(GrammarFileName, "inRhs"); }
		return retval;

	}
	// $ANTLR end "inRhs"

	partial void EnterRule_exprOrSubquery();
	partial void LeaveRule_exprOrSubquery();
	// $ANTLR start "exprOrSubquery"
	// HqlSqlWalker.g:369:1: exprOrSubquery : ( expr | query | ^( ANY collectionFunctionOrSubselect ) | ^( ALL collectionFunctionOrSubselect ) | ^( SOME collectionFunctionOrSubselect ) );
	[GrammarRule("exprOrSubquery")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery()
	{
		EnterRule_exprOrSubquery();
		EnterRule("exprOrSubquery", 39);
		TraceIn("exprOrSubquery", 39);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode ANY141 = default(IASTNode);
		IASTNode ALL143 = default(IASTNode);
		IASTNode SOME145 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr139 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> query140 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunctionOrSubselect142 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunctionOrSubselect144 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunctionOrSubselect146 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode ANY141_tree = default(IASTNode);
		IASTNode ALL143_tree = default(IASTNode);
		IASTNode SOME145_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "exprOrSubquery");
		DebugLocation(369, 1);
		try
		{
			// HqlSqlWalker.g:370:2: ( expr | query | ^( ANY collectionFunctionOrSubselect ) | ^( ALL collectionFunctionOrSubselect ) | ^( SOME collectionFunctionOrSubselect ) )
			int alt51=5;
			try { DebugEnterDecision(51, false);
			switch (input.LA(1))
			{
			case AGGREGATE:
			case BAND:
			case BNOT:
			case BOR:
			case BXOR:
			case CASE:
			case CASE2:
			case COLON:
			case COUNT:
			case DIV:
			case DOT:
			case FALSE:
			case IDENT:
			case INDEX_OP:
			case JAVA_CONSTANT:
			case METHOD_CALL:
			case MINUS:
			case NULL:
			case NUM_DECIMAL:
			case NUM_DOUBLE:
			case NUM_FLOAT:
			case NUM_INT:
			case NUM_LONG:
			case PARAM:
			case PLUS:
			case QUOTED_String:
			case STAR:
			case TRUE:
			case UNARY_MINUS:
			case VECTOR_EXPR:
			case WEIRD_IDENT:
				{
				alt51 = 1;
				}
				break;
			case QUERY:
			case UNION:
				{
				alt51 = 2;
				}
				break;
			case ANY:
				{
				alt51 = 3;
				}
				break;
			case ALL:
				{
				alt51 = 4;
				}
				break;
			case SOME:
				{
				alt51 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 51, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:370:4: expr
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(370, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._expr_in_exprOrSubquery1873);
				expr139=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr139.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:371:4: query
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(371, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._query_in_exprOrSubquery1878);
				query140=query();
				PopFollow();

				adaptor.AddChild(root_0, query140.Tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:372:4: ^( ANY collectionFunctionOrSubselect )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(372, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(372, 6);

				_last = (IASTNode)input.LT(1);
				ANY141=(IASTNode)Match(input,ANY,Follow._ANY_in_exprOrSubquery1884); 
				ANY141_tree = (IASTNode)adaptor.DupNode(ANY141);


				root_1 = (IASTNode)adaptor.BecomeRoot(ANY141_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(372, 10);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._collectionFunctionOrSubselect_in_exprOrSubquery1886);
				collectionFunctionOrSubselect142=collectionFunctionOrSubselect();
				PopFollow();

				adaptor.AddChild(root_1, collectionFunctionOrSubselect142.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:373:4: ^( ALL collectionFunctionOrSubselect )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(373, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(373, 6);

				_last = (IASTNode)input.LT(1);
				ALL143=(IASTNode)Match(input,ALL,Follow._ALL_in_exprOrSubquery1893); 
				ALL143_tree = (IASTNode)adaptor.DupNode(ALL143);


				root_1 = (IASTNode)adaptor.BecomeRoot(ALL143_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(373, 10);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._collectionFunctionOrSubselect_in_exprOrSubquery1895);
				collectionFunctionOrSubselect144=collectionFunctionOrSubselect();
				PopFollow();

				adaptor.AddChild(root_1, collectionFunctionOrSubselect144.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// HqlSqlWalker.g:374:4: ^( SOME collectionFunctionOrSubselect )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(374, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(374, 6);

				_last = (IASTNode)input.LT(1);
				SOME145=(IASTNode)Match(input,SOME,Follow._SOME_in_exprOrSubquery1902); 
				SOME145_tree = (IASTNode)adaptor.DupNode(SOME145);


				root_1 = (IASTNode)adaptor.BecomeRoot(SOME145_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(374, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._collectionFunctionOrSubselect_in_exprOrSubquery1904);
				collectionFunctionOrSubselect146=collectionFunctionOrSubselect();
				PopFollow();

				adaptor.AddChild(root_1, collectionFunctionOrSubselect146.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("exprOrSubquery", 39);
			LeaveRule("exprOrSubquery", 39);
			LeaveRule_exprOrSubquery();
		}
		DebugLocation(375, 1);
		} finally { DebugExitRule(GrammarFileName, "exprOrSubquery"); }
		return retval;

	}
	// $ANTLR end "exprOrSubquery"

	partial void EnterRule_collectionFunctionOrSubselect();
	partial void LeaveRule_collectionFunctionOrSubselect();
	// $ANTLR start "collectionFunctionOrSubselect"
	// HqlSqlWalker.g:377:1: collectionFunctionOrSubselect : ( collectionFunction | query );
	[GrammarRule("collectionFunctionOrSubselect")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunctionOrSubselect()
	{
		EnterRule_collectionFunctionOrSubselect();
		EnterRule("collectionFunctionOrSubselect", 40);
		TraceIn("collectionFunctionOrSubselect", 40);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunction147 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> query148 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "collectionFunctionOrSubselect");
		DebugLocation(377, 1);
		try
		{
			// HqlSqlWalker.g:378:2: ( collectionFunction | query )
			int alt52=2;
			try { DebugEnterDecision(52, false);
			int LA52_1 = input.LA(1);

			if ((LA52_1==ELEMENTS||LA52_1==INDICES))
			{
				alt52 = 1;
			}
			else if ((LA52_1==QUERY||LA52_1==UNION))
			{
				alt52 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 52, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:378:4: collectionFunction
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(378, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._collectionFunction_in_collectionFunctionOrSubselect1917);
				collectionFunction147=collectionFunction();
				PopFollow();

				adaptor.AddChild(root_0, collectionFunction147.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:379:4: query
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(379, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._query_in_collectionFunctionOrSubselect1922);
				query148=query();
				PopFollow();

				adaptor.AddChild(root_0, query148.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionFunctionOrSubselect", 40);
			LeaveRule("collectionFunctionOrSubselect", 40);
			LeaveRule_collectionFunctionOrSubselect();
		}
		DebugLocation(380, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionFunctionOrSubselect"); }
		return retval;

	}
	// $ANTLR end "collectionFunctionOrSubselect"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();
	// $ANTLR start "expr"
	// HqlSqlWalker.g:382:1: expr : (ae= addrExpr[ true ] | ^( VECTOR_EXPR ( expr )* ) | constant | arithmeticExpr | functionCall | parameter | count );
	[GrammarRule("expr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 41);
		TraceIn("expr", 41);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode VECTOR_EXPR149 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> ae = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr150 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> constant151 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> arithmeticExpr152 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> functionCall153 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> parameter154 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> count155 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode VECTOR_EXPR149_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(382, 1);
		try
		{
			// HqlSqlWalker.g:383:2: (ae= addrExpr[ true ] | ^( VECTOR_EXPR ( expr )* ) | constant | arithmeticExpr | functionCall | parameter | count )
			int alt54=7;
			try { DebugEnterDecision(54, false);
			switch (input.LA(1))
			{
			case DOT:
			case IDENT:
			case INDEX_OP:
			case WEIRD_IDENT:
				{
				alt54 = 1;
				}
				break;
			case VECTOR_EXPR:
				{
				alt54 = 2;
				}
				break;
			case FALSE:
			case JAVA_CONSTANT:
			case NULL:
			case NUM_DECIMAL:
			case NUM_DOUBLE:
			case NUM_FLOAT:
			case NUM_INT:
			case NUM_LONG:
			case QUOTED_String:
			case TRUE:
				{
				alt54 = 3;
				}
				break;
			case BAND:
			case BNOT:
			case BOR:
			case BXOR:
			case CASE:
			case CASE2:
			case DIV:
			case MINUS:
			case PLUS:
			case STAR:
			case UNARY_MINUS:
				{
				alt54 = 4;
				}
				break;
			case AGGREGATE:
			case METHOD_CALL:
				{
				alt54 = 5;
				}
				break;
			case COLON:
			case PARAM:
				{
				alt54 = 6;
				}
				break;
			case COUNT:
				{
				alt54 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 54, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:383:4: ae= addrExpr[ true ]
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(383, 6);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._addrExpr_in_expr1936);
				ae=addrExpr(true);
				PopFollow();

				adaptor.AddChild(root_0, ae.Tree);

				DebugLocation(383, 25);
				 Resolve((ae!=null?((IASTNode)ae.Tree):default(IASTNode))); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:384:4: ^( VECTOR_EXPR ( expr )* )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(384, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(384, 7);

				_last = (IASTNode)input.LT(1);
				VECTOR_EXPR149=(IASTNode)Match(input,VECTOR_EXPR,Follow._VECTOR_EXPR_in_expr1948); 
				VECTOR_EXPR149_tree = (IASTNode)adaptor.DupNode(VECTOR_EXPR149);


				root_1 = (IASTNode)adaptor.BecomeRoot(VECTOR_EXPR149_tree, root_1);


				if (input.LA(1) == TokenTypes.Down) {
					Match(input, TokenTypes.Down, null); 
					DebugLocation(384, 19);
					// HqlSqlWalker.g:384:19: ( expr )*
					try { DebugEnterSubRule(53);
					while (true)
					{
						int alt53=2;
						try { DebugEnterDecision(53, false);
						int LA53_1 = input.LA(1);

						if ((LA53_1==AGGREGATE||LA53_1==BAND||(LA53_1>=BNOT && LA53_1<=BOR)||(LA53_1>=BXOR && LA53_1<=CASE2)||LA53_1==COLON||LA53_1==COUNT||(LA53_1>=DIV && LA53_1<=DOT)||LA53_1==FALSE||LA53_1==IDENT||LA53_1==INDEX_OP||LA53_1==JAVA_CONSTANT||LA53_1==METHOD_CALL||LA53_1==MINUS||(LA53_1>=NULL && LA53_1<=NUM_LONG)||(LA53_1>=PARAM && LA53_1<=PLUS)||LA53_1==QUOTED_String||LA53_1==STAR||(LA53_1>=TRUE && LA53_1<=UNARY_MINUS)||LA53_1==VECTOR_EXPR||LA53_1==WEIRD_IDENT))
						{
							alt53 = 1;
						}


						} finally { DebugExitDecision(53); }
						switch ( alt53 )
						{
						case 1:
							DebugEnterAlt(1);
							// HqlSqlWalker.g:384:20: expr
							{
							DebugLocation(384, 20);

							_last = (IASTNode)input.LT(1);
							PushFollow(Follow._expr_in_expr1951);
							expr150=expr();
							PopFollow();

							adaptor.AddChild(root_1, expr150.Tree);


							}
							break;

						default:
							goto loop53;
						}
					}

					loop53:
						;

					} finally { DebugExitSubRule(53); }


					Match(input, TokenTypes.Up, null); 
				}
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:385:4: constant
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(385, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._constant_in_expr1960);
				constant151=constant();
				PopFollow();

				adaptor.AddChild(root_0, constant151.Tree);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:386:4: arithmeticExpr
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(386, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._arithmeticExpr_in_expr1965);
				arithmeticExpr152=arithmeticExpr();
				PopFollow();

				adaptor.AddChild(root_0, arithmeticExpr152.Tree);


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// HqlSqlWalker.g:387:4: functionCall
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(387, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._functionCall_in_expr1970);
				functionCall153=functionCall();
				PopFollow();

				adaptor.AddChild(root_0, functionCall153.Tree);


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// HqlSqlWalker.g:388:4: parameter
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(388, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._parameter_in_expr1982);
				parameter154=parameter();
				PopFollow();

				adaptor.AddChild(root_0, parameter154.Tree);


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// HqlSqlWalker.g:389:4: count
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(389, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._count_in_expr1987);
				count155=count();
				PopFollow();

				adaptor.AddChild(root_0, count155.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expr", 41);
			LeaveRule("expr", 41);
			LeaveRule_expr();
		}
		DebugLocation(390, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_arithmeticExpr();
	partial void LeaveRule_arithmeticExpr();
	// $ANTLR start "arithmeticExpr"
	// HqlSqlWalker.g:392:1: arithmeticExpr : ( ^( PLUS exprOrSubquery exprOrSubquery ) | ^( MINUS exprOrSubquery exprOrSubquery ) | ^( DIV exprOrSubquery exprOrSubquery ) | ^( STAR exprOrSubquery exprOrSubquery ) | ^( BNOT exprOrSubquery ) | ^( BAND exprOrSubquery exprOrSubquery ) | ^( BOR exprOrSubquery exprOrSubquery ) | ^( BXOR exprOrSubquery exprOrSubquery ) | ^( UNARY_MINUS exprOrSubquery ) |c= caseExpr );
	[GrammarRule("arithmeticExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> arithmeticExpr()
	{
		EnterRule_arithmeticExpr();
		EnterRule("arithmeticExpr", 42);
		TraceIn("arithmeticExpr", 42);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode PLUS156 = default(IASTNode);
		IASTNode MINUS159 = default(IASTNode);
		IASTNode DIV162 = default(IASTNode);
		IASTNode STAR165 = default(IASTNode);
		IASTNode BNOT168 = default(IASTNode);
		IASTNode BAND170 = default(IASTNode);
		IASTNode BOR173 = default(IASTNode);
		IASTNode BXOR176 = default(IASTNode);
		IASTNode UNARY_MINUS179 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> c = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery157 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery158 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery160 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery161 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery163 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery164 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery166 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery167 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery169 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery171 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery172 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery174 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery175 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery177 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery178 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> exprOrSubquery180 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode PLUS156_tree = default(IASTNode);
		IASTNode MINUS159_tree = default(IASTNode);
		IASTNode DIV162_tree = default(IASTNode);
		IASTNode STAR165_tree = default(IASTNode);
		IASTNode BNOT168_tree = default(IASTNode);
		IASTNode BAND170_tree = default(IASTNode);
		IASTNode BOR173_tree = default(IASTNode);
		IASTNode BXOR176_tree = default(IASTNode);
		IASTNode UNARY_MINUS179_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "arithmeticExpr");
		DebugLocation(392, 1);
		try
		{
			// HqlSqlWalker.g:399:2: ( ^( PLUS exprOrSubquery exprOrSubquery ) | ^( MINUS exprOrSubquery exprOrSubquery ) | ^( DIV exprOrSubquery exprOrSubquery ) | ^( STAR exprOrSubquery exprOrSubquery ) | ^( BNOT exprOrSubquery ) | ^( BAND exprOrSubquery exprOrSubquery ) | ^( BOR exprOrSubquery exprOrSubquery ) | ^( BXOR exprOrSubquery exprOrSubquery ) | ^( UNARY_MINUS exprOrSubquery ) |c= caseExpr )
			int alt55=10;
			try { DebugEnterDecision(55, false);
			switch (input.LA(1))
			{
			case PLUS:
				{
				alt55 = 1;
				}
				break;
			case MINUS:
				{
				alt55 = 2;
				}
				break;
			case DIV:
				{
				alt55 = 3;
				}
				break;
			case STAR:
				{
				alt55 = 4;
				}
				break;
			case BNOT:
				{
				alt55 = 5;
				}
				break;
			case BAND:
				{
				alt55 = 6;
				}
				break;
			case BOR:
				{
				alt55 = 7;
				}
				break;
			case BXOR:
				{
				alt55 = 8;
				}
				break;
			case UNARY_MINUS:
				{
				alt55 = 9;
				}
				break;
			case CASE:
			case CASE2:
				{
				alt55 = 10;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 55, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:399:4: ^( PLUS exprOrSubquery exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(399, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(399, 6);

				_last = (IASTNode)input.LT(1);
				PLUS156=(IASTNode)Match(input,PLUS,Follow._PLUS_in_arithmeticExpr2015); 
				PLUS156_tree = (IASTNode)adaptor.DupNode(PLUS156);


				root_1 = (IASTNode)adaptor.BecomeRoot(PLUS156_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(399, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2017);
				exprOrSubquery157=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery157.Tree);

				DebugLocation(399, 26);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2019);
				exprOrSubquery158=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery158.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:400:4: ^( MINUS exprOrSubquery exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(400, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(400, 6);

				_last = (IASTNode)input.LT(1);
				MINUS159=(IASTNode)Match(input,MINUS,Follow._MINUS_in_arithmeticExpr2026); 
				MINUS159_tree = (IASTNode)adaptor.DupNode(MINUS159);


				root_1 = (IASTNode)adaptor.BecomeRoot(MINUS159_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(400, 12);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2028);
				exprOrSubquery160=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery160.Tree);

				DebugLocation(400, 27);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2030);
				exprOrSubquery161=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery161.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:401:4: ^( DIV exprOrSubquery exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(401, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(401, 6);

				_last = (IASTNode)input.LT(1);
				DIV162=(IASTNode)Match(input,DIV,Follow._DIV_in_arithmeticExpr2037); 
				DIV162_tree = (IASTNode)adaptor.DupNode(DIV162);


				root_1 = (IASTNode)adaptor.BecomeRoot(DIV162_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(401, 10);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2039);
				exprOrSubquery163=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery163.Tree);

				DebugLocation(401, 25);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2041);
				exprOrSubquery164=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery164.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:402:4: ^( STAR exprOrSubquery exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(402, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(402, 6);

				_last = (IASTNode)input.LT(1);
				STAR165=(IASTNode)Match(input,STAR,Follow._STAR_in_arithmeticExpr2048); 
				STAR165_tree = (IASTNode)adaptor.DupNode(STAR165);


				root_1 = (IASTNode)adaptor.BecomeRoot(STAR165_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(402, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2050);
				exprOrSubquery166=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery166.Tree);

				DebugLocation(402, 26);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2052);
				exprOrSubquery167=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery167.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// HqlSqlWalker.g:403:4: ^( BNOT exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(403, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(403, 6);

				_last = (IASTNode)input.LT(1);
				BNOT168=(IASTNode)Match(input,BNOT,Follow._BNOT_in_arithmeticExpr2059); 
				BNOT168_tree = (IASTNode)adaptor.DupNode(BNOT168);


				root_1 = (IASTNode)adaptor.BecomeRoot(BNOT168_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(403, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2061);
				exprOrSubquery169=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery169.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// HqlSqlWalker.g:404:4: ^( BAND exprOrSubquery exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(404, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(404, 6);

				_last = (IASTNode)input.LT(1);
				BAND170=(IASTNode)Match(input,BAND,Follow._BAND_in_arithmeticExpr2068); 
				BAND170_tree = (IASTNode)adaptor.DupNode(BAND170);


				root_1 = (IASTNode)adaptor.BecomeRoot(BAND170_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(404, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2070);
				exprOrSubquery171=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery171.Tree);

				DebugLocation(404, 26);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2072);
				exprOrSubquery172=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery172.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// HqlSqlWalker.g:405:4: ^( BOR exprOrSubquery exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(405, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(405, 6);

				_last = (IASTNode)input.LT(1);
				BOR173=(IASTNode)Match(input,BOR,Follow._BOR_in_arithmeticExpr2079); 
				BOR173_tree = (IASTNode)adaptor.DupNode(BOR173);


				root_1 = (IASTNode)adaptor.BecomeRoot(BOR173_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(405, 10);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2081);
				exprOrSubquery174=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery174.Tree);

				DebugLocation(405, 25);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2083);
				exprOrSubquery175=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery175.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 8:
				DebugEnterAlt(8);
				// HqlSqlWalker.g:406:4: ^( BXOR exprOrSubquery exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(406, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(406, 6);

				_last = (IASTNode)input.LT(1);
				BXOR176=(IASTNode)Match(input,BXOR,Follow._BXOR_in_arithmeticExpr2090); 
				BXOR176_tree = (IASTNode)adaptor.DupNode(BXOR176);


				root_1 = (IASTNode)adaptor.BecomeRoot(BXOR176_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(406, 11);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2092);
				exprOrSubquery177=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery177.Tree);

				DebugLocation(406, 26);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2094);
				exprOrSubquery178=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery178.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 9:
				DebugEnterAlt(9);
				// HqlSqlWalker.g:408:4: ^( UNARY_MINUS exprOrSubquery )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(408, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(408, 6);

				_last = (IASTNode)input.LT(1);
				UNARY_MINUS179=(IASTNode)Match(input,UNARY_MINUS,Follow._UNARY_MINUS_in_arithmeticExpr2102); 
				UNARY_MINUS179_tree = (IASTNode)adaptor.DupNode(UNARY_MINUS179);


				root_1 = (IASTNode)adaptor.BecomeRoot(UNARY_MINUS179_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(408, 18);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._exprOrSubquery_in_arithmeticExpr2104);
				exprOrSubquery180=exprOrSubquery();
				PopFollow();

				adaptor.AddChild(root_1, exprOrSubquery180.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;
			case 10:
				DebugEnterAlt(10);
				// HqlSqlWalker.g:409:4: c= caseExpr
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(409, 5);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._caseExpr_in_arithmeticExpr2112);
				c=caseExpr();
				PopFollow();

				adaptor.AddChild(root_0, c.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					if ((c!=null?((IASTNode)c.Tree):default(IASTNode)) == null)
					{
						PrepareArithmeticOperator( retval.Tree );
					}
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arithmeticExpr", 42);
			LeaveRule("arithmeticExpr", 42);
			LeaveRule_arithmeticExpr();
		}
		DebugLocation(410, 1);
		} finally { DebugExitRule(GrammarFileName, "arithmeticExpr"); }
		return retval;

	}
	// $ANTLR end "arithmeticExpr"

	partial void EnterRule_caseExpr();
	partial void LeaveRule_caseExpr();
	// $ANTLR start "caseExpr"
	// HqlSqlWalker.g:412:1: caseExpr : ( ^( CASE ( ^( WHEN logicalExpr expr ) )+ ( ^( ELSE expr ) )? ) | ^( CASE2 expr ( ^( WHEN expr expr ) )+ ( ^( ELSE expr ) )? ) );
	[GrammarRule("caseExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> caseExpr()
	{
		EnterRule_caseExpr();
		EnterRule("caseExpr", 43);
		TraceIn("caseExpr", 43);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode CASE181 = default(IASTNode);
		IASTNode WHEN182 = default(IASTNode);
		IASTNode ELSE185 = default(IASTNode);
		IASTNode CASE2187 = default(IASTNode);
		IASTNode WHEN189 = default(IASTNode);
		IASTNode ELSE192 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> logicalExpr183 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr184 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr186 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr188 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr190 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr191 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr193 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode CASE181_tree = default(IASTNode);
		IASTNode WHEN182_tree = default(IASTNode);
		IASTNode ELSE185_tree = default(IASTNode);
		IASTNode CASE2187_tree = default(IASTNode);
		IASTNode WHEN189_tree = default(IASTNode);
		IASTNode ELSE192_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "caseExpr");
		DebugLocation(412, 1);
		try
		{
			// HqlSqlWalker.g:413:2: ( ^( CASE ( ^( WHEN logicalExpr expr ) )+ ( ^( ELSE expr ) )? ) | ^( CASE2 expr ( ^( WHEN expr expr ) )+ ( ^( ELSE expr ) )? ) )
			int alt60=2;
			try { DebugEnterDecision(60, false);
			int LA60_1 = input.LA(1);

			if ((LA60_1==CASE))
			{
				alt60 = 1;
			}
			else if ((LA60_1==CASE2))
			{
				alt60 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 60, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:413:4: ^( CASE ( ^( WHEN logicalExpr expr ) )+ ( ^( ELSE expr ) )? )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(413, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(413, 6);

				_last = (IASTNode)input.LT(1);
				CASE181=(IASTNode)Match(input,CASE,Follow._CASE_in_caseExpr2124); 
				CASE181_tree = (IASTNode)adaptor.DupNode(CASE181);


				root_1 = (IASTNode)adaptor.BecomeRoot(CASE181_tree, root_1);


				DebugLocation(413, 11);
				 _inCase = true; 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(413, 31);
				// HqlSqlWalker.g:413:31: ( ^( WHEN logicalExpr expr ) )+
				int cnt56=0;
				try { DebugEnterSubRule(56);
				while (true)
				{
					int alt56=2;
					try { DebugEnterDecision(56, false);
					int LA56_1 = input.LA(1);

					if ((LA56_1==WHEN))
					{
						alt56 = 1;
					}


					} finally { DebugExitDecision(56); }
					switch (alt56)
					{
					case 1:
						DebugEnterAlt(1);
						// HqlSqlWalker.g:413:32: ^( WHEN logicalExpr expr )
						{
						DebugLocation(413, 32);

						_last = (IASTNode)input.LT(1);
						{
						IASTNode _save_last_2 = _last;
						IASTNode _first_2 = default(IASTNode);
						IASTNode root_2 = (IASTNode)adaptor.Nil();
						DebugLocation(413, 34);

						_last = (IASTNode)input.LT(1);
						WHEN182=(IASTNode)Match(input,WHEN,Follow._WHEN_in_caseExpr2130); 
						WHEN182_tree = (IASTNode)adaptor.DupNode(WHEN182);


						root_2 = (IASTNode)adaptor.BecomeRoot(WHEN182_tree, root_2);


						Match(input, TokenTypes.Down, null); 
						DebugLocation(413, 39);

						_last = (IASTNode)input.LT(1);
						PushFollow(Follow._logicalExpr_in_caseExpr2132);
						logicalExpr183=logicalExpr();
						PopFollow();

						adaptor.AddChild(root_2, logicalExpr183.Tree);

						DebugLocation(413, 51);

						_last = (IASTNode)input.LT(1);
						PushFollow(Follow._expr_in_caseExpr2134);
						expr184=expr();
						PopFollow();

						adaptor.AddChild(root_2, expr184.Tree);


						Match(input, TokenTypes.Up, null); 
						adaptor.AddChild(root_1, root_2);
						_last = _save_last_2;
						}


						}
						break;

					default:
						if (cnt56 >= 1)
							goto loop56;

						EarlyExitException eee56 = new EarlyExitException( 56, input );
						DebugRecognitionException(eee56);
						throw eee56;
					}
					cnt56++;
				}
				loop56:
					;

				} finally { DebugExitSubRule(56); }

				DebugLocation(413, 59);
				// HqlSqlWalker.g:413:59: ( ^( ELSE expr ) )?
				int alt57=2;
				try { DebugEnterSubRule(57);
				try { DebugEnterDecision(57, false);
				int LA57_1 = input.LA(1);

				if ((LA57_1==ELSE))
				{
					alt57 = 1;
				}
				} finally { DebugExitDecision(57); }
				switch (alt57)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:413:60: ^( ELSE expr )
					{
					DebugLocation(413, 60);

					_last = (IASTNode)input.LT(1);
					{
					IASTNode _save_last_2 = _last;
					IASTNode _first_2 = default(IASTNode);
					IASTNode root_2 = (IASTNode)adaptor.Nil();
					DebugLocation(413, 62);

					_last = (IASTNode)input.LT(1);
					ELSE185=(IASTNode)Match(input,ELSE,Follow._ELSE_in_caseExpr2141); 
					ELSE185_tree = (IASTNode)adaptor.DupNode(ELSE185);


					root_2 = (IASTNode)adaptor.BecomeRoot(ELSE185_tree, root_2);


					Match(input, TokenTypes.Down, null); 
					DebugLocation(413, 67);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._expr_in_caseExpr2143);
					expr186=expr();
					PopFollow();

					adaptor.AddChild(root_2, expr186.Tree);


					Match(input, TokenTypes.Up, null); 
					adaptor.AddChild(root_1, root_2);
					_last = _save_last_2;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(57); }


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(413, 76);
				 _inCase = false; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:414:4: ^( CASE2 expr ( ^( WHEN expr expr ) )+ ( ^( ELSE expr ) )? )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(414, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(414, 6);

				_last = (IASTNode)input.LT(1);
				CASE2187=(IASTNode)Match(input,CASE2,Follow._CASE2_in_caseExpr2155); 
				CASE2187_tree = (IASTNode)adaptor.DupNode(CASE2187);


				root_1 = (IASTNode)adaptor.BecomeRoot(CASE2187_tree, root_1);


				DebugLocation(414, 12);
				 _inCase = true; 

				Match(input, TokenTypes.Down, null); 
				DebugLocation(414, 32);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._expr_in_caseExpr2159);
				expr188=expr();
				PopFollow();

				adaptor.AddChild(root_1, expr188.Tree);

				DebugLocation(414, 37);
				// HqlSqlWalker.g:414:37: ( ^( WHEN expr expr ) )+
				int cnt58=0;
				try { DebugEnterSubRule(58);
				while (true)
				{
					int alt58=2;
					try { DebugEnterDecision(58, false);
					int LA58_1 = input.LA(1);

					if ((LA58_1==WHEN))
					{
						alt58 = 1;
					}


					} finally { DebugExitDecision(58); }
					switch (alt58)
					{
					case 1:
						DebugEnterAlt(1);
						// HqlSqlWalker.g:414:38: ^( WHEN expr expr )
						{
						DebugLocation(414, 38);

						_last = (IASTNode)input.LT(1);
						{
						IASTNode _save_last_2 = _last;
						IASTNode _first_2 = default(IASTNode);
						IASTNode root_2 = (IASTNode)adaptor.Nil();
						DebugLocation(414, 40);

						_last = (IASTNode)input.LT(1);
						WHEN189=(IASTNode)Match(input,WHEN,Follow._WHEN_in_caseExpr2163); 
						WHEN189_tree = (IASTNode)adaptor.DupNode(WHEN189);


						root_2 = (IASTNode)adaptor.BecomeRoot(WHEN189_tree, root_2);


						Match(input, TokenTypes.Down, null); 
						DebugLocation(414, 45);

						_last = (IASTNode)input.LT(1);
						PushFollow(Follow._expr_in_caseExpr2165);
						expr190=expr();
						PopFollow();

						adaptor.AddChild(root_2, expr190.Tree);

						DebugLocation(414, 50);

						_last = (IASTNode)input.LT(1);
						PushFollow(Follow._expr_in_caseExpr2167);
						expr191=expr();
						PopFollow();

						adaptor.AddChild(root_2, expr191.Tree);


						Match(input, TokenTypes.Up, null); 
						adaptor.AddChild(root_1, root_2);
						_last = _save_last_2;
						}


						}
						break;

					default:
						if (cnt58 >= 1)
							goto loop58;

						EarlyExitException eee58 = new EarlyExitException( 58, input );
						DebugRecognitionException(eee58);
						throw eee58;
					}
					cnt58++;
				}
				loop58:
					;

				} finally { DebugExitSubRule(58); }

				DebugLocation(414, 58);
				// HqlSqlWalker.g:414:58: ( ^( ELSE expr ) )?
				int alt59=2;
				try { DebugEnterSubRule(59);
				try { DebugEnterDecision(59, false);
				int LA59_1 = input.LA(1);

				if ((LA59_1==ELSE))
				{
					alt59 = 1;
				}
				} finally { DebugExitDecision(59); }
				switch (alt59)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:414:59: ^( ELSE expr )
					{
					DebugLocation(414, 59);

					_last = (IASTNode)input.LT(1);
					{
					IASTNode _save_last_2 = _last;
					IASTNode _first_2 = default(IASTNode);
					IASTNode root_2 = (IASTNode)adaptor.Nil();
					DebugLocation(414, 61);

					_last = (IASTNode)input.LT(1);
					ELSE192=(IASTNode)Match(input,ELSE,Follow._ELSE_in_caseExpr2174); 
					ELSE192_tree = (IASTNode)adaptor.DupNode(ELSE192);


					root_2 = (IASTNode)adaptor.BecomeRoot(ELSE192_tree, root_2);


					Match(input, TokenTypes.Down, null); 
					DebugLocation(414, 66);

					_last = (IASTNode)input.LT(1);
					PushFollow(Follow._expr_in_caseExpr2176);
					expr193=expr();
					PopFollow();

					adaptor.AddChild(root_2, expr193.Tree);


					Match(input, TokenTypes.Up, null); 
					adaptor.AddChild(root_1, root_2);
					_last = _save_last_2;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(59); }


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(414, 75);
				 _inCase = false; 

				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("caseExpr", 43);
			LeaveRule("caseExpr", 43);
			LeaveRule_caseExpr();
		}
		DebugLocation(415, 1);
		} finally { DebugExitRule(GrammarFileName, "caseExpr"); }
		return retval;

	}
	// $ANTLR end "caseExpr"

	partial void EnterRule_collectionFunction();
	partial void LeaveRule_collectionFunction();
	// $ANTLR start "collectionFunction"
	// HqlSqlWalker.g:419:1: collectionFunction : ( ^(e= ELEMENTS p1= propertyRef ) | ^(i= INDICES p2= propertyRef ) );
	[GrammarRule("collectionFunction")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> collectionFunction()
	{
		EnterRule_collectionFunction();
		EnterRule("collectionFunction", 44);
		TraceIn("collectionFunction", 44);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode e = default(IASTNode);
		IASTNode i = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> p1 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> p2 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode e_tree = default(IASTNode);
		IASTNode i_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "collectionFunction");
		DebugLocation(419, 1);
		try
		{
			// HqlSqlWalker.g:420:2: ( ^(e= ELEMENTS p1= propertyRef ) | ^(i= INDICES p2= propertyRef ) )
			int alt61=2;
			try { DebugEnterDecision(61, false);
			int LA61_1 = input.LA(1);

			if ((LA61_1==ELEMENTS))
			{
				alt61 = 1;
			}
			else if ((LA61_1==INDICES))
			{
				alt61 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 61, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:420:4: ^(e= ELEMENTS p1= propertyRef )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(420, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(420, 7);

				_last = (IASTNode)input.LT(1);
				e=(IASTNode)Match(input,ELEMENTS,Follow._ELEMENTS_in_collectionFunction2198); 
				e_tree = (IASTNode)adaptor.DupNode(e);


				root_1 = (IASTNode)adaptor.BecomeRoot(e_tree, root_1);


				DebugLocation(420, 17);
				_inFunctionCall=true;

				Match(input, TokenTypes.Down, null); 
				DebugLocation(420, 43);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._propertyRef_in_collectionFunction2204);
				p1=propertyRef();
				PopFollow();

				adaptor.AddChild(root_1, p1.Tree);

				DebugLocation(420, 56);
				 Resolve((p1!=null?((IASTNode)p1.Tree):default(IASTNode))); 

				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(421, 3);
				 ProcessFunction(e_tree,_inSelect); 
				DebugLocation(421, 43);
				_inFunctionCall=false;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:422:4: ^(i= INDICES p2= propertyRef )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(422, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(422, 7);

				_last = (IASTNode)input.LT(1);
				i=(IASTNode)Match(input,INDICES,Follow._INDICES_in_collectionFunction2223); 
				i_tree = (IASTNode)adaptor.DupNode(i);


				root_1 = (IASTNode)adaptor.BecomeRoot(i_tree, root_1);


				DebugLocation(422, 16);
				_inFunctionCall=true;

				Match(input, TokenTypes.Down, null); 
				DebugLocation(422, 42);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._propertyRef_in_collectionFunction2229);
				p2=propertyRef();
				PopFollow();

				adaptor.AddChild(root_1, p2.Tree);

				DebugLocation(422, 55);
				 Resolve((p2!=null?((IASTNode)p2.Tree):default(IASTNode))); 

				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(423, 3);
				 ProcessFunction(i_tree,_inSelect); 
				DebugLocation(423, 43);
				_inFunctionCall=false;

				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionFunction", 44);
			LeaveRule("collectionFunction", 44);
			LeaveRule_collectionFunction();
		}
		DebugLocation(424, 1);
		} finally { DebugExitRule(GrammarFileName, "collectionFunction"); }
		return retval;

	}
	// $ANTLR end "collectionFunction"

	partial void EnterRule_functionCall();
	partial void LeaveRule_functionCall();
	// $ANTLR start "functionCall"
	// HqlSqlWalker.g:426:1: functionCall : ( ^(m= METHOD_CALL pathAsIdent ( ^( EXPR_LIST ( expr | query | comparisonExpr )* ) )? ) | ^( AGGREGATE aggregateExpr ) );
	[GrammarRule("functionCall")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> functionCall()
	{
		EnterRule_functionCall();
		EnterRule("functionCall", 45);
		TraceIn("functionCall", 45);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode m = default(IASTNode);
		IASTNode EXPR_LIST195 = default(IASTNode);
		IASTNode AGGREGATE199 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> pathAsIdent194 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> expr196 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> query197 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> comparisonExpr198 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> aggregateExpr200 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode m_tree = default(IASTNode);
		IASTNode EXPR_LIST195_tree = default(IASTNode);
		IASTNode AGGREGATE199_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "functionCall");
		DebugLocation(426, 1);
		try
		{
			// HqlSqlWalker.g:427:2: ( ^(m= METHOD_CALL pathAsIdent ( ^( EXPR_LIST ( expr | query | comparisonExpr )* ) )? ) | ^( AGGREGATE aggregateExpr ) )
			int alt64=2;
			try { DebugEnterDecision(64, false);
			int LA64_1 = input.LA(1);

			if ((LA64_1==METHOD_CALL))
			{
				alt64 = 1;
			}
			else if ((LA64_1==AGGREGATE))
			{
				alt64 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 64, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:427:4: ^(m= METHOD_CALL pathAsIdent ( ^( EXPR_LIST ( expr | query | comparisonExpr )* ) )? )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(427, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(427, 7);

				_last = (IASTNode)input.LT(1);
				m=(IASTNode)Match(input,METHOD_CALL,Follow._METHOD_CALL_in_functionCall2254); 
				m_tree = (IASTNode)adaptor.DupNode(m);


				root_1 = (IASTNode)adaptor.BecomeRoot(m_tree, root_1);


				DebugLocation(427, 21);
				_inFunctionCall=true;

				Match(input, TokenTypes.Down, null); 
				DebugLocation(427, 45);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._pathAsIdent_in_functionCall2259);
				pathAsIdent194=pathAsIdent();
				PopFollow();

				adaptor.AddChild(root_1, pathAsIdent194.Tree);

				DebugLocation(427, 57);
				// HqlSqlWalker.g:427:57: ( ^( EXPR_LIST ( expr | query | comparisonExpr )* ) )?
				int alt63=2;
				try { DebugEnterSubRule(63);
				try { DebugEnterDecision(63, false);
				int LA63_1 = input.LA(1);

				if ((LA63_1==EXPR_LIST))
				{
					alt63 = 1;
				}
				} finally { DebugExitDecision(63); }
				switch (alt63)
				{
				case 1:
					DebugEnterAlt(1);
					// HqlSqlWalker.g:427:59: ^( EXPR_LIST ( expr | query | comparisonExpr )* )
					{
					DebugLocation(427, 59);

					_last = (IASTNode)input.LT(1);
					{
					IASTNode _save_last_2 = _last;
					IASTNode _first_2 = default(IASTNode);
					IASTNode root_2 = (IASTNode)adaptor.Nil();
					DebugLocation(427, 61);

					_last = (IASTNode)input.LT(1);
					EXPR_LIST195=(IASTNode)Match(input,EXPR_LIST,Follow._EXPR_LIST_in_functionCall2264); 
					EXPR_LIST195_tree = (IASTNode)adaptor.DupNode(EXPR_LIST195);


					root_2 = (IASTNode)adaptor.BecomeRoot(EXPR_LIST195_tree, root_2);


					if (input.LA(1) == TokenTypes.Down) {
						Match(input, TokenTypes.Down, null); 
						DebugLocation(427, 71);
						// HqlSqlWalker.g:427:71: ( expr | query | comparisonExpr )*
						try { DebugEnterSubRule(62);
						while (true)
						{
							int alt62=4;
							try { DebugEnterDecision(62, false);
							switch (input.LA(1))
							{
							case AGGREGATE:
							case BAND:
							case BNOT:
							case BOR:
							case BXOR:
							case CASE:
							case CASE2:
							case COLON:
							case COUNT:
							case DIV:
							case DOT:
							case FALSE:
							case IDENT:
							case INDEX_OP:
							case JAVA_CONSTANT:
							case METHOD_CALL:
							case MINUS:
							case NULL:
							case NUM_DECIMAL:
							case NUM_DOUBLE:
							case NUM_FLOAT:
							case NUM_INT:
							case NUM_LONG:
							case PARAM:
							case PLUS:
							case QUOTED_String:
							case STAR:
							case TRUE:
							case UNARY_MINUS:
							case VECTOR_EXPR:
							case WEIRD_IDENT:
								{
								alt62 = 1;
								}
								break;
							case QUERY:
							case UNION:
								{
								alt62 = 2;
								}
								break;
							case BETWEEN:
							case EQ:
							case EXISTS:
							case GE:
							case GT:
							case IN:
							case IS_NOT_NULL:
							case IS_NULL:
							case LE:
							case LIKE:
							case LT:
							case NE:
							case NOT_BETWEEN:
							case NOT_IN:
							case NOT_LIKE:
								{
								alt62 = 3;
								}
								break;
							}

							} finally { DebugExitDecision(62); }
							switch ( alt62 )
							{
							case 1:
								DebugEnterAlt(1);
								// HqlSqlWalker.g:427:72: expr
								{
								DebugLocation(427, 72);

								_last = (IASTNode)input.LT(1);
								PushFollow(Follow._expr_in_functionCall2267);
								expr196=expr();
								PopFollow();

								adaptor.AddChild(root_2, expr196.Tree);


								}
								break;
							case 2:
								DebugEnterAlt(2);
								// HqlSqlWalker.g:427:79: query
								{
								DebugLocation(427, 79);

								_last = (IASTNode)input.LT(1);
								PushFollow(Follow._query_in_functionCall2271);
								query197=query();
								PopFollow();

								adaptor.AddChild(root_2, query197.Tree);


								}
								break;
							case 3:
								DebugEnterAlt(3);
								// HqlSqlWalker.g:427:87: comparisonExpr
								{
								DebugLocation(427, 87);

								_last = (IASTNode)input.LT(1);
								PushFollow(Follow._comparisonExpr_in_functionCall2275);
								comparisonExpr198=comparisonExpr();
								PopFollow();

								adaptor.AddChild(root_2, comparisonExpr198.Tree);


								}
								break;

							default:
								goto loop62;
							}
						}

						loop62:
							;

						} finally { DebugExitSubRule(62); }


						Match(input, TokenTypes.Up, null); 
					}
					adaptor.AddChild(root_1, root_2);
					_last = _save_last_2;
					}


					}
					break;

				}
				} finally { DebugExitSubRule(63); }


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}

				DebugLocation(428, 3);
				 ProcessFunction(m_tree,_inSelect); _inFunctionCall=false; 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:429:4: ^( AGGREGATE aggregateExpr )
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(429, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(429, 6);

				_last = (IASTNode)input.LT(1);
				AGGREGATE199=(IASTNode)Match(input,AGGREGATE,Follow._AGGREGATE_in_functionCall2294); 
				AGGREGATE199_tree = (IASTNode)adaptor.DupNode(AGGREGATE199);


				root_1 = (IASTNode)adaptor.BecomeRoot(AGGREGATE199_tree, root_1);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(429, 16);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._aggregateExpr_in_functionCall2296);
				aggregateExpr200=aggregateExpr();
				PopFollow();

				adaptor.AddChild(root_1, aggregateExpr200.Tree);


				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("functionCall", 45);
			LeaveRule("functionCall", 45);
			LeaveRule_functionCall();
		}
		DebugLocation(430, 1);
		} finally { DebugExitRule(GrammarFileName, "functionCall"); }
		return retval;

	}
	// $ANTLR end "functionCall"

	partial void EnterRule_constant();
	partial void LeaveRule_constant();
	// $ANTLR start "constant"
	// HqlSqlWalker.g:432:1: constant : ( literal | NULL |t= TRUE |f= FALSE | JAVA_CONSTANT );
	[GrammarRule("constant")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> constant()
	{
		EnterRule_constant();
		EnterRule("constant", 46);
		TraceIn("constant", 46);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode t = default(IASTNode);
		IASTNode f = default(IASTNode);
		IASTNode NULL202 = default(IASTNode);
		IASTNode JAVA_CONSTANT203 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> literal201 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode t_tree = default(IASTNode);
		IASTNode f_tree = default(IASTNode);
		IASTNode NULL202_tree = default(IASTNode);
		IASTNode JAVA_CONSTANT203_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(432, 1);
		try
		{
			// HqlSqlWalker.g:433:2: ( literal | NULL |t= TRUE |f= FALSE | JAVA_CONSTANT )
			int alt65=5;
			try { DebugEnterDecision(65, false);
			switch (input.LA(1))
			{
			case NUM_DECIMAL:
			case NUM_DOUBLE:
			case NUM_FLOAT:
			case NUM_INT:
			case NUM_LONG:
			case QUOTED_String:
				{
				alt65 = 1;
				}
				break;
			case NULL:
				{
				alt65 = 2;
				}
				break;
			case TRUE:
				{
				alt65 = 3;
				}
				break;
			case FALSE:
				{
				alt65 = 4;
				}
				break;
			case JAVA_CONSTANT:
				{
				alt65 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 65, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:433:4: literal
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(433, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._literal_in_constant2309);
				literal201=literal();
				PopFollow();

				adaptor.AddChild(root_0, literal201.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:434:4: NULL
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(434, 4);

				_last = (IASTNode)input.LT(1);
				NULL202=(IASTNode)Match(input,NULL,Follow._NULL_in_constant2314); 
				NULL202_tree = (IASTNode)adaptor.DupNode(NULL202);


				adaptor.AddChild(root_0, NULL202_tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:435:4: t= TRUE
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(435, 5);

				_last = (IASTNode)input.LT(1);
				t=(IASTNode)Match(input,TRUE,Follow._TRUE_in_constant2321); 
				t_tree = (IASTNode)adaptor.DupNode(t);


				adaptor.AddChild(root_0, t_tree);

				DebugLocation(435, 11);
				 ProcessBool(t); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:436:4: f= FALSE
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(436, 5);

				_last = (IASTNode)input.LT(1);
				f=(IASTNode)Match(input,FALSE,Follow._FALSE_in_constant2331); 
				f_tree = (IASTNode)adaptor.DupNode(f);


				adaptor.AddChild(root_0, f_tree);

				DebugLocation(436, 12);
				 ProcessBool(f); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// HqlSqlWalker.g:437:4: JAVA_CONSTANT
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(437, 4);

				_last = (IASTNode)input.LT(1);
				JAVA_CONSTANT203=(IASTNode)Match(input,JAVA_CONSTANT,Follow._JAVA_CONSTANT_in_constant2338); 
				JAVA_CONSTANT203_tree = (IASTNode)adaptor.DupNode(JAVA_CONSTANT203);


				adaptor.AddChild(root_0, JAVA_CONSTANT203_tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("constant", 46);
			LeaveRule("constant", 46);
			LeaveRule_constant();
		}
		DebugLocation(438, 1);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// HqlSqlWalker.g:440:1: literal : ( numericLiteral | stringLiteral );
	[GrammarRule("literal")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> literal()
	{
		EnterRule_literal();
		EnterRule("literal", 47);
		TraceIn("literal", 47);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> numericLiteral204 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> stringLiteral205 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(440, 1);
		try
		{
			// HqlSqlWalker.g:441:2: ( numericLiteral | stringLiteral )
			int alt66=2;
			try { DebugEnterDecision(66, false);
			int LA66_1 = input.LA(1);

			if (((LA66_1>=NUM_DECIMAL && LA66_1<=NUM_LONG)))
			{
				alt66 = 1;
			}
			else if ((LA66_1==QUOTED_String))
			{
				alt66 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 66, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:441:4: numericLiteral
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(441, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._numericLiteral_in_literal2349);
				numericLiteral204=numericLiteral();
				PopFollow();

				adaptor.AddChild(root_0, numericLiteral204.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:442:4: stringLiteral
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(442, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._stringLiteral_in_literal2354);
				stringLiteral205=stringLiteral();
				PopFollow();

				adaptor.AddChild(root_0, stringLiteral205.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("literal", 47);
			LeaveRule("literal", 47);
			LeaveRule_literal();
		}
		DebugLocation(443, 1);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	partial void EnterRule_numericLiteral();
	partial void LeaveRule_numericLiteral();
	// $ANTLR start "numericLiteral"
	// HqlSqlWalker.g:445:1: numericLiteral : ( NUM_INT | NUM_LONG | NUM_FLOAT | NUM_DOUBLE | NUM_DECIMAL );
	[GrammarRule("numericLiteral")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> numericLiteral()
	{
		EnterRule_numericLiteral();
		EnterRule("numericLiteral", 48);
		TraceIn("numericLiteral", 48);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode set206 = default(IASTNode);

		IASTNode set206_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "numericLiteral");
		DebugLocation(445, 1);
		try
		{
			// HqlSqlWalker.g:450:2: ( NUM_INT | NUM_LONG | NUM_FLOAT | NUM_DOUBLE | NUM_DECIMAL )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(450, 2);

			_last = (IASTNode)input.LT(1);
			set206=(IASTNode)input.LT(1);
			if ((input.LA(1)>=NUM_DECIMAL && input.LA(1)<=NUM_LONG))
			{
				input.Consume();
				set206_tree = (IASTNode)adaptor.DupNode(set206);


				adaptor.AddChild(root_0, set206_tree);

				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			 


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


				ProcessNumericLiteral( retval.Tree );

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("numericLiteral", 48);
			LeaveRule("numericLiteral", 48);
			LeaveRule_numericLiteral();
		}
		DebugLocation(455, 1);
		} finally { DebugExitRule(GrammarFileName, "numericLiteral"); }
		return retval;

	}
	// $ANTLR end "numericLiteral"

	partial void EnterRule_stringLiteral();
	partial void LeaveRule_stringLiteral();
	// $ANTLR start "stringLiteral"
	// HqlSqlWalker.g:457:1: stringLiteral : QUOTED_String ;
	[GrammarRule("stringLiteral")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> stringLiteral()
	{
		EnterRule_stringLiteral();
		EnterRule("stringLiteral", 49);
		TraceIn("stringLiteral", 49);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode QUOTED_String207 = default(IASTNode);

		IASTNode QUOTED_String207_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "stringLiteral");
		DebugLocation(457, 1);
		try
		{
			// HqlSqlWalker.g:458:2: ( QUOTED_String )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:458:4: QUOTED_String
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(458, 4);

			_last = (IASTNode)input.LT(1);
			QUOTED_String207=(IASTNode)Match(input,QUOTED_String,Follow._QUOTED_String_in_stringLiteral2401); 
			QUOTED_String207_tree = (IASTNode)adaptor.DupNode(QUOTED_String207);


			adaptor.AddChild(root_0, QUOTED_String207_tree);


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("stringLiteral", 49);
			LeaveRule("stringLiteral", 49);
			LeaveRule_stringLiteral();
		}
		DebugLocation(459, 1);
		} finally { DebugExitRule(GrammarFileName, "stringLiteral"); }
		return retval;

	}
	// $ANTLR end "stringLiteral"

	partial void EnterRule_identifier();
	partial void LeaveRule_identifier();
	// $ANTLR start "identifier"
	// HqlSqlWalker.g:461:1: identifier : ( IDENT | WEIRD_IDENT ) ;
	[GrammarRule("identifier")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> identifier()
	{
		EnterRule_identifier();
		EnterRule("identifier", 50);
		TraceIn("identifier", 50);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode set208 = default(IASTNode);

		IASTNode set208_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "identifier");
		DebugLocation(461, 1);
		try
		{
			// HqlSqlWalker.g:462:2: ( ( IDENT | WEIRD_IDENT ) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(462, 2);

			_last = (IASTNode)input.LT(1);
			set208=(IASTNode)input.LT(1);
			if (input.LA(1)==IDENT||input.LA(1)==WEIRD_IDENT)
			{
				input.Consume();
				set208_tree = (IASTNode)adaptor.DupNode(set208);


				adaptor.AddChild(root_0, set208_tree);

				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			 


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("identifier", 50);
			LeaveRule("identifier", 50);
			LeaveRule_identifier();
		}
		DebugLocation(463, 1);
		} finally { DebugExitRule(GrammarFileName, "identifier"); }
		return retval;

	}
	// $ANTLR end "identifier"

	partial void EnterRule_addrExpr();
	partial void LeaveRule_addrExpr();
	// $ANTLR start "addrExpr"
	// HqlSqlWalker.g:465:1: addrExpr[ bool root ] : ( addrExprDot[root] | addrExprIndex[root] | addrExprIdent[root] );
	[GrammarRule("addrExpr")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> addrExpr(bool root)
	{
		EnterRule_addrExpr();
		EnterRule("addrExpr", 51);
		TraceIn("addrExpr", 51);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> addrExprDot209 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> addrExprIndex210 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> addrExprIdent211 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "addrExpr");
		DebugLocation(465, 2);
		try
		{
			// HqlSqlWalker.g:466:2: ( addrExprDot[root] | addrExprIndex[root] | addrExprIdent[root] )
			int alt67=3;
			try { DebugEnterDecision(67, false);
			switch (input.LA(1))
			{
			case DOT:
				{
				alt67 = 1;
				}
				break;
			case INDEX_OP:
				{
				alt67 = 2;
				}
				break;
			case IDENT:
			case WEIRD_IDENT:
				{
				alt67 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 67, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:466:4: addrExprDot[root]
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(466, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._addrExprDot_in_addrExpr2431);
				addrExprDot209=addrExprDot(root);
				PopFollow();

				adaptor.AddChild(root_0, addrExprDot209.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:467:4: addrExprIndex[root]
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(467, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._addrExprIndex_in_addrExpr2438);
				addrExprIndex210=addrExprIndex(root);
				PopFollow();

				adaptor.AddChild(root_0, addrExprIndex210.Tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:468:4: addrExprIdent[root]
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(468, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._addrExprIdent_in_addrExpr2445);
				addrExprIdent211=addrExprIdent(root);
				PopFollow();

				adaptor.AddChild(root_0, addrExprIdent211.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("addrExpr", 51);
			LeaveRule("addrExpr", 51);
			LeaveRule_addrExpr();
		}
		DebugLocation(469, 2);
		} finally { DebugExitRule(GrammarFileName, "addrExpr"); }
		return retval;

	}
	// $ANTLR end "addrExpr"

	partial void EnterRule_addrExprDot();
	partial void LeaveRule_addrExprDot();
	// $ANTLR start "addrExprDot"
	// HqlSqlWalker.g:471:1: addrExprDot[ bool root ] : ^(d= DOT lhs= addrExprLhs rhs= propertyName ) -> ^( $d $lhs $rhs) ;
	[GrammarRule("addrExprDot")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> addrExprDot(bool root)
	{
		EnterRule_addrExprDot();
		EnterRule("addrExprDot", 52);
		TraceIn("addrExprDot", 52);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode d = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> lhs = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> rhs = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode d_tree = default(IASTNode);
		RewriteRuleNodeStream stream_DOT=new RewriteRuleNodeStream(adaptor,"token DOT");
		RewriteRuleSubtreeStream stream_addrExprLhs=new RewriteRuleSubtreeStream(adaptor,"rule addrExprLhs");
		RewriteRuleSubtreeStream stream_propertyName=new RewriteRuleSubtreeStream(adaptor,"rule propertyName");
		try { DebugEnterRule(GrammarFileName, "addrExprDot");
		DebugLocation(471, 1);
		try
		{
			// HqlSqlWalker.g:476:2: ( ^(d= DOT lhs= addrExprLhs rhs= propertyName ) -> ^( $d $lhs $rhs) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:476:4: ^(d= DOT lhs= addrExprLhs rhs= propertyName )
			{
			DebugLocation(476, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(476, 7);

			_last = (IASTNode)input.LT(1);
			d=(IASTNode)Match(input,DOT,Follow._DOT_in_addrExprDot2469); 
			 
			stream_DOT.Add(d);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(476, 15);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._addrExprLhs_in_addrExprDot2473);
			lhs=addrExprLhs();
			PopFollow();

			stream_addrExprLhs.Add(lhs.Tree);
			DebugLocation(476, 31);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._propertyName_in_addrExprDot2477);
			rhs=propertyName();
			PopFollow();

			stream_propertyName.Add(rhs.Tree);

			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}



			{
			// AST REWRITE
			// elements: d, lhs, rhs
			// token labels: d
			// rule labels: lhs, rhs, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleNodeStream stream_d=new RewriteRuleNodeStream(adaptor,"token d",d);
			RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"rule lhs",lhs!=null?lhs.Tree:null);
			RewriteRuleSubtreeStream stream_rhs=new RewriteRuleSubtreeStream(adaptor,"rule rhs",rhs!=null?rhs.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 477:3: -> ^( $d $lhs $rhs)
			{
				DebugLocation(477, 6);
				// HqlSqlWalker.g:477:6: ^( $d $lhs $rhs)
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(477, 9);
				root_1 = (IASTNode)adaptor.BecomeRoot(stream_d.NextNode(), root_1);

				DebugLocation(477, 12);
				adaptor.AddChild(root_1, stream_lhs.NextTree());
				DebugLocation(477, 17);
				adaptor.AddChild(root_1, stream_rhs.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


				LookupProperty(retval.Tree,root,false);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("addrExprDot", 52);
			LeaveRule("addrExprDot", 52);
			LeaveRule_addrExprDot();
		}
		DebugLocation(478, 1);
		} finally { DebugExitRule(GrammarFileName, "addrExprDot"); }
		return retval;

	}
	// $ANTLR end "addrExprDot"

	partial void EnterRule_addrExprIndex();
	partial void LeaveRule_addrExprIndex();
	// $ANTLR start "addrExprIndex"
	// HqlSqlWalker.g:480:1: addrExprIndex[ bool root ] : ^(i= INDEX_OP lhs2= addrExprLhs rhs2= expr ) -> ^( $i $lhs2 $rhs2) ;
	[GrammarRule("addrExprIndex")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> addrExprIndex(bool root)
	{
		EnterRule_addrExprIndex();
		EnterRule("addrExprIndex", 53);
		TraceIn("addrExprIndex", 53);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode i = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> lhs2 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> rhs2 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode i_tree = default(IASTNode);
		RewriteRuleNodeStream stream_INDEX_OP=new RewriteRuleNodeStream(adaptor,"token INDEX_OP");
		RewriteRuleSubtreeStream stream_addrExprLhs=new RewriteRuleSubtreeStream(adaptor,"rule addrExprLhs");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "addrExprIndex");
		DebugLocation(480, 1);
		try
		{
			// HqlSqlWalker.g:486:2: ( ^(i= INDEX_OP lhs2= addrExprLhs rhs2= expr ) -> ^( $i $lhs2 $rhs2) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:486:4: ^(i= INDEX_OP lhs2= addrExprLhs rhs2= expr )
			{
			DebugLocation(486, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(486, 7);

			_last = (IASTNode)input.LT(1);
			i=(IASTNode)Match(input,INDEX_OP,Follow._INDEX_OP_in_addrExprIndex2516); 
			 
			stream_INDEX_OP.Add(i);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(486, 21);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._addrExprLhs_in_addrExprIndex2520);
			lhs2=addrExprLhs();
			PopFollow();

			stream_addrExprLhs.Add(lhs2.Tree);
			DebugLocation(486, 38);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._expr_in_addrExprIndex2524);
			rhs2=expr();
			PopFollow();

			stream_expr.Add(rhs2.Tree);

			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}



			{
			// AST REWRITE
			// elements: i, lhs2, rhs2
			// token labels: i
			// rule labels: lhs2, rhs2, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleNodeStream stream_i=new RewriteRuleNodeStream(adaptor,"token i",i);
			RewriteRuleSubtreeStream stream_lhs2=new RewriteRuleSubtreeStream(adaptor,"rule lhs2",lhs2!=null?lhs2.Tree:null);
			RewriteRuleSubtreeStream stream_rhs2=new RewriteRuleSubtreeStream(adaptor,"rule rhs2",rhs2!=null?rhs2.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 487:3: -> ^( $i $lhs2 $rhs2)
			{
				DebugLocation(487, 6);
				// HqlSqlWalker.g:487:6: ^( $i $lhs2 $rhs2)
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(487, 9);
				root_1 = (IASTNode)adaptor.BecomeRoot(stream_i.NextNode(), root_1);

				DebugLocation(487, 12);
				adaptor.AddChild(root_1, stream_lhs2.NextTree());
				DebugLocation(487, 18);
				adaptor.AddChild(root_1, stream_rhs2.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


				ProcessIndex(retval.Tree);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("addrExprIndex", 53);
			LeaveRule("addrExprIndex", 53);
			LeaveRule_addrExprIndex();
		}
		DebugLocation(488, 1);
		} finally { DebugExitRule(GrammarFileName, "addrExprIndex"); }
		return retval;

	}
	// $ANTLR end "addrExprIndex"

	partial void EnterRule_addrExprIdent();
	partial void LeaveRule_addrExprIdent();
	// $ANTLR start "addrExprIdent"
	// HqlSqlWalker.g:490:1: addrExprIdent[ bool root ] : p= identifier -> {IsNonQualifiedPropertyRef($p.tree)}? ^() -> ^() ;
	[GrammarRule("addrExprIdent")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> addrExprIdent(bool root)
	{
		EnterRule_addrExprIdent();
		EnterRule("addrExprIdent", 54);
		TraceIn("addrExprIdent", 54);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> p = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		try { DebugEnterRule(GrammarFileName, "addrExprIdent");
		DebugLocation(490, 1);
		try
		{
			// HqlSqlWalker.g:491:2: (p= identifier -> {IsNonQualifiedPropertyRef($p.tree)}? ^() -> ^() )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:491:4: p= identifier
			{
			DebugLocation(491, 5);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._identifier_in_addrExprIdent2556);
			p=identifier();
			PopFollow();

			stream_identifier.Add(p.Tree);


			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 492:2: -> {IsNonQualifiedPropertyRef($p.tree)}? ^()
			if (IsNonQualifiedPropertyRef((p!=null?((IASTNode)p.Tree):default(IASTNode))))
			{
				DebugLocation(492, 43);
				// HqlSqlWalker.g:492:43: ^()
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(492, 45);
				root_1 = (IASTNode)adaptor.BecomeRoot(LookupNonQualifiedProperty((p!=null?((IASTNode)p.Tree):default(IASTNode))), root_1);

				adaptor.AddChild(root_0, root_1);
				}

			}
			else // 493:2: -> ^()
			{
				DebugLocation(493, 5);
				// HqlSqlWalker.g:493:5: ^()
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(493, 7);
				root_1 = (IASTNode)adaptor.BecomeRoot(Resolve((p!=null?((IASTNode)p.Tree):default(IASTNode))), root_1);

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("addrExprIdent", 54);
			LeaveRule("addrExprIdent", 54);
			LeaveRule_addrExprIdent();
		}
		DebugLocation(494, 1);
		} finally { DebugExitRule(GrammarFileName, "addrExprIdent"); }
		return retval;

	}
	// $ANTLR end "addrExprIdent"

	partial void EnterRule_addrExprLhs();
	partial void LeaveRule_addrExprLhs();
	// $ANTLR start "addrExprLhs"
	// HqlSqlWalker.g:496:1: addrExprLhs : addrExpr[ false ] ;
	[GrammarRule("addrExprLhs")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> addrExprLhs()
	{
		EnterRule_addrExprLhs();
		EnterRule("addrExprLhs", 55);
		TraceIn("addrExprLhs", 55);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> addrExpr212 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "addrExprLhs");
		DebugLocation(496, 1);
		try
		{
			// HqlSqlWalker.g:497:2: ( addrExpr[ false ] )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:497:4: addrExpr[ false ]
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(497, 4);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._addrExpr_in_addrExprLhs2584);
			addrExpr212=addrExpr(false);
			PopFollow();

			adaptor.AddChild(root_0, addrExpr212.Tree);


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("addrExprLhs", 55);
			LeaveRule("addrExprLhs", 55);
			LeaveRule_addrExprLhs();
		}
		DebugLocation(498, 1);
		} finally { DebugExitRule(GrammarFileName, "addrExprLhs"); }
		return retval;

	}
	// $ANTLR end "addrExprLhs"

	partial void EnterRule_propertyName();
	partial void LeaveRule_propertyName();
	// $ANTLR start "propertyName"
	// HqlSqlWalker.g:500:1: propertyName : ( identifier | CLASS | ELEMENTS | INDICES );
	[GrammarRule("propertyName")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> propertyName()
	{
		EnterRule_propertyName();
		EnterRule("propertyName", 56);
		TraceIn("propertyName", 56);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode CLASS214 = default(IASTNode);
		IASTNode ELEMENTS215 = default(IASTNode);
		IASTNode INDICES216 = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> identifier213 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode CLASS214_tree = default(IASTNode);
		IASTNode ELEMENTS215_tree = default(IASTNode);
		IASTNode INDICES216_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "propertyName");
		DebugLocation(500, 1);
		try
		{
			// HqlSqlWalker.g:501:2: ( identifier | CLASS | ELEMENTS | INDICES )
			int alt68=4;
			try { DebugEnterDecision(68, false);
			switch (input.LA(1))
			{
			case IDENT:
			case WEIRD_IDENT:
				{
				alt68 = 1;
				}
				break;
			case CLASS:
				{
				alt68 = 2;
				}
				break;
			case ELEMENTS:
				{
				alt68 = 3;
				}
				break;
			case INDICES:
				{
				alt68 = 4;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 68, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:501:4: identifier
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(501, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._identifier_in_propertyName2597);
				identifier213=identifier();
				PopFollow();

				adaptor.AddChild(root_0, identifier213.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:502:4: CLASS
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(502, 4);

				_last = (IASTNode)input.LT(1);
				CLASS214=(IASTNode)Match(input,CLASS,Follow._CLASS_in_propertyName2602); 
				CLASS214_tree = (IASTNode)adaptor.DupNode(CLASS214);


				adaptor.AddChild(root_0, CLASS214_tree);


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// HqlSqlWalker.g:503:4: ELEMENTS
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(503, 4);

				_last = (IASTNode)input.LT(1);
				ELEMENTS215=(IASTNode)Match(input,ELEMENTS,Follow._ELEMENTS_in_propertyName2607); 
				ELEMENTS215_tree = (IASTNode)adaptor.DupNode(ELEMENTS215);


				adaptor.AddChild(root_0, ELEMENTS215_tree);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// HqlSqlWalker.g:504:4: INDICES
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(504, 4);

				_last = (IASTNode)input.LT(1);
				INDICES216=(IASTNode)Match(input,INDICES,Follow._INDICES_in_propertyName2612); 
				INDICES216_tree = (IASTNode)adaptor.DupNode(INDICES216);


				adaptor.AddChild(root_0, INDICES216_tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyName", 56);
			LeaveRule("propertyName", 56);
			LeaveRule_propertyName();
		}
		DebugLocation(505, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyName"); }
		return retval;

	}
	// $ANTLR end "propertyName"

	partial void EnterRule_propertyRef();
	partial void LeaveRule_propertyRef();
	// $ANTLR start "propertyRef"
	// HqlSqlWalker.g:507:1: propertyRef : ( propertyRefPath | propertyRefIdent );
	[GrammarRule("propertyRef")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> propertyRef()
	{
		EnterRule_propertyRef();
		EnterRule("propertyRef", 57);
		TraceIn("propertyRef", 57);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> propertyRefPath217 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> propertyRefIdent218 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "propertyRef");
		DebugLocation(507, 1);
		try
		{
			// HqlSqlWalker.g:508:2: ( propertyRefPath | propertyRefIdent )
			int alt69=2;
			try { DebugEnterDecision(69, false);
			int LA69_1 = input.LA(1);

			if ((LA69_1==DOT))
			{
				alt69 = 1;
			}
			else if ((LA69_1==IDENT||LA69_1==WEIRD_IDENT))
			{
				alt69 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 69, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:508:4: propertyRefPath
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(508, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._propertyRefPath_in_propertyRef2624);
				propertyRefPath217=propertyRefPath();
				PopFollow();

				adaptor.AddChild(root_0, propertyRefPath217.Tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:509:4: propertyRefIdent
				{
				root_0 = (IASTNode)adaptor.Nil();

				DebugLocation(509, 4);

				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._propertyRefIdent_in_propertyRef2629);
				propertyRefIdent218=propertyRefIdent();
				PopFollow();

				adaptor.AddChild(root_0, propertyRefIdent218.Tree);


				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyRef", 57);
			LeaveRule("propertyRef", 57);
			LeaveRule_propertyRef();
		}
		DebugLocation(510, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyRef"); }
		return retval;

	}
	// $ANTLR end "propertyRef"

	partial void EnterRule_propertyRefPath();
	partial void LeaveRule_propertyRefPath();
	// $ANTLR start "propertyRefPath"
	// HqlSqlWalker.g:512:1: propertyRefPath : ^(d= DOT lhs= propertyRefLhs rhs= propertyName ) -> ^( $d $lhs $rhs) ;
	[GrammarRule("propertyRefPath")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> propertyRefPath()
	{
		EnterRule_propertyRefPath();
		EnterRule("propertyRefPath", 58);
		TraceIn("propertyRefPath", 58);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode d = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> lhs = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);
		AstTreeRuleReturnScope<IASTNode, IASTNode> rhs = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode d_tree = default(IASTNode);
		RewriteRuleNodeStream stream_DOT=new RewriteRuleNodeStream(adaptor,"token DOT");
		RewriteRuleSubtreeStream stream_propertyRefLhs=new RewriteRuleSubtreeStream(adaptor,"rule propertyRefLhs");
		RewriteRuleSubtreeStream stream_propertyName=new RewriteRuleSubtreeStream(adaptor,"rule propertyName");
		try { DebugEnterRule(GrammarFileName, "propertyRefPath");
		DebugLocation(512, 1);
		try
		{
			// HqlSqlWalker.g:517:2: ( ^(d= DOT lhs= propertyRefLhs rhs= propertyName ) -> ^( $d $lhs $rhs) )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:517:4: ^(d= DOT lhs= propertyRefLhs rhs= propertyName )
			{
			DebugLocation(517, 4);

			_last = (IASTNode)input.LT(1);
			{
			IASTNode _save_last_1 = _last;
			IASTNode _first_1 = default(IASTNode);
			IASTNode root_1 = (IASTNode)adaptor.Nil();
			DebugLocation(517, 7);

			_last = (IASTNode)input.LT(1);
			d=(IASTNode)Match(input,DOT,Follow._DOT_in_propertyRefPath2649); 
			 
			stream_DOT.Add(d);


			Match(input, TokenTypes.Down, null); 
			DebugLocation(517, 15);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._propertyRefLhs_in_propertyRefPath2653);
			lhs=propertyRefLhs();
			PopFollow();

			stream_propertyRefLhs.Add(lhs.Tree);
			DebugLocation(517, 34);
			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._propertyName_in_propertyRefPath2657);
			rhs=propertyName();
			PopFollow();

			stream_propertyName.Add(rhs.Tree);

			Match(input, TokenTypes.Up, null); 
			adaptor.AddChild(root_0, root_1);
			_last = _save_last_1;
			}



			{
			// AST REWRITE
			// elements: d, lhs, rhs
			// token labels: d
			// rule labels: lhs, rhs, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleNodeStream stream_d=new RewriteRuleNodeStream(adaptor,"token d",d);
			RewriteRuleSubtreeStream stream_lhs=new RewriteRuleSubtreeStream(adaptor,"rule lhs",lhs!=null?lhs.Tree:null);
			RewriteRuleSubtreeStream stream_rhs=new RewriteRuleSubtreeStream(adaptor,"rule rhs",rhs!=null?rhs.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (IASTNode)adaptor.Nil();
			// 518:3: -> ^( $d $lhs $rhs)
			{
				DebugLocation(518, 6);
				// HqlSqlWalker.g:518:6: ^( $d $lhs $rhs)
				{
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(518, 9);
				root_1 = (IASTNode)adaptor.BecomeRoot(stream_d.NextNode(), root_1);

				DebugLocation(518, 12);
				adaptor.AddChild(root_1, stream_lhs.NextTree());
				DebugLocation(518, 17);
				adaptor.AddChild(root_1, stream_rhs.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


				// This gives lookupProperty() a chance to transform the tree to process collection properties (.elements, etc).
				retval.Tree = LookupProperty((IASTNode) retval.Tree,false,true);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyRefPath", 58);
			LeaveRule("propertyRefPath", 58);
			LeaveRule_propertyRefPath();
		}
		DebugLocation(519, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyRefPath"); }
		return retval;

	}
	// $ANTLR end "propertyRefPath"

	partial void EnterRule_propertyRefIdent();
	partial void LeaveRule_propertyRefIdent();
	// $ANTLR start "propertyRefIdent"
	// HqlSqlWalker.g:521:1: propertyRefIdent : p= identifier ;
	[GrammarRule("propertyRefIdent")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> propertyRefIdent()
	{
		EnterRule_propertyRefIdent();
		EnterRule("propertyRefIdent", 59);
		TraceIn("propertyRefIdent", 59);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> p = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "propertyRefIdent");
		DebugLocation(521, 1);
		try
		{
			// HqlSqlWalker.g:535:2: (p= identifier )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:535:4: p= identifier
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(535, 5);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._identifier_in_propertyRefIdent2694);
			p=identifier();
			PopFollow();

			adaptor.AddChild(root_0, p.Tree);


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


				// In many cases, things other than property-refs are recognized
				// by this propertyRef rule.  Some of those I have seen:
				//  1) select-clause from-aliases
				//  2) sql-functions
				if ( IsNonQualifiedPropertyRef((p!=null?((IASTNode)p.Tree):default(IASTNode))) ) {
					retval.Tree = LookupNonQualifiedProperty((p!=null?((IASTNode)p.Tree):default(IASTNode)));
				}
				else {
					Resolve((p!=null?((IASTNode)p.Tree):default(IASTNode)));
					retval.Tree = (p!=null?((IASTNode)p.Tree):default(IASTNode));
				}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyRefIdent", 59);
			LeaveRule("propertyRefIdent", 59);
			LeaveRule_propertyRefIdent();
		}
		DebugLocation(536, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyRefIdent"); }
		return retval;

	}
	// $ANTLR end "propertyRefIdent"

	partial void EnterRule_propertyRefLhs();
	partial void LeaveRule_propertyRefLhs();
	// $ANTLR start "propertyRefLhs"
	// HqlSqlWalker.g:538:1: propertyRefLhs : propertyRef ;
	[GrammarRule("propertyRefLhs")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> propertyRefLhs()
	{
		EnterRule_propertyRefLhs();
		EnterRule("propertyRefLhs", 60);
		TraceIn("propertyRefLhs", 60);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> propertyRef219 = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "propertyRefLhs");
		DebugLocation(538, 1);
		try
		{
			// HqlSqlWalker.g:539:2: ( propertyRef )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:539:4: propertyRef
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(539, 4);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._propertyRef_in_propertyRefLhs2706);
			propertyRef219=propertyRef();
			PopFollow();

			adaptor.AddChild(root_0, propertyRef219.Tree);


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyRefLhs", 60);
			LeaveRule("propertyRefLhs", 60);
			LeaveRule_propertyRefLhs();
		}
		DebugLocation(540, 1);
		} finally { DebugExitRule(GrammarFileName, "propertyRefLhs"); }
		return retval;

	}
	// $ANTLR end "propertyRefLhs"

	partial void EnterRule_aliasRef();
	partial void LeaveRule_aliasRef();
	// $ANTLR start "aliasRef"
	// HqlSqlWalker.g:542:1: aliasRef : i= identifier ;
	[GrammarRule("aliasRef")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> aliasRef()
	{
		EnterRule_aliasRef();
		EnterRule("aliasRef", 61);
		TraceIn("aliasRef", 61);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		AstTreeRuleReturnScope<IASTNode, IASTNode> i = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		try { DebugEnterRule(GrammarFileName, "aliasRef");
		DebugLocation(542, 1);
		try
		{
			// HqlSqlWalker.g:547:2: (i= identifier )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:547:4: i= identifier
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(547, 5);

			_last = (IASTNode)input.LT(1);
			PushFollow(Follow._identifier_in_aliasRef2727);
			i=identifier();
			PopFollow();

			adaptor.AddChild(root_0, i.Tree);


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);


					LookupAlias(retval.Tree);
				
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("aliasRef", 61);
			LeaveRule("aliasRef", 61);
			LeaveRule_aliasRef();
		}
		DebugLocation(549, 1);
		} finally { DebugExitRule(GrammarFileName, "aliasRef"); }
		return retval;

	}
	// $ANTLR end "aliasRef"

	partial void EnterRule_parameter();
	partial void LeaveRule_parameter();
	// $ANTLR start "parameter"
	// HqlSqlWalker.g:551:1: parameter : ( ^(c= COLON a= identifier ) -> ^() | ^(p= PARAM (n= NUM_INT )? ) -> {n != null}? ^() -> ^() );
	[GrammarRule("parameter")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> parameter()
	{
		EnterRule_parameter();
		EnterRule("parameter", 62);
		TraceIn("parameter", 62);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode c = default(IASTNode);
		IASTNode p = default(IASTNode);
		IASTNode n = default(IASTNode);
		AstTreeRuleReturnScope<IASTNode, IASTNode> a = default(AstTreeRuleReturnScope<IASTNode, IASTNode>);

		IASTNode c_tree = default(IASTNode);
		IASTNode p_tree = default(IASTNode);
		IASTNode n_tree = default(IASTNode);
		RewriteRuleNodeStream stream_COLON=new RewriteRuleNodeStream(adaptor,"token COLON");
		RewriteRuleNodeStream stream_PARAM=new RewriteRuleNodeStream(adaptor,"token PARAM");
		RewriteRuleNodeStream stream_NUM_INT=new RewriteRuleNodeStream(adaptor,"token NUM_INT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		try { DebugEnterRule(GrammarFileName, "parameter");
		DebugLocation(551, 1);
		try
		{
			// HqlSqlWalker.g:552:2: ( ^(c= COLON a= identifier ) -> ^() | ^(p= PARAM (n= NUM_INT )? ) -> {n != null}? ^() -> ^() )
			int alt71=2;
			try { DebugEnterDecision(71, false);
			int LA71_1 = input.LA(1);

			if ((LA71_1==COLON))
			{
				alt71 = 1;
			}
			else if ((LA71_1==PARAM))
			{
				alt71 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 71, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// HqlSqlWalker.g:552:4: ^(c= COLON a= identifier )
				{
				DebugLocation(552, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(552, 7);

				_last = (IASTNode)input.LT(1);
				c=(IASTNode)Match(input,COLON,Follow._COLON_in_parameter2745); 
				 
				stream_COLON.Add(c);


				Match(input, TokenTypes.Down, null); 
				DebugLocation(552, 15);
				_last = (IASTNode)input.LT(1);
				PushFollow(Follow._identifier_in_parameter2749);
				a=identifier();
				PopFollow();

				stream_identifier.Add(a.Tree);

				Match(input, TokenTypes.Up, null); 
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 554:3: -> ^()
				{
					DebugLocation(554, 6);
					// HqlSqlWalker.g:554:6: ^()
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(554, 8);
					root_1 = (IASTNode)adaptor.BecomeRoot(GenerateNamedParameter( c, (a!=null?((IASTNode)a.Tree):default(IASTNode)) ), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// HqlSqlWalker.g:555:4: ^(p= PARAM (n= NUM_INT )? )
				{
				DebugLocation(555, 4);

				_last = (IASTNode)input.LT(1);
				{
				IASTNode _save_last_1 = _last;
				IASTNode _first_1 = default(IASTNode);
				IASTNode root_1 = (IASTNode)adaptor.Nil();
				DebugLocation(555, 7);

				_last = (IASTNode)input.LT(1);
				p=(IASTNode)Match(input,PARAM,Follow._PARAM_in_parameter2770); 
				 
				stream_PARAM.Add(p);


				if (input.LA(1) == TokenTypes.Down) {
					Match(input, TokenTypes.Down, null); 
					DebugLocation(555, 14);
					// HqlSqlWalker.g:555:14: (n= NUM_INT )?
					int alt70=2;
					try { DebugEnterSubRule(70);
					try { DebugEnterDecision(70, false);
					int LA70_1 = input.LA(1);

					if ((LA70_1==NUM_INT))
					{
						alt70 = 1;
					}
					} finally { DebugExitDecision(70); }
					switch (alt70)
					{
					case 1:
						DebugEnterAlt(1);
						// HqlSqlWalker.g:555:15: n= NUM_INT
						{
						DebugLocation(555, 16);

						_last = (IASTNode)input.LT(1);
						n=(IASTNode)Match(input,NUM_INT,Follow._NUM_INT_in_parameter2775); 
						 
						stream_NUM_INT.Add(n);


						}
						break;

					}
					} finally { DebugExitSubRule(70); }


					Match(input, TokenTypes.Up, null); 
				}
				adaptor.AddChild(root_0, root_1);
				_last = _save_last_1;
				}



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (IASTNode)adaptor.Nil();
				// 556:3: -> {n != null}? ^()
				if (n != null)
				{
					DebugLocation(556, 19);
					// HqlSqlWalker.g:556:19: ^()
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(556, 21);
					root_1 = (IASTNode)adaptor.BecomeRoot(GenerateNamedParameter( p, n ), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 557:3: -> ^()
				{
					DebugLocation(557, 6);
					// HqlSqlWalker.g:557:6: ^()
					{
					IASTNode root_1 = (IASTNode)adaptor.Nil();
					DebugLocation(557, 8);
					root_1 = (IASTNode)adaptor.BecomeRoot(GeneratePositionalParameter( p ), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("parameter", 62);
			LeaveRule("parameter", 62);
			LeaveRule_parameter();
		}
		DebugLocation(558, 1);
		} finally { DebugExitRule(GrammarFileName, "parameter"); }
		return retval;

	}
	// $ANTLR end "parameter"

	partial void EnterRule_numericInteger();
	partial void LeaveRule_numericInteger();
	// $ANTLR start "numericInteger"
	// HqlSqlWalker.g:560:1: numericInteger : NUM_INT ;
	[GrammarRule("numericInteger")]
	private AstTreeRuleReturnScope<IASTNode, IASTNode> numericInteger()
	{
		EnterRule_numericInteger();
		EnterRule("numericInteger", 63);
		TraceIn("numericInteger", 63);
		AstTreeRuleReturnScope<IASTNode, IASTNode> retval = new AstTreeRuleReturnScope<IASTNode, IASTNode>();
		retval.Start = (IASTNode)input.LT(1);

		IASTNode root_0 = default(IASTNode);

		IASTNode _first_0 = default(IASTNode);
		IASTNode _last = default(IASTNode);

		IASTNode NUM_INT220 = default(IASTNode);

		IASTNode NUM_INT220_tree = default(IASTNode);
		try { DebugEnterRule(GrammarFileName, "numericInteger");
		DebugLocation(560, 1);
		try
		{
			// HqlSqlWalker.g:561:2: ( NUM_INT )
			DebugEnterAlt(1);
			// HqlSqlWalker.g:561:4: NUM_INT
			{
			root_0 = (IASTNode)adaptor.Nil();

			DebugLocation(561, 4);

			_last = (IASTNode)input.LT(1);
			NUM_INT220=(IASTNode)Match(input,NUM_INT,Follow._NUM_INT_in_numericInteger2808); 
			NUM_INT220_tree = (IASTNode)adaptor.DupNode(NUM_INT220);


			adaptor.AddChild(root_0, NUM_INT220_tree);


			}

			retval.Tree = (IASTNode)adaptor.RulePostProcessing(root_0);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("numericInteger", 63);
			LeaveRule("numericInteger", 63);
			LeaveRule_numericInteger();
		}
		DebugLocation(562, 1);
		} finally { DebugExitRule(GrammarFileName, "numericInteger"); }
		return retval;

	}
	// $ANTLR end "numericInteger"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _selectStatement_in_statement170 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _updateStatement_in_statement174 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _deleteStatement_in_statement178 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _insertStatement_in_statement182 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_in_selectStatement193 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UPDATE_in_updateStatement217 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _VERSIONED_in_updateStatement224 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _fromClause_in_updateStatement230 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _setClause_in_updateStatement234 = new BitSet(new ulong[]{0x8UL,0x0UL,0x4UL});
		public static readonly BitSet _whereClause_in_updateStatement239 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DELETE_in_deleteStatement282 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _fromClause_in_deleteStatement286 = new BitSet(new ulong[]{0x8UL,0x0UL,0x4UL});
		public static readonly BitSet _whereClause_in_deleteStatement289 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INSERT_in_insertStatement319 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _intoClause_in_insertStatement323 = new BitSet(new ulong[]{0x0UL,0x1000020000000000UL});
		public static readonly BitSet _query_in_insertStatement325 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INTO_in_intoClause349 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _path_in_intoClause356 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _insertablePropertySpec_in_intoClause361 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _RANGE_in_insertablePropertySpec382 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _IDENT_in_insertablePropertySpec385 = new BitSet(new ulong[]{0x80000000000008UL});
		public static readonly BitSet _SET_in_setClause402 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _assignment_in_setClause407 = new BitSet(new ulong[]{0x4000000008UL});
		public static readonly BitSet _EQ_in_assignment439 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _propertyRef_in_assignment444 = new BitSet(new ulong[]{0x8801003108ED010UL,0x561006C01F814010UL,0x1UL});
		public static readonly BitSet _newValue_in_assignment450 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_newValue466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_in_newValue470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unionedQuery_in_query481 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _UNION_in_query488 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _unionedQuery_in_query490 = new BitSet(new ulong[]{0x0UL,0x1000020000000000UL});
		public static readonly BitSet _query_in_query492 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _QUERY_in_unionedQuery515 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _SELECT_FROM_in_unionedQuery527 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _fromClause_in_unionedQuery535 = new BitSet(new ulong[]{0x8UL,0x400000000000UL});
		public static readonly BitSet _selectClause_in_unionedQuery544 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _whereClause_in_unionedQuery559 = new BitSet(new ulong[]{0x28000000000008UL,0x42000800000000UL});
		public static readonly BitSet _groupClause_in_unionedQuery569 = new BitSet(new ulong[]{0x20000000000008UL,0x42000800000000UL});
		public static readonly BitSet _havingClause_in_unionedQuery579 = new BitSet(new ulong[]{0x8UL,0x42000800000000UL});
		public static readonly BitSet _orderClause_in_unionedQuery589 = new BitSet(new ulong[]{0x8UL,0x42000000000000UL});
		public static readonly BitSet _skipClause_in_unionedQuery599 = new BitSet(new ulong[]{0x8UL,0x40000000000000UL});
		public static readonly BitSet _takeClause_in_unionedQuery609 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ORDER_in_orderClause666 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _orderExprs_in_orderClause671 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _query_in_orderClause675 = new BitSet(new ulong[]{0x40000408UL});
		public static readonly BitSet _expr_in_orderExprs703 = new BitSet(new ulong[]{0x8801003508ED412UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _orderExprs_in_orderExprs717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SKIP_in_skipClause731 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _NUM_INT_in_skipClause734 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _parameter_in_skipClause738 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _TAKE_in_takeClause752 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _NUM_INT_in_takeClause755 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _parameter_in_takeClause759 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _GROUP_in_groupClause773 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_groupClause778 = new BitSet(new ulong[]{0x8801003108ED018UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _HAVING_in_havingClause799 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logicalExpr_in_havingClause801 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SELECT_in_selectClause815 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _DISTINCT_in_selectClause822 = new BitSet(new ulong[]{0x10800007188ED250UL,0x141006C03F014000UL,0x1UL});
		public static readonly BitSet _selectExprList_in_selectClause828 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _selectExpr_in_selectExprList868 = new BitSet(new ulong[]{0x10800007188ED252UL,0x141006C03F014000UL,0x1UL});
		public static readonly BitSet _aliasedSelectExpr_in_selectExprList872 = new BitSet(new ulong[]{0x10800007188ED252UL,0x141006C03F014000UL,0x1UL});
		public static readonly BitSet _AS_in_aliasedSelectExpr896 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _selectExpr_in_aliasedSelectExpr900 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x1UL});
		public static readonly BitSet _identifier_in_aliasedSelectExpr904 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _propertyRef_in_selectExpr919 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALL_in_selectExpr931 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _aliasRef_in_selectExpr935 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _OBJECT_in_selectExpr947 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _aliasRef_in_selectExpr951 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _constructor_in_selectExpr962 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionCall_in_selectExpr973 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameter_in_selectExpr978 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _count_in_selectExpr983 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionFunction_in_selectExpr988 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_selectExpr996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arithmeticExpr_in_selectExpr1001 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_in_selectExpr1006 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COUNT_in_count1018 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _aggregateExpr_in_count1033 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ROW_STAR_in_count1037 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CONSTRUCTOR_in_constructor1053 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _path_in_constructor1055 = new BitSet(new ulong[]{0x10800007188ED258UL,0x141006C03F014000UL,0x1UL});
		public static readonly BitSet _selectExpr_in_constructor1059 = new BitSet(new ulong[]{0x10800007188ED258UL,0x141006C03F014000UL,0x1UL});
		public static readonly BitSet _aliasedSelectExpr_in_constructor1063 = new BitSet(new ulong[]{0x10800007188ED258UL,0x141006C03F014000UL,0x1UL});
		public static readonly BitSet _expr_in_aggregateExpr1079 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionFunction_in_aggregateExpr1085 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_fromClause1105 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _fromElementList_in_fromClause1109 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _fromElement_in_fromElementList1132 = new BitSet(new ulong[]{0x400000000002UL,0x80000000020UL});
		public static readonly BitSet _RANGE_in_fromElement1157 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _path_in_fromElement1161 = new BitSet(new ulong[]{0x200000000028UL});
		public static readonly BitSet _ALIAS_in_fromElement1166 = new BitSet(new ulong[]{0x200000000008UL});
		public static readonly BitSet _FETCH_in_fromElement1173 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _joinElement_in_fromElement1200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FILTER_ENTITY_in_fromElement1215 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ALIAS_in_fromElement1219 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _JOIN_in_joinElement1248 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _joinType_in_joinElement1253 = new BitSet(new ulong[]{0x80200200000000UL,0x0UL,0x1UL});
		public static readonly BitSet _FETCH_in_joinElement1263 = new BitSet(new ulong[]{0x80000200000000UL,0x0UL,0x1UL});
		public static readonly BitSet _propertyRef_in_joinElement1269 = new BitSet(new ulong[]{0x200000000028UL,0x0UL,0x8UL});
		public static readonly BitSet _ALIAS_in_joinElement1274 = new BitSet(new ulong[]{0x200000000008UL,0x0UL,0x8UL});
		public static readonly BitSet _FETCH_in_joinElement1281 = new BitSet(new ulong[]{0x8UL,0x0UL,0x8UL});
		public static readonly BitSet _WITH_in_joinElement1290 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _LEFT_in_joinType1331 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _RIGHT_in_joinType1337 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _OUTER_in_joinType1343 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FULL_in_joinType1357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INNER_in_joinType1364 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_path1386 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_path1394 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _path_in_path1398 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x1UL});
		public static readonly BitSet _identifier_in_path1402 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _path_in_pathAsIdent1421 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WITH_in_withClause1462 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logicalExpr_in_withClause1468 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _WHERE_in_whereClause1501 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logicalExpr_in_whereClause1507 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _AND_in_logicalExpr1538 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logicalExpr_in_logicalExpr1540 = new BitSet(new ulong[]{0xC94024200002090UL,0x4007A4A4CUL,0x1UL});
		public static readonly BitSet _logicalExpr_in_logicalExpr1542 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _OR_in_logicalExpr1549 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logicalExpr_in_logicalExpr1551 = new BitSet(new ulong[]{0xC94024200002090UL,0x4007A4A4CUL,0x1UL});
		public static readonly BitSet _logicalExpr_in_logicalExpr1553 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NOT_in_logicalExpr1560 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logicalExpr_in_logicalExpr1562 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _comparisonExpr_in_logicalExpr1568 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionCall_in_logicalExpr1573 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalPath_in_logicalExpr1578 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addrExpr_in_logicalPath1597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EQ_in_comparisonExpr1635 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1637 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1639 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NE_in_comparisonExpr1646 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1648 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1650 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LT_in_comparisonExpr1657 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1659 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1661 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _GT_in_comparisonExpr1668 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1670 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1672 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LE_in_comparisonExpr1679 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1681 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1683 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _GE_in_comparisonExpr1690 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1692 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1694 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _LIKE_in_comparisonExpr1701 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1703 = new BitSet(new ulong[]{0x8801003108ED010UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _expr_in_comparisonExpr1705 = new BitSet(new ulong[]{0x8000000008UL});
		public static readonly BitSet _ESCAPE_in_comparisonExpr1710 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_comparisonExpr1712 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NOT_LIKE_in_comparisonExpr1724 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1726 = new BitSet(new ulong[]{0x8801003108ED010UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _expr_in_comparisonExpr1728 = new BitSet(new ulong[]{0x8000000008UL});
		public static readonly BitSet _ESCAPE_in_comparisonExpr1733 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_comparisonExpr1735 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BETWEEN_in_comparisonExpr1747 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1749 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1751 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1753 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NOT_BETWEEN_in_comparisonExpr1760 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1762 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1764 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1766 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IN_in_comparisonExpr1773 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1775 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _inRhs_in_comparisonExpr1777 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NOT_IN_in_comparisonExpr1785 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1787 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _inRhs_in_comparisonExpr1789 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IS_NULL_in_comparisonExpr1797 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1799 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IS_NOT_NULL_in_comparisonExpr1806 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_comparisonExpr1808 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _EXISTS_in_comparisonExpr1817 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_comparisonExpr1821 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _collectionFunctionOrSubselect_in_comparisonExpr1825 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _IN_LIST_in_inRhs1849 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _collectionFunctionOrSubselect_in_inRhs1853 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _expr_in_inRhs1857 = new BitSet(new ulong[]{0x8801003108ED018UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _expr_in_exprOrSubquery1873 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_in_exprOrSubquery1878 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ANY_in_exprOrSubquery1884 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _collectionFunctionOrSubselect_in_exprOrSubquery1886 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ALL_in_exprOrSubquery1893 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _collectionFunctionOrSubselect_in_exprOrSubquery1895 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _SOME_in_exprOrSubquery1902 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _collectionFunctionOrSubselect_in_exprOrSubquery1904 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _collectionFunction_in_collectionFunctionOrSubselect1917 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _query_in_collectionFunctionOrSubselect1922 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addrExpr_in_expr1936 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _VECTOR_EXPR_in_expr1948 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_expr1951 = new BitSet(new ulong[]{0x8801003108ED018UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _constant_in_expr1960 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arithmeticExpr_in_expr1965 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functionCall_in_expr1970 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameter_in_expr1982 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _count_in_expr1987 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUS_in_arithmeticExpr2015 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2017 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2019 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _MINUS_in_arithmeticExpr2026 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2028 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2030 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _DIV_in_arithmeticExpr2037 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2039 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2041 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _STAR_in_arithmeticExpr2048 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2050 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2052 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BNOT_in_arithmeticExpr2059 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2061 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BAND_in_arithmeticExpr2068 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2070 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2072 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BOR_in_arithmeticExpr2079 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2081 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2083 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _BXOR_in_arithmeticExpr2090 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2092 = new BitSet(new ulong[]{0x8801003108ED150UL,0x561406C01F814010UL,0x1UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2094 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _UNARY_MINUS_in_arithmeticExpr2102 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _exprOrSubquery_in_arithmeticExpr2104 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _caseExpr_in_arithmeticExpr2112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_caseExpr2124 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _WHEN_in_caseExpr2130 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _logicalExpr_in_caseExpr2132 = new BitSet(new ulong[]{0x8801003108ED010UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _expr_in_caseExpr2134 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ELSE_in_caseExpr2141 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_caseExpr2143 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _CASE2_in_caseExpr2155 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_caseExpr2159 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _WHEN_in_caseExpr2163 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_caseExpr2165 = new BitSet(new ulong[]{0x8801003108ED010UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _expr_in_caseExpr2167 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ELSE_in_caseExpr2174 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_caseExpr2176 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _ELEMENTS_in_collectionFunction2198 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _propertyRef_in_collectionFunction2204 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INDICES_in_collectionFunction2223 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _propertyRef_in_collectionFunction2229 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _METHOD_CALL_in_functionCall2254 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _pathAsIdent_in_functionCall2259 = new BitSet(new ulong[]{0x80000000008UL});
		public static readonly BitSet _EXPR_LIST_in_functionCall2264 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _expr_in_functionCall2267 = new BitSet(new ulong[]{0xC941243108EF018UL,0x561006C01FF34A5CUL,0x1UL});
		public static readonly BitSet _query_in_functionCall2271 = new BitSet(new ulong[]{0xC941243108EF018UL,0x561006C01FF34A5CUL,0x1UL});
		public static readonly BitSet _comparisonExpr_in_functionCall2275 = new BitSet(new ulong[]{0xC941243108EF018UL,0x561006C01FF34A5CUL,0x1UL});
		public static readonly BitSet _AGGREGATE_in_functionCall2294 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _aggregateExpr_in_functionCall2296 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _literal_in_constant2309 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NULL_in_constant2314 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_in_constant2321 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_in_constant2331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _JAVA_CONSTANT_in_constant2338 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _numericLiteral_in_literal2349 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stringLiteral_in_literal2354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _QUOTED_String_in_stringLiteral2401 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addrExprDot_in_addrExpr2431 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addrExprIndex_in_addrExpr2438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addrExprIdent_in_addrExpr2445 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_addrExprDot2469 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _addrExprLhs_in_addrExprDot2473 = new BitSet(new ulong[]{0x1080000400100000UL,0x0UL,0x1UL});
		public static readonly BitSet _propertyName_in_addrExprDot2477 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _INDEX_OP_in_addrExprIndex2516 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _addrExprLhs_in_addrExprIndex2520 = new BitSet(new ulong[]{0x8801003108ED010UL,0x461004C01F814010UL,0x1UL});
		public static readonly BitSet _expr_in_addrExprIndex2524 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _identifier_in_addrExprIdent2556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addrExpr_in_addrExprLhs2584 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_propertyName2597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CLASS_in_propertyName2602 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELEMENTS_in_propertyName2607 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDICES_in_propertyName2612 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyRefPath_in_propertyRef2624 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyRefIdent_in_propertyRef2629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_propertyRefPath2649 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _propertyRefLhs_in_propertyRefPath2653 = new BitSet(new ulong[]{0x1080000400100000UL,0x0UL,0x1UL});
		public static readonly BitSet _propertyName_in_propertyRefPath2657 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _identifier_in_propertyRefIdent2694 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _propertyRef_in_propertyRefLhs2706 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_aliasRef2727 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLON_in_parameter2745 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _identifier_in_parameter2749 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _PARAM_in_parameter2770 = new BitSet(new ulong[]{0x4UL});
		public static readonly BitSet _NUM_INT_in_parameter2775 = new BitSet(new ulong[]{0x8UL});
		public static readonly BitSet _NUM_INT_in_numericInteger2808 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  NHibernate.Hql.Ast.ANTLR 
